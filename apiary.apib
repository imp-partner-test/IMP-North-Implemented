HOST: https://as.production.imp.mobilitaetsdienste.de:8443/imp-endpoint

--- IMP North: Implemented ---

--
Readme before making any changes 

Please keep the groovy generating script in synch with this documentation. Read more on Wiki: https://confluence.imp.mobilitaetsdienste.de/display/IMP/Apiary.

- update the goovy script if you change names of any chapter 
- chapter names can not contain special characters "(", ")", "\", etc. which have a meaning in regular expressions

--

--
Introduction

This is a description of a public REST interface offered by Siemens AG and its subsidiary VMZ Berlin Betreibergesellschaft GmbH 
in the project Open Mobility Berlin. A mockup of this interface can be tried using the URLs listed on the right. For access to the production
system please write an email to `henrik.koberg@siemens.com`

(c) Siemens AG 2014 All rights reserved

--


-- 
Handy Ticket
--
# General Description
List of available products for specified origin and destination. Both are public transport stations and are identified by `{pointId}`. 
PointId can be retrieved using `GET /api/V0/Resources/PublicTransport/Stations` 

# Query Parameters 
`action=book`

# Input in request body: 

- origin: Point id and address string
- destination: Point id and address string
- viaPoints: List of geo locations the route should pass
- numberOfTickets: Number of tickets
- ticketingCategory: Specified zone. Possible values: B0, B1, B2, B3

# Response 
List of available product for buying.
The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
actions | Array | List of available actions on this resource (buy/confirm)
id | Number | Resource id
description | String | 
type | String | 
uri | URI | URI to request more details
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider | String | 
operator | String | Name of Ticket Operator
tariffText | String | Contains Zone and Validity inforation
tariffInformation | String | Conditions applied for ticket
price | double | Price of ticket
currency | String | Currency


POST /api/V0/Resources/Ticketing/Tickets
> Accept: application/json
> Content-Type: application/json
{   "origin": { 
    "id": "{pointId}", 
    "address": "Dresden Hauptbahnhof"
    },
    "destination": { 
  	"id": "{pointId}",         
	"address": "Dresden Postplatz"      
    },
    "numberOfTickets": "1",
    "ticketingCategory": "B0",
    "viaPoints": []
}
< 200
< Content-Type: application/json
[
    {
        "actions": [
            {
                "name": "buy",
                "method": "POST",
                "uri": "Resources/Ticketing/Tickets/{resourceId}/Process?action=buy"
            }
        ],
        "id": {resourceId},
        "description": null,
        "type": null,
        "uri": "Resources/Ticketing/Tickets/157",
        "location": null,
        "provider": null,
        "operator": "handyticket",
        "tariffText": "DVB VVO-Einzelfahrt normal Preisstufe 1 für Zone Dresden gültig 18.11.13 12:21 Uhr bis 13:21 Uhr.",
        "tariffInformation": "Gilt in der angegebenen Tarifzone; max. 1 Std.",
        "price": 2.2,
        "currency": "EUR"
    }
]


# General Description
Buy ticket with resource Id.

# Query Parameters 
`action=buy`

# Request Path Parameters
- `resourceId={String}, resource id`

# Input in request body: 

- name: Name of Ticket Operator
- userId: User id for buying ticket
- password: Password for buying ticket

# Input in headers:

- userToken={userToken} in basic auth. Token generated for the user.

# Response 

Details of a bought ticket, identified by {ticketIds} and {ticketContent}.
The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
actions | Array | List of available actions on this resource (confirm)
processId | Number | BPMN process id
confirmation | Object | Buy ticket response data


confirmation contains following fileds:

attribute | json data type | comments
--- | --- | ---
requestId | String | Resource id received while initiating the booking
ticketIds | Array | Array of ticket ids 
ticketContent | Base64Binary | Content of Ticket



POST /api/V0/Resources/Ticketing/Tickets/{resourceId}/Process
> Accept: application/json
> Content-Type: application/json
> userToken: {userToken}
{
    "operator": {
        "name": "handyticket",
        "userId": "01805006013",
        "password": "7555"
    }
}
< 201
< Content-Type: application/json
{
    "actions": [
        {
            "name": "confirm",
            "method": "PUT",
            "uri": "Processes/{processId}?action=confirm"
        }
    ],
    "processId": {processId},
    "confirmation": {
        "featureType": "BUY",
        "confirmationId": null,
        "confirmationData": {
            "requestId": "{resourceid}"
            "ticketIds": [
                "274946704480125"
            ],
            "ticketContent": "UEQ5NGJXd2dkbVZ5YzJsdmJqMGlNUzR3SWlCbGJtTnZaR2x1WnowaVZWUkdMVGdpUHo0TkNqeDBhV05yWlhSRmNuZGxjbUp6VUhKdmVtVnpjMUpsYzNCdmJuTmxQZzBLSUNBOGNISmxhWE0rTWl3eU1Ed3ZjSEpsYVhNK0RRb2dJRHgzWVdWb2NuVnVaejVGVlZJOEwzZGhaV2h5ZFc1blBnMEtJQ0E4WVdkVVpYaDBQakY0SUVSV1FpQldWazh0UldsdWVtVnNabUZvY25RZ2JtOXliV0ZzSUZCeVpXbHpjM1IxWm1VZ01TQm13N3h5SUZwdmJtVWdSSEpsYzJSbGJpQm53N3hzZEdsbklERXpMakV4TGpFeklEQTFPalV6SUZWb2NpQmlhWE1nTURZNk5UTWdWV2h5TGp3dllXZFVaWGgwUGcwS0lDQThiV1Z6YzJGblpTQjBlWEJsUFNKM1lYSnVhVzVuSWo0OEwyMWxjM05oWjJVK0RRb2dJRHh1ZFhSNlpYSWdMejROQ2lBZ1BHSmxjbVZqYUhScFozVnVaMlZ1UGcwS0lDQWdJRHhpWlhKbFkyaDBhV2QxYm1jK0RRb2dJQ0FnSUNBOGMzUmhkSFZ6UGpBOEwzTjBZWFIxY3o0TkNpQWdJQ0FnSUR4MGVYQStNVHd2ZEhsd1BnMEtJQ0FnSUNBZ1BIQjJQall3TmpBOEwzQjJQZzBLSUNBZ0lDQWdQSEJ5YVcxaFpYSkxkbkErTmpBeE16d3ZjSEpwYldGbGNrdDJjRDROQ2lBZ0lDQWdJRHh6Wld0MWJtUmhaWEpMZG5BK05qQXhNend2YzJWcmRXNWtZV1Z5UzNad1BnMEtJQ0FnSUNBZ1BIQnliMlIxYTNSRGIyUmxQakU4TDNCeWIyUjFhM1JEYjJSbFBnMEtJQ0FnSUNBZ1BHZGxZbWxsZEhOSGRXVnNkR2xuYTJWcGRENHdQQzluWldKcFpYUnpSM1ZsYkhScFoydGxhWFErRFFvZ0lDQWdJQ0E4ZW1WcGRFZDFaV3gwYVdkclpXbDBQakE4TDNwbGFYUkhkV1ZzZEdsbmEyVnBkRDROQ2lBZ0lDQWdJRHh1ZFhSNlpYSlVlWEErTUR3dmJuVjBlbVZ5Vkhsd1BnMEtJQ0FnSUNBZ1BITjBZWEowV205dVpUNHhNRHd2YzNSaGNuUmFiMjVsUGcwS0lDQWdJQ0FnUEd0dmJXWnZjblErTVR3dmEyOXRabTl5ZEQ0TkNpQWdJQ0FnSUR4eGRXRnNhWFJoWlhRK01Ud3ZjWFZoYkdsMFlXVjBQZzBLSUNBZ0lDQWdQR0psYzJOb2NtVnBZblZ1Wno1RVZrSWdWbFpQTFVWcGJucGxiR1poYUhKMElHNXZjbTFoYkNCUWNtVnBjM04wZFdabElERWdac084Y2lCYWIyNWxJRVJ5WlhOa1pXNGdaOE84YkhScFp5QXhNeTR4TVM0eE15QXdOVG8xTXlCVmFISWdZbWx6SURBMk9qVXpJRlZvY2k0OEwySmxjMk5vY21WcFluVnVaejROQ2lBZ0lDQWdJRHgwWVhKcFptbHVabTgrUjJsc2RDQnBiaUJrWlhJZ1lXNW5aV2RsWW1WdVpXNGdWR0Z5YVdaNmIyNWxPeUJ0WVhndUlERWdVM1JrTGp3dmRHRnlhV1pwYm1adlBnMEtJQ0FnSUNBZ1BITnBZMmhsY21obGFYUnpUV1Z5YTIxaGJENUZUakV0TVRBdE1UTXhNVEExTlRNS1VDb3FNekV5TXpFeU16aDJDazF2ZEdsMklEUXhPVFV6TlRNM05qY0tMUzFVUlZOVUxTMVVTVU5MUlZRdExRbzhMM05wWTJobGNtaGxhWFJ6VFdWeWEyMWhiRDROQ2lBZ0lDQWdJRHhpWVhKamIyUmxQbWxXUWs5U2R6QkxSMmR2UVVGQlFVNVRWV2hGVldkQlFVRkpORUZCUVVOUFEwRk5RVUZCUkZGSk9FRTJRVUZCUVVKc1FrMVdSVmd2THk4NFFVRkJRbFozZEU0clFVRkJSVFZGYkVWUlZsSTBNblV5WXpJeU4ycE5RWGhGYkdZdkx6WlhNVkppUXpKU05UbEVjR3NyWTJoQ1ZHSlpTa3haT0hScGFHVm9jVTl6TVRsbVppdDJjamRtYmpJNVpuUTFaSEk1WkRNdk1TdDJZaXQyYmpWNlpsZ3laR051SzNodU4wVmtkSEpKU25nclkyOVdNRzV1ZDA1MlRVODBMMjR2WlVsMEwwRmtaSHA0UlU5TVoyNUJSREozWlhWcVVFZEhZMFV4Y1ZBeU1pdHZNM1EwS3pkbWRUUmxXRVJQVGpBdkwzazBUbnB0ZEhveFlWQnphMVpaVFRoR2VrbGlUbkJzZFZCaVMwMUdkMlZ1VERkMGRYTkxZM2hVYTNReWJGWkljbTFQZHpaT0szVktaMnhQV0U5VWJFZFhjbnB1UWxOeFVXVnpSbnBuV0daSVowMU5PVVJMWlRaeGRUWTRkWFYxY1VRM2MySTNORXg0T1M5UGNTc3ZkVVpHWjI1SVJqTnhaR3RQY21rMk4zUjFkMDlsU1RsV2IyNTNSRkUwWm1GR1YxTkNXVzByV2t0Vk1FWlZiME0yVUVJM0wwOUtaM3BOV2pKbGVua3JjMDkyTkdGWEt6RnJWM2xZZW5OT1JHaHRabmd2YldWVWRtNVJkRXBVU2tsSk5tSkViMDU2YkdsNE0yZFpRMHRHU1djMGNsSlRjVlJ5UWs4eWFrWlBSVXA0TlhOMWVsVmhVbTR6VFVaRlpGSllNRWxTTlVGSmFFMVFiWGd4VUdjM016STJOa1pOVFVsdFJuZGxhMHBsUm5sUFZubEVlRnB1V0hsM1prczRVMFY0ZFhkTlJHaEZha1pEY1RsV04yZGFSbEJzT0UxdVJtUkNiMk50Tmt0bGRVNVBVVkpKZHpSM1kxTnRXRVpNWlV0RWFXTkJSbEZFY0VaVGFUQjZRbXN2YmpBMU9VOUxlREZQWjNoalJEYzRhbk5RY0RSWk1sTkxVM0E0VDBsRmQzQjZaVlo2ZEhWWldWaERTVzVxV25FeGMzUXJUV3MxTWtOV1RsRkZjbUk0WTFScGRHUkdPRk16YWtKRk9XdFRjVXB0TlVjeFIwRmFTR2RsYm14cFVtTjNiRmhwYmpST2NGUXlhM0JuUVhsQ1MxRnZUM1EwWlZsdmNYcEZTRVJsU25sRFNIZFRUREJ6VTBsT1ZFb3lhRXRKWlc1NmVWbFlNakZKTTBwWE4wTmxSMFJvT1c5bVpWVnhObHBWU0ZSNlJGcEljVUY1VVZBeFQzY3ZRMWxZUzFKcGJERjVRMGd5YVhKaWJsZFJlbGR0ZUZkR2R6VnJVMEpEY0djclMxWTBVVGxqYkhWaVQwRkRNbmR0UW5kNVduQmtTMWR1TkVaUGVtbEtjM1JzVG1scmQyRkZWMVZETDJKb1FuZFRTM05XWTNkclFsQTVkRVpETkVWNlEwSnVXbTR2VW5scVkzRXlWWEJDY3k5U1EwVm9ZMDFwY0dOWlNrWTBTbmhsYjAxWVRVeG9UMU55ZVVFME0wWjZNSFJJVW1oVk5EWkxTVFphTmtvNFpWTkNiMlJHUTI0d05VODNia2xXVEN0V1VUbDNWMkZJTkRWRFRUWklNek5HSzNnNWVqZHNUVFUzVnpKcFpXTkhiMEpHTmtabFJrcDRaUzl1ZFhvemJWWTBabE5zWW5jMWMwUk9jMU56UTBScVZWaHdOVVp1WWpNMWN6QlVkakJvWmpaWGNsQlJTbWM0VDJ4NlRqTnhWMmRRUVdwU2FHc3dTVWxUSzJ0M1QwSTBWMDlVYm5kcFpreHJNVWRXTjNjeVVrZDNTbTFUY1RSdGRXMHdjMkp0ZUZseGFWVjBlVWRuWmtoRFQyVTNZWEJ4YjJKck9HZHhSR2RYTUZWTldVaEhkRFJ0VTNsTGIyOHlZazlOYkhCWFZIRmhRMWxsYTB3MVlrVnpOamwzVFhOdVJHaExjSGhaSzBGM1EyUkJXRXMxYldkdFZGbG1kMk5GWVhCalJYaGpUSEo0YzI5NVlXRmFXa3BEYlRKRlJFMXJRbE53UTBsblkwNTViVXhWYlhOd1lrVnBWVlJ1YlRoVVVGcFhNWEJqUzJkb05YUkpjbTkzV2xsM1IyVkhNRVpRWmxKU1JUSkJRVFJZT0hrMU4xaFdiM0Y2YlZJMFRqSnphSEkyVEdkMVJXcExUbTlMVWl0SGIyMWxlV1pwY1d4M2NFUk5Oa2d6TTJ4dVpuaGhXSFZ3TWxGek5WbDBNRGM1VnpocVFURnNkM0pJVWtkTmEyVkhTR0ZyYjJkRFNUaFhPWE5hUVVob01YVnNURWhhTWtOYVJWaFJWVGQyV1hKdlYwSlpaRVphWWpaU1ltdHZVV1ZQZGtKMFIxY3hRbHByZDA5SFUzbHlaMmxpYUZJMVZEQnFWMHg2YkhOMVIwRlFTRlZ6Y0ZvNVIwSmljQ3MyVEZGaFdWbFJVREJXUVVsak0wRlZOME5QYmk5ek5WQjRaRXBKUTBOdGVrRTBka1ZJVTFKYU5WUkJOVXB2Uldwa2RHRllhRWgzWlVoNWFFUmpNR1ZWZGtGcmVFWnhTMWhEUTJWMFFrNU5XRU5KYlcxWFFqUlRVMFI0YlROallYaEpURWs0WjNkUFExbG5TWGh1YlV4TGVUVXlNRUl4YkRZMlFqVjJVbmhQUlhoQk9HdFpaak5wUW05UU1IWnBlbFY0TWtWeWJIZG1SbEJWZGtremNHNWxPVGsyYTBOclNHZGlTSFExY1N0MU5tMVJURzVYTTFWa2NHOXBSRkUwYkhCUGVFOUllbUZXTUVkMWEwRjZXSEZXTjJOR0wyOXZia0VyTHpoNFpqbEVkRTlLVEd4emQwMXpObVJMT0hSRmREazVkV2x2VEdwTVZtNHZjVkpKYW5sTGJEaG1iR05YWlRGQlIxVllRalJoTjJFeGFqbGhZWEJKTW5weVNIZFRiRGhpUWl0UlpXcFVRMWx3Vm1aMlEwZFJRVUZCUVVKS1VsVTFSWEpyU21kblp6MDlQQzlpWVhKamIyUmxQZzBLSUNBZ0lDQWdQR0psY21WamFIUnBaM1Z1WjNORVlYUmxQakl3TVRNdE1URXRNVE5VTURVNk5UTTZNakVyTURFd01Ed3ZZbVZ5WldOb2RHbG5kVzVuYzBSaGRHVStEUW9nSUNBZ0lDQThaM1ZsYkhScFoydGxhWFJ6UW1WbmFXNXVQakl3TVRNdE1URXRNVE5VTURVNk5UTTZNakFyTURFd01Ed3ZaM1ZsYkhScFoydGxhWFJ6UW1WbmFXNXVQZzBLSUNBZ0lDQWdQR2QxWld4MGFXZHJaV2wwYzBWdVpHVStNakF4TXkweE1TMHhNMVF3TmpvMU16b3lNQ3N3TVRBd1BDOW5kV1ZzZEdsbmEyVnBkSE5GYm1SbFBnMEtJQ0FnSUNBZ1BHWnZjbTFoZEhSbFpGQnlaV2x6UGpJc01qQWdSVlZTUEM5bWIzSnRZWFIwWldSUWNtVnBjejROQ2lBZ0lDQWdJRHgzWVdWb2NuVnVaejR1UEM5M1lXVm9jblZ1Wno0TkNpQWdJQ0FnSUR4cmIyNTBjbTlzYkdWMWNuTkRiMlJsUGtWT01TMHhNQzB4TXpFeE1EVTFNend2YTI5dWRISnZiR3hsZFhKelEyOWtaVDROQ2lBZ0lDQWdJRHhyYjI1MGNtOXNiRzFsWkdsMWJUNVFLaW96TVRJek1USXpPSFk4TDJ0dmJuUnliMnhzYldWa2FYVnRQZzBLSUNBZ0lDQWdQSFJoWjJWelEyOWtaVDVOYjNScGRqd3ZkR0ZuWlhORGIyUmxQZzBLSUNBZ0lDQWdQSFJwWTJ0bGRFbEVQakkzTkRrME5qY3dORFE0TURFeU5Ud3ZkR2xqYTJWMFNVUStEUW9nSUNBZ0lDQThjMmxuYm1GMGRYSmxQaTB0VkVWVFZDMHRWRWxEUzBWVUxTMDhMM05wWjI1aGRIVnlaVDROQ2lBZ0lDQThMMkpsY21WamFIUnBaM1Z1Wno0TkNpQWdQQzlpWlhKbFkyaDBhV2QxYm1kbGJqNE5Dand2ZEdsamEyVjBSWEozWlhKaWMxQnliM3BsYzNOU1pYTndiMjV6WlQ0TkNnMEs="
        }
    }
}


# General Description
Confirm ticket delivery.

# Query Parameters 
`action=confirm`

# Request Path Parameters
- `processId={String}, BPMN process id`


# Input in request body: 
- requestId: Resource id
- ticketIds: Tickets ids for confirmation
- operator: Name of Ticket Operator

# Response 
The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
actions | Array | List of available actions on this resource (confirm)
processId | Number | BPMN process id
confirmation | Object | Confirm ticket response data


confirmation contains following fileds:

attribute | json data type | comments
--- | --- | ---
featureType | String | Feature type
confirmationId | String | 
confirmationData | Object | Response of confirm ticket request

confirmationData contains following fileds:

attribute | json data type | comments
--- | --- | ---
confirmed | Boolean | Value indicating success/failure


PUT /api/V0/Processes/{processId}
> Accept: application/json
> Content-Type: application/json
> userToken: {userToken}
{
  "requestId": "{resourceId}",
  "ticketIds": [
                "274946704480125"
               ],
   "operator": {
        "name": "handyticket"        
    }
}
< 200
< Content-Type: application/json
{
    "process": {
        "actions": [],
        "processId": "{processId}",
        "confirmation": {
            "featureType": "CONFIRM",
            "confirmationId": null,
            "confirmationData": {
                "confirmed": true
            }
        }
    }
}


# General Description
Get Unconfirmed Tickets for a user.

# Query Parameters 
- currently none

# Request Path Parameters
- currently none


# Input in request body
- currently none

# Response 
List of tickets bought, identified by {ticketIds} and {ticketContent}.
The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
actions | Array | List of available actions on this resource (confirm)
processId | Number | BPMN process id
confirmation | Object | Buy ticket response data


confirmation contains following fileds:

attribute | json data type | comments
--- | --- | ---
requestId | String | Resource id received while initiating the booking
ticketIds | Array | Array of ticket ids 
ticketContent | Base64Binary | Content of Ticket


GET /api/V0/Resources/Ticketing/Tickets
> Accept: application/json
> Content-Type: application/json
> userToken: {userToken}
< 200
< Content-Type: application/json
[
    {
        "actions": [
            {
                "name": "confirm",
                "method": "PUT",
                "uri": "Processes/{processId}?action=confirm"
            }
        ],
        "processId": {processId},
        "confirmation": {
            "featureType": "BUY",
            "confirmationId": null,
            "confirmationData": {
                "requestId": "{resourceid}"
                "ticketIds": [
                    "274946704480125"
                ],
                "ticketContent": "UEQ5NGJXd2dkbVZ5YzJsdmJqMGlNUzR3SWlCbGJtTnZaR2x1WnowaVZWUkdMVGdpUHo0TkNqeDBhV05yWlhSRmNuZGxjbUp6VUhKdmVtVnpjMUpsYzNCdmJuTmxQZzBLSUNBOGNISmxhWE0rTWl3eU1Ed3ZjSEpsYVhNK0RRb2dJRHgzWVdWb2NuVnVaejVGVlZJOEwzZGhaV2h5ZFc1blBnMEtJQ0E4WVdkVVpYaDBQakY0SUVSV1FpQldWazh0UldsdWVtVnNabUZvY25RZ2JtOXliV0ZzSUZCeVpXbHpjM1IxWm1VZ01TQm13N3h5SUZwdmJtVWdSSEpsYzJSbGJpQm53N3hzZEdsbklERXpMakV4TGpFeklEQTFPalV6SUZWb2NpQmlhWE1nTURZNk5UTWdWV2h5TGp3dllXZFVaWGgwUGcwS0lDQThiV1Z6YzJGblpTQjBlWEJsUFNKM1lYSnVhVzVuSWo0OEwyMWxjM05oWjJVK0RRb2dJRHh1ZFhSNlpYSWdMejROQ2lBZ1BHSmxjbVZqYUhScFozVnVaMlZ1UGcwS0lDQWdJRHhpWlhKbFkyaDBhV2QxYm1jK0RRb2dJQ0FnSUNBOGMzUmhkSFZ6UGpBOEwzTjBZWFIxY3o0TkNpQWdJQ0FnSUR4MGVYQStNVHd2ZEhsd1BnMEtJQ0FnSUNBZ1BIQjJQall3TmpBOEwzQjJQZzBLSUNBZ0lDQWdQSEJ5YVcxaFpYSkxkbkErTmpBeE16d3ZjSEpwYldGbGNrdDJjRDROQ2lBZ0lDQWdJRHh6Wld0MWJtUmhaWEpMZG5BK05qQXhNend2YzJWcmRXNWtZV1Z5UzNad1BnMEtJQ0FnSUNBZ1BIQnliMlIxYTNSRGIyUmxQakU4TDNCeWIyUjFhM1JEYjJSbFBnMEtJQ0FnSUNBZ1BHZGxZbWxsZEhOSGRXVnNkR2xuYTJWcGRENHdQQzluWldKcFpYUnpSM1ZsYkhScFoydGxhWFErRFFvZ0lDQWdJQ0E4ZW1WcGRFZDFaV3gwYVdkclpXbDBQakE4TDNwbGFYUkhkV1ZzZEdsbmEyVnBkRDROQ2lBZ0lDQWdJRHh1ZFhSNlpYSlVlWEErTUR3dmJuVjBlbVZ5Vkhsd1BnMEtJQ0FnSUNBZ1BITjBZWEowV205dVpUNHhNRHd2YzNSaGNuUmFiMjVsUGcwS0lDQWdJQ0FnUEd0dmJXWnZjblErTVR3dmEyOXRabTl5ZEQ0TkNpQWdJQ0FnSUR4eGRXRnNhWFJoWlhRK01Ud3ZjWFZoYkdsMFlXVjBQZzBLSUNBZ0lDQWdQR0psYzJOb2NtVnBZblZ1Wno1RVZrSWdWbFpQTFVWcGJucGxiR1poYUhKMElHNXZjbTFoYkNCUWNtVnBjM04wZFdabElERWdac084Y2lCYWIyNWxJRVJ5WlhOa1pXNGdaOE84YkhScFp5QXhNeTR4TVM0eE15QXdOVG8xTXlCVmFISWdZbWx6SURBMk9qVXpJRlZvY2k0OEwySmxjMk5vY21WcFluVnVaejROQ2lBZ0lDQWdJRHgwWVhKcFptbHVabTgrUjJsc2RDQnBiaUJrWlhJZ1lXNW5aV2RsWW1WdVpXNGdWR0Z5YVdaNmIyNWxPeUJ0WVhndUlERWdVM1JrTGp3dmRHRnlhV1pwYm1adlBnMEtJQ0FnSUNBZ1BITnBZMmhsY21obGFYUnpUV1Z5YTIxaGJENUZUakV0TVRBdE1UTXhNVEExTlRNS1VDb3FNekV5TXpFeU16aDJDazF2ZEdsMklEUXhPVFV6TlRNM05qY0tMUzFVUlZOVUxTMVVTVU5MUlZRdExRbzhMM05wWTJobGNtaGxhWFJ6VFdWeWEyMWhiRDROQ2lBZ0lDQWdJRHhpWVhKamIyUmxQbWxXUWs5U2R6QkxSMmR2UVVGQlFVNVRWV2hGVldkQlFVRkpORUZCUVVOUFEwRk5RVUZCUkZGSk9FRTJRVUZCUVVKc1FrMVdSVmd2THk4NFFVRkJRbFozZEU0clFVRkJSVFZGYkVWUlZsSTBNblV5WXpJeU4ycE5RWGhGYkdZdkx6WlhNVkppUXpKU05UbEVjR3NyWTJoQ1ZHSlpTa3haT0hScGFHVm9jVTl6TVRsbVppdDJjamRtYmpJNVpuUTFaSEk1WkRNdk1TdDJZaXQyYmpWNlpsZ3laR051SzNodU4wVmtkSEpKU25nclkyOVdNRzV1ZDA1MlRVODBMMjR2WlVsMEwwRmtaSHA0UlU5TVoyNUJSREozWlhWcVVFZEhZMFV4Y1ZBeU1pdHZNM1EwS3pkbWRUUmxXRVJQVGpBdkwzazBUbnB0ZEhveFlWQnphMVpaVFRoR2VrbGlUbkJzZFZCaVMwMUdkMlZ1VERkMGRYTkxZM2hVYTNReWJGWkljbTFQZHpaT0szVktaMnhQV0U5VWJFZFhjbnB1UWxOeFVXVnpSbnBuV0daSVowMU5PVVJMWlRaeGRUWTRkWFYxY1VRM2MySTNORXg0T1M5UGNTc3ZkVVpHWjI1SVJqTnhaR3RQY21rMk4zUjFkMDlsU1RsV2IyNTNSRkUwWm1GR1YxTkNXVzByV2t0Vk1FWlZiME0yVUVJM0wwOUtaM3BOV2pKbGVua3JjMDkyTkdGWEt6RnJWM2xZZW5OT1JHaHRabmd2YldWVWRtNVJkRXBVU2tsSk5tSkViMDU2YkdsNE0yZFpRMHRHU1djMGNsSlRjVlJ5UWs4eWFrWlBSVXA0TlhOMWVsVmhVbTR6VFVaRlpGSllNRWxTTlVGSmFFMVFiWGd4VUdjM016STJOa1pOVFVsdFJuZGxhMHBsUm5sUFZubEVlRnB1V0hsM1prczRVMFY0ZFhkTlJHaEZha1pEY1RsV04yZGFSbEJzT0UxdVJtUkNiMk50Tmt0bGRVNVBVVkpKZHpSM1kxTnRXRVpNWlV0RWFXTkJSbEZFY0VaVGFUQjZRbXN2YmpBMU9VOUxlREZQWjNoalJEYzRhbk5RY0RSWk1sTkxVM0E0VDBsRmQzQjZaVlo2ZEhWWldWaERTVzVxV25FeGMzUXJUV3MxTWtOV1RsRkZjbUk0WTFScGRHUkdPRk16YWtKRk9XdFRjVXB0TlVjeFIwRmFTR2RsYm14cFVtTjNiRmhwYmpST2NGUXlhM0JuUVhsQ1MxRnZUM1EwWlZsdmNYcEZTRVJsU25sRFNIZFRUREJ6VTBsT1ZFb3lhRXRKWlc1NmVWbFlNakZKTTBwWE4wTmxSMFJvT1c5bVpWVnhObHBWU0ZSNlJGcEljVUY1VVZBeFQzY3ZRMWxZUzFKcGJERjVRMGd5YVhKaWJsZFJlbGR0ZUZkR2R6VnJVMEpEY0djclMxWTBVVGxqYkhWaVQwRkRNbmR0UW5kNVduQmtTMWR1TkVaUGVtbEtjM1JzVG1scmQyRkZWMVZETDJKb1FuZFRTM05XWTNkclFsQTVkRVpETkVWNlEwSnVXbTR2VW5scVkzRXlWWEJDY3k5U1EwVm9ZMDFwY0dOWlNrWTBTbmhsYjAxWVRVeG9UMU55ZVVFME0wWjZNSFJJVW1oVk5EWkxTVFphTmtvNFpWTkNiMlJHUTI0d05VODNia2xXVEN0V1VUbDNWMkZJTkRWRFRUWklNek5HSzNnNWVqZHNUVFUzVnpKcFpXTkhiMEpHTmtabFJrcDRaUzl1ZFhvemJWWTBabE5zWW5jMWMwUk9jMU56UTBScVZWaHdOVVp1WWpNMWN6QlVkakJvWmpaWGNsQlJTbWM0VDJ4NlRqTnhWMmRRUVdwU2FHc3dTVWxUSzJ0M1QwSTBWMDlVYm5kcFpreHJNVWRXTjNjeVVrZDNTbTFUY1RSdGRXMHdjMkp0ZUZseGFWVjBlVWRuWmtoRFQyVTNZWEJ4YjJKck9HZHhSR2RYTUZWTldVaEhkRFJ0VTNsTGIyOHlZazlOYkhCWFZIRmhRMWxsYTB3MVlrVnpOamwzVFhOdVJHaExjSGhaSzBGM1EyUkJXRXMxYldkdFZGbG1kMk5GWVhCalJYaGpUSEo0YzI5NVlXRmFXa3BEYlRKRlJFMXJRbE53UTBsblkwNTViVXhWYlhOd1lrVnBWVlJ1YlRoVVVGcFhNWEJqUzJkb05YUkpjbTkzV2xsM1IyVkhNRVpRWmxKU1JUSkJRVFJZT0hrMU4xaFdiM0Y2YlZJMFRqSnphSEkyVEdkMVJXcExUbTlMVWl0SGIyMWxlV1pwY1d4M2NFUk5Oa2d6TTJ4dVpuaGhXSFZ3TWxGek5WbDBNRGM1VnpocVFURnNkM0pJVWtkTmEyVkhTR0ZyYjJkRFNUaFhPWE5hUVVob01YVnNURWhhTWtOYVJWaFJWVGQyV1hKdlYwSlpaRVphWWpaU1ltdHZVV1ZQZGtKMFIxY3hRbHByZDA5SFUzbHlaMmxpYUZJMVZEQnFWMHg2YkhOMVIwRlFTRlZ6Y0ZvNVIwSmljQ3MyVEZGaFdWbFJVREJXUVVsak0wRlZOME5QYmk5ek5WQjRaRXBKUTBOdGVrRTBka1ZJVTFKYU5WUkJOVXB2Uldwa2RHRllhRWgzWlVoNWFFUmpNR1ZWZGtGcmVFWnhTMWhEUTJWMFFrNU5XRU5KYlcxWFFqUlRVMFI0YlROallYaEpURWs0WjNkUFExbG5TWGh1YlV4TGVUVXlNRUl4YkRZMlFqVjJVbmhQUlhoQk9HdFpaak5wUW05UU1IWnBlbFY0TWtWeWJIZG1SbEJWZGtremNHNWxPVGsyYTBOclNHZGlTSFExY1N0MU5tMVJURzVYTTFWa2NHOXBSRkUwYkhCUGVFOUllbUZXTUVkMWEwRjZXSEZXTjJOR0wyOXZia0VyTHpoNFpqbEVkRTlLVEd4emQwMXpObVJMT0hSRmREazVkV2x2VEdwTVZtNHZjVkpKYW5sTGJEaG1iR05YWlRGQlIxVllRalJoTjJFeGFqbGhZWEJKTW5weVNIZFRiRGhpUWl0UlpXcFVRMWx3Vm1aMlEwZFJRVUZCUVVKS1VsVTFSWEpyU21kblp6MDlQQzlpWVhKamIyUmxQZzBLSUNBZ0lDQWdQR0psY21WamFIUnBaM1Z1WjNORVlYUmxQakl3TVRNdE1URXRNVE5VTURVNk5UTTZNakVyTURFd01Ed3ZZbVZ5WldOb2RHbG5kVzVuYzBSaGRHVStEUW9nSUNBZ0lDQThaM1ZsYkhScFoydGxhWFJ6UW1WbmFXNXVQakl3TVRNdE1URXRNVE5VTURVNk5UTTZNakFyTURFd01Ed3ZaM1ZsYkhScFoydGxhWFJ6UW1WbmFXNXVQZzBLSUNBZ0lDQWdQR2QxWld4MGFXZHJaV2wwYzBWdVpHVStNakF4TXkweE1TMHhNMVF3TmpvMU16b3lNQ3N3TVRBd1BDOW5kV1ZzZEdsbmEyVnBkSE5GYm1SbFBnMEtJQ0FnSUNBZ1BHWnZjbTFoZEhSbFpGQnlaV2x6UGpJc01qQWdSVlZTUEM5bWIzSnRZWFIwWldSUWNtVnBjejROQ2lBZ0lDQWdJRHgzWVdWb2NuVnVaejR1UEM5M1lXVm9jblZ1Wno0TkNpQWdJQ0FnSUR4cmIyNTBjbTlzYkdWMWNuTkRiMlJsUGtWT01TMHhNQzB4TXpFeE1EVTFNend2YTI5dWRISnZiR3hsZFhKelEyOWtaVDROQ2lBZ0lDQWdJRHhyYjI1MGNtOXNiRzFsWkdsMWJUNVFLaW96TVRJek1USXpPSFk4TDJ0dmJuUnliMnhzYldWa2FYVnRQZzBLSUNBZ0lDQWdQSFJoWjJWelEyOWtaVDVOYjNScGRqd3ZkR0ZuWlhORGIyUmxQZzBLSUNBZ0lDQWdQSFJwWTJ0bGRFbEVQakkzTkRrME5qY3dORFE0TURFeU5Ud3ZkR2xqYTJWMFNVUStEUW9nSUNBZ0lDQThjMmxuYm1GMGRYSmxQaTB0VkVWVFZDMHRWRWxEUzBWVUxTMDhMM05wWjI1aGRIVnlaVDROQ2lBZ0lDQThMMkpsY21WamFIUnBaM1Z1Wno0TkNpQWdQQzlpWlhKbFkyaDBhV2QxYm1kbGJqNE5Dand2ZEdsamEyVjBSWEozWlhKaWMxQnliM3BsYzNOU1pYTndiMjV6WlQ0TkNnMEs="
            }
        }
    }
]









-- 
Parking Garages
--
# General Description
List parking garages in a specific area with basic information.

# Query Parameters 
Define area of interest as circle or box.
 
## circle
`lat={lat}&lng={lng}&radius={r}`

## box
`left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng}`

# Response 
List of parking garages with basic information within the defined area of interest and a URI to request more details.
The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
actions | Array | List of available actions on this resource (book, cancel, etc.)
id | Number | Internal parking garage identification number
description | String | Approximate location
type | String | (="ParkingGarage")
uri | URI | URI to request more details
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  } 
provider | String | Parking service provider (usually equals operator)
operator | String | Parking space operator (usually equals provider)
totalnumber | Object | Number of lots for different categories { "handicappedOnly":Int, "womenOnly":Int, "others":Int }
lottype | Enum | Type of garage {"Parkhaus", "Parkzone", "Tiefgarage", "Parkplatz"} 

Parts of the data structure might be omitted if the information is not available.



GET /api/V0/Resources/Parking/Garages
> Accept: application/json
< 200
< Content-Type: application/json
[  
    {
        "actions": [],
        "id": 8320,
        "description": "Mitte, Friedrichstadt Passagen",
        "type": "ParkingGarage",
        "uri": "Resources/Parking/Garages/8320",
        "location": {
            "latitude": 52.51381000000001,
            "longitude": 13.390620000000002,
            "system": "WGS_84"
        },
        "provider": "Parkinglot",
        "operator": "Parkinglot",
        "totalnumber": {
            "others": 1150,
            "handicappedOnly": 12,
            "womenOnly": 6
        },
        "lottype": "Parkhaus"
    },
    {
        "actions": [],
        "id": 8367,
        "description": "Mitte, Hotel Adlon",
        "type": "ParkingGarage",
        "uri": "Resources/Parking/Garages/8367",
        "location": {
            "latitude": 52.515130000000006,
            "longitude": 13.379420000000001,
            "system": "WGS_84"
        },
        "provider": "Parkinglot",
        "operator": "Parkinglot",
        "totalnumber": {
            "others": 173,
            "handicappedOnly": 2,
            "womenOnly": 0
        },
        "lottype": "Tiefgarage"
    }
]

# General Description
Show details for a specific parking garage.

# Query Parameters 

- currently none

# Response 
Details of a specific parking garages, identified by `{id}` as retrieved through `GET /api/V0/Resources/Parking/Garages`.
The data structure of the response contains the attributes with the basic information and additionally the following attributes:

attribute | json data type | comments
--- | --- | ---
... | ... | ...
address | Object | Address {"citycode": String, "city": String, "street": String, "houseno": String }
pricing | String | Price structure 
payment | Array | Payment options {COINPAY, BANKNOTEPAY, BANKCARDPAY, CREDICARDPAY, PREPAIDCARDPAY, PAYCARDPAY, DEBITPAY}
category | Enum | P - parking, P+R park and ride, etc. { "P+R","B+R", "P", ... } 
openingHours | String | Opening hours
bookable | Boolean |  
heightLimit | Object | Height limit { "value": Number, "unit": String } 
occupancyRate | Number | Occupany rate in percent (real time data) 
allowedStay | Object | Allowed stay { "value": Number, "unit": String } 
generalInformations | String |
restrictions | Array | Usage restrictions {"VisitorsOnly","GuestsOnly"}
services | Array | Special services { "WomenParking", "DisabledParking", "Monitored", "ChargingStation", "ParentChild", "MotorCycle", ... } 
securityComment | String |  Securtiy features
entrance | String |


GET /api/V0/Resources/Parking/Garages/{id}
< 200
< Content-Type: application/json
{
    "actions": [],
    "id": 8367,
    "description": "Mitte, Hotel Adlon",
    "type": "ParkingGarage",
    "uri": "Resources/Parking/Garages/8367/",
    "location": {
        "latitude": 52.515130000000006,
        "longitude": 13.379420000000001,
        "system": "WGS_84"
    },
    "provider": "Parkinglot",
    "operator": "Parkinglot",
    "totalnumber": {
        "others": 173,
        "handicappedOnly": 2,
        "womenOnly": 0
    },
    "lottype": "Tiefgarage",
    "address": {
        "citycode": "10117",
        "city": "Berlin",
        "street": "Behrenstr.",
        "houseno": "1",
        "district": "Mitte",
        "region": null,
        "country": null
    },
    "pricing": "EUR 2.00 je angefangene halbe Stunde <br> maximale Tagesgebühr: EUR 32,00",
    "payment": [
        "BANKNOTEPAY",
        "COINPAY"
    ],
    "category": [
        "P"
    ],
    "openingHours": null,
    "bookable": false,
    "heightLimit": null,
    "occupancyRate": 0,
    "allowedStay": null,
    "generalInformations": null,
    "restrictions": null,
    "services": null,
    "securityComment": "Videoüberwachung<br>Notrufsäulen",
    "entrance": null
}




-- 
Public Transportation 
--

# General Description
List stations (U-Bahn/S-Bahn/train/bus/tram) in a specific area with basic information.

# Query Parameters
Define area of interest as circle or box.

## circle
`lat={lat}&lng={lng}&radius={r}`

## box
`left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng}`

# Response 
List of public transport stations with basic information and a URI to get more details.

attribute | json data type | comments
--- | --- | ---
description | String | Approximate location
type | String | (="PublicTransportStation")
uri | URI | URI to request more details
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider | String | Bus/tram (="VBBStation"), metro (="VBBStationU"), S-Bahn (="VBBStationS")
operator | String | Bus/tram (="VBBStation"), metro (="VBBStationU"), S-Bahn (="VBBStationS")


GET /api/V0/Resources/PublicTransport/Stations
> Accept: application/json
< 200
< Content-Type: application/json
[
    {
        "actions": [],
        "id": 958,
        "description": "Berlin, Jüdisches Museum",
        "type": "PublicTransportStation",
        "uri": "Resources/PublicTransport/Stations/958",
        "location": {
            "latitude": 52.503543,
            "longitude": 13.395639,
            "system": "WGS_84"
        },
        "provider": "VBBStation",
        "operator": "VBBStation"
    },
    {
        "actions": [],
        "id": 960,
        "description": "S Hackescher Markt",
        "type": "PublicTransportStation",
        "uri": "Resources/PublicTransport/Stations/960",
        "location": {
            "latitude": 52.523070000000004,
            "longitude": 13.402730000000002,
            "system": "WGS_84"
        },
        "provider": "VBBStationS",
        "operator": "VBBStationS"
    }
] 


# General Description
List Bus/Tram stations in a specific area with basic information.

# Query Parameters
Define area of interest as circle or box.

## circle
`lat={lat}&lng={lng}&radius={r}`

## box
`left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng}`

# Response 
List of public transport Bus/Tram stations with basic information and a URI to get more details.

attribute | json data type | comments
--- | --- | ---
description | String | Approximate location
type | String | (="PublicTransportBusStation")
uri | URI | URI to request more details
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider | String | (="VBBStation")
operator | String | (="VBBStation")


GET /api/V0/Resources/PublicTransport/BusStations
> Accept: application/json
< 200
< Content-Type: application/json
[
    {
        "actions": [],
        "id": 958,
        "description": "Berlin, Jüdisches Museum",
        "type": "PublicTransportBusStation",
        "uri": "Resources/PublicTransport/BusStations/958",
        "location": {
            "latitude": 52.503543,
            "longitude": 13.395639,
            "system": "WGS_84"
        },
        "provider": "VBBStation",
        "operator": "VBBStation"
    }
] 


# General Description
List Metro stations in a specific area with basic information.

# Query Parameters
Define area of interest as circle or box.

## circle
`lat={lat}&lng={lng}&radius={r}`

## box
`left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng}`

# Response 
List of public transport Metro stations with basic information and a URI to get more details.

attribute | json data type | comments
--- | --- | ---
description | String | Approximate location
type | String | (="PublicTransportMetroStation")
uri | URI | URI to request more details
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider | String | (="VBBStationU")
operator | String | (="VBBStationU")


GET /api/V0/Resources/PublicTransport/MetroStations
> Accept: application/json
< 200
< Content-Type: application/json
[
    {
        "actions": [],
        "id": 954,
        "description": "U Prinzenstr.",
        "type": "PublicTransportMetroStation",
        "uri": "Resources/PublicTransport/MetroStations/954",
        "location": {
            "latitude": 52.498270000000005,
            "longitude": 13.406530000000002,
            "system": "WGS_84"
        },
        "provider": "VBBStationU",
        "operator": "VBBStationU"
    }
] 


# General Description
List City-Train/Regio stations in a specific area with basic information.

# Query Parameters
Define area of interest as circle or box.

## circle
`lat={lat}&lng={lng}&radius={r}`

## box
`left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng}`

# Response 
List of public transport City-Train/Regio stations with basic information and a URI to get more details.

attribute | json data type | comments
--- | --- | ---
description | String | Approximate location
type | String | (="PublicTransportCityTrainStation")
uri | URI | URI to request more details
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider | String | (="VBBStationS")
operator | String | (="VBBStationS")


GET /api/V0/Resources/PublicTransport/CityTrainStations
> Accept: application/json
< 200
< Content-Type: application/json
[
    {
        "actions": [],
        "id": 960,
        "description": "S Hackescher Markt",
        "type": "PublicTransportCityTrainStation",
        "uri": "Resources/PublicTransport/CityTrainStations/960",
        "location": {
            "latitude": 52.523070000000004,
            "longitude": 13.402730000000002,
            "system": "WGS_84"
        },
        "provider": "VBBStationS",
        "operator": "VBBStationS"
    }
] 


# General Description
Get WMS in PNG format with public transport stations.

# Query Parameters
Define area of interest as a box.

## box
`left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng}`

## optional parameters

### width
- `width={w}`: width of map output in pixels (semantics according to WMS GetMap request)
- the default value is 250

### height 
- `height={h}`: height of map output in pixels (semantics according to WMS GetMap request)
- the default value is 250

# Response
A PNG image which shows public transport stations.

Note: The accept-header of this request must be set to `image/png`.

GET /api/V0/Resources/PublicTransport
> accept: image/png
< 200
< Content-Type: image/png
{ "... this should be a PNG ... "
}


# General Description
Get arrival and departure times at specified specified station.

# Query Parameters

- currently none

# Response 

Arrival and/or departure times for a station specified by `{stationId}`.

attribute | json data type | comments
--- | --- | ---
id | Number | Internal public transport station identification number
... | ... | ...
arrivals | String | Arrivals info containing direction, line and arrival times
departures | String | Departures info containing direction, line and departure times


Please note: expectedTime is not always available.

GET /api/V0/Resources/PublicTransport/Stations/{stationId}/TimeTables
< 200
< Content-Type: application/json
[
    {
        "actions": [],
        "id": 80330,
        "description": "U Prinzenstr. (Berlin)",
        "type": "PublicTransportStation",
        "uri": "Resources/PublicTransport/Stations/80330/TimeTables",
        "location": {
            "latitude": 52.498274,
            "longitude": 13.406531,
            "system": "WGS_84"
        },
        "provider": "VBBStation",
        "operator": "VBBStation",
        "arrivals": [],
        "departures": [
            {
                "direction": "S+U Warschauer Str. (Berlin)",
                "line": "U1",
                "aimedTime": "2014-01-29T12:08:00+0100",
                "expectedTime": null
            },
            {
                "direction": "U Uhlandstr. (Berlin)",
                "line": "U1",
                "aimedTime": "2014-01-29T12:09:00+0100",
                "expectedTime": null
            }
  ]




-- 
Bike Sharing 
--

# General Description
Get list of bike sharing stations (for station-based bike sharing).

# Query Parameters
Define area of interest as circle or box.

## circle
`lat={lat}&lng={lng}&radius={r}`

## box
`left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng}`

# Response
List of bike sharing stations with basic information within the defined area of interest and a URI to request more details.
The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
actions | Array | Available actions
id | Number | Internal bike sharing station identification number
description | String | Approximate location
type | String | Type of bike sharing station
uri | URI | URI to request more details.
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider | String | service provider
operator | String | resource operator
phoneNo | String | 
operatorURI | String |
operatorName | String | 
address | Object | 
numberOfBikes | Number | 
numberOfFreeBikes | Number | 
services | Array | 


GET /api/V0/Resources/BikeSharing/Stations
< 200
< Content-Type: application/json
[
    {
        "actions": [],
        "id": 8281,
        "description": "Zeughaus / Deutsches Historisches Museum",
        "type": "BikeSharingStation",
        "uri": "Resources/BikeSharing/Stations/8281",
        "location": {
            "latitude": 52.518394470214844,
            "longitude": 13.395764350891113,
            "system": "WGS_84"
        },
        "provider": "CallABike",
        "operator": "CallABike",
        "phoneNo": null,
        "operatorURI": null,
        "operatorName": "CallABike",
        "address": null,
        "numberOfBikes": 30,
        "numberOfFreeBikes": 11,
        "services": null
    },
    {
        "actions": [],
        "id": 8294,
        "description": "Jägerstraße / Friedrichstraße",
        "type": "BikeSharingStation",
        "uri": "Resources/BikeSharing/Stations/8294",
        "location": {
            "latitude": 52.51383590698242,
            "longitude": 13.389104843139648,
            "system": "WGS_84"
        },
        "provider": "CallABike",
        "operator": "CallABike",
        "phoneNo": null,
        "operatorURI": null,
        "operatorName": "CallABike",
        "address": null,
        "numberOfBikes": 19,
        "numberOfFreeBikes": 6,
        "services": null
    }
]

# General Description
Book a bike available at a bike sharing station

# Request Path Parameters

- `stationId={String}, Bike sharing station id where the bike is to be booked`

# Request Body
The data structure of the request contains the following attributes:

attribute | json data type | comments
--- | --- | ---
operator | String | Name of the operator
from | DateTime | Optional. Default value is current time
to | DateTime | Optional

# Response
A booking confirmation for the bike. The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
confirmationId | String | 
comments | String | 

POST /api/V0/Resources/BikeSharing/Stations/{stationId}/Process?action=book
> Content-Type: application/json
> Accept: application/json
{ 
    "operator": "nextbike",
    "from": null,
    "to": null,
    "userId": "4711/10" 
}
< 201
< Content-Type: application/json
{  
    "confirmationId": "1012020020",
    "comments": "Comments"
}


-- 
Car Sharing 
--

# General Description
Get list of available cars (free-floating and station-based) in a specific area.

# Query Parameters
Define area of interest as circle or box.

## circle
`lat={lat}&lng={lng}&radius={r}`

## box
`left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng}`

## optional parameter
- `f_cars={"fuelType":"ELECTRICITY"}` can be used to filter electric vehicles ("ELECTRICITY") or petrol cars ("PETROL")


# Response
A list of available car sharing locations, both free-floating and/or station-based specified by the query parameters, 
with basic information and a URI to acquire more details.
In case of station-based cars, only the URI of the Car Sharing station is returned; 
in case of free-floating cars, the URI to the car itself.
The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
actions | Array | 
id | Number | 
description | String | License ID or approximate location
type | String | 
uri | URI | URI
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider | String | 
operator | String | 

GET /api/V0/Resources/CarSharing/All
< 200
< Content-Type: application/json
[    
    {
        "actions": [
                    {"name": "book",
                     "method": "POST",
                     "uri": "Resources/CarSharing/Cars/12196/Process?action=book"
                    }
                    ],
        "id": 12196,
        "description": "B-GO2104",
        "type": "Cars",
        "uri": "Resources/CarSharing/Cars/12196",
        "location": {
            "latitude": 52.51342,
            "longitude": 13.39476,
            "system": "WGS_84"
        },
        "provider": "Car2Go_Berlin",
        "operator": "Car2Go_Berlin"
    },
    {
        "actions": [
            {
                "name": "book",
                "method": "POST",
                "uri": "Resources/CarSharing/Stations/8150/Process?action=book"
            }
        ],
        "id": 8150,
        "description": "Handwerkervereinshaus / Sophienstraße",
        "type": "Stations",
        "uri": "Resources/CarSharing/Stations/8150",
        "location": {
            "latitude": 52.52561167074207,
            "longitude": 13.401126265525818,
            "system": "WGS_84"
        },
        "provider": "FlinksterDB",
        "operator": "FlinksterDB"
    }
]



# General Description
Get list of available free-floating cars in a specific area (NOTE: for free-floating car sharing only!).

# Query Parameters
Define area of interest as circle or box.

## circle
`lat={lat}&lng={lng}&radius={r}`

## box
`left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng}`

## optional parameter
- `f_cars={"fuelType":"ELECTRICITY"}` can be used to filter electric vehicles ("ELECTRICITY") or petrol cars ("PETROL")

# Response
A list of available free-floating cars specified by the query parameters, 
with basic information and an URI to acquire more details.

attribute | json data type | comments
--- | --- | ---
actions | Array | Available actions (e.g. book)
id | Number | Internal free-floating car identification number
description | String | 
type | String | (=Cars)
uri | URI | URI to request more details
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider | String | Car sharing provider (usually equals operator)
operator | String | Car sharing operator (usually equals provider)
address | String | Street, city, etc.
licenseId | String | License ID
category | String | ENUM{"Fullsize", "Compact", "Smallsize", ... }
fuelType | String | electric vehicle ("ELECTRICITY") or petrol car ("PETROL")
imageLink | Link | link to the car image

GET /api/V0/Resources/CarSharing/Cars
< 200
< Content-Type: application/json
[
     {
        "actions": [
            {
                "name": "book",
                "method": "POST",
                "uri": "Resources/CarSharing/Cars/39117/Process?action=book"
            }
        ],
        "id": 39117,
        "description": "B-GO2424",
        "type": "CarSharingCar",
        "uri": "Resources/CarSharing/Cars/39117",
        "location": {
            "latitude": 52.51061,
            "longitude": 13.37339,
            "system": "WGS_84"
        },
        "provider": "Car2Go_Berlin",
        "operator": "Car2Go_Berlin",
        "address": {
            "citycode": null,
            "city": null,
            "street": "Bellevuestraße 3, 10785 Berlin",
            "houseno": null,
            "district": null,
            "region": null,
            "country": null
        },
        "licenseId": "B-GO2424",
        "category": null,
        "fuelType": "PETROL",
        "imageLink": null
    },
    {
        "actions": [
            {
                "name": "book",
                "method": "POST",
                "uri": "Resources/CarSharing/Cars/39230/Process?action=book"
            }
        ],
        "id": 39230,
        "description": "B-GO4013",
        "type": "CarSharingCar",
        "uri": "Resources/CarSharing/Cars/39230",
        "location": {
            "latitude": 52.5074,
            "longitude": 13.37516,
            "system": "WGS_84"
        },
        "provider": "Car2Go_Berlin",
        "operator": "Car2Go_Berlin",
        "address": {
            "citycode": null,
            "city": null,
            "street": "Linkstraße 4, 10785 Berlin",
            "houseno": null,
            "district": null,
            "region": null,
            "country": null
        },
        "licenseId": "B-GO4013",
        "category": null,
        "fuelType": "ELECTRICITY",
        "imageLink": null
    }
]


# General Description
Get details about a specific free-floating car.

# Query Parameters
currently none  

# Response
Details about a specific free-floating car determined by `{carId}` as retrieved through GET /api/V0/Resources/CarSharing/Cars.
The data structure of the response contains the attributes with the basic information and additionally the following attributes:

attribute | json data type | comments
--- | --- | ---
... | ... | ...
model | String | car model
name | String | car name
power | String | 
seatCount | Number | number of sits
doorCount | Number | number of doors
colour | String  | car colour
properties | Array | List of properties: "ABS" etc.
locationNote | String | 
operatorURI | URI | operator URI
fee | String | car costs per time unit

GET /api/V0/Resources/CarSharing/Cars/{carId}
< 200
< Content-Type: application/json
{
    "actions": [
        {
            "name": "book",
            "method": "POST",
            "uri": "Resources/CarSharing/Cars/39117/Process?action=book"
        }
    ],
    "id": 39117,
    "description": "B-GO2424",
    "type": "CarSharingStationCarDetails",
    "uri": "Resources/CarSharing/Cars/39117/",
    "location": {
        "latitude": 52.51061,
        "longitude": 13.37339,
        "system": "WGS_84"
    },
    "provider": "Car2Go_Berlin",
    "operator": "Car2Go_Berlin",
    "address": {
        "citycode": null,
        "city": null,
        "street": "Bellevuestraße 3, 10785 Berlin",
        "houseno": null,
        "district": null,
        "region": null,
        "country": null
    },
    "licenseId": "B-GO2424",
    "category": null,
    "fuelType": "PETROL",
    "imageLink": null,
    "model": null,
    "name": null,
    "power": null,
    "seatCount": null,
    "doorCount": null,
    "colour": null,
    "properties": [],
    "locationNote": null,
    "operatorURI": null,
    "fee": null
}


# General Description
Get list of car sharing stations (for station-based car sharing).

# Query Parameters 
Define area of interest as circle or box.

## circle
`lat={lat}&lng={lng}&radius={r}`

## box
`left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng}`

## optional parameter
- `operatorId={id}`
- `f_cars={"fuelType":"ELECTRICITY"}` can be used to filter ecars ("ELECTRICITY") or petrol cars ("PETROL")


Examples: category of required car (e.g., FullSize), pickup/return station

# Response 
All car sharing stations specified by the query parameters, together with basic information and URI to acquire more details.
All car sharing stations specified by the query parameters, together with basic information and URI to acquire more details.
The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
actions | Array | 
id | Number | 
description | String | Approximate location
type | String | 
uri | URI | URI to request more details
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider | String | 
operator | String | 
operatorURI | String | 
operatorName | String | 
address | Object | Street, city, etc.


GET /api/V0/Resources/CarSharing/Stations
< 200
< Content-Type: application/json
[
    {
        "actions": [
            {
                "name": "book",
                "method": "POST",
                "uri": "Resources/CarSharing/Stations/1627/Process?action=book"
            }
        ],
        "id": 1627,
        "description": "Christinenstraße",
        "type": null,
        "uri": "Resources/CarSharing/Stations/1627",
        "location": {
            "latitude": 52.531388124911125,
            "longitude": 13.409093767404556,
            "system": "WGS_84"
        },
        "provider": "FlinksterDB",
        "operator": "FlinksterDB",
        "phoneNo": null,
        "operatorURI": null,
        "operatorName": "FlinksterDB",
        "address": {
            "citycode": "10119",
            "city": "Berlin",
            "street": "Christinenstraße",
            "houseno": "13",
            "district": "Prenzlauer Berg",
            "region": null,
            "country": null
        }
    },
    {
        "actions": [
            {
                "name": "book",
                "method": "POST",
                "uri": "Resources/CarSharing/Stations/1634/Process?action=book"
            }
        ],
        "id": 1634,
        "description": "Friedrichstr.",
        "type": null,
        "uri": "Resources/CarSharing/Stations/1634",
        "location": {
            "latitude": 52.5083274841,
            "longitude": 13.3902387619,
            "system": "WGS_84"
        },
        "provider": "FlinksterDB",
        "operator": "FlinksterDB",
        "phoneNo": null,
        "operatorURI": null,
        "operatorName": "FlinksterDB",
        "address": {
            "citycode": "10117",
            "city": "Berlin",
            "street": "Friedrichstr.",
            "houseno": "50-55",
            "district": null,
            "region": null,
            "country": null
        }
    }
]


# General Description
Get details about a specific car sharing station.

# Query Parameters

- currently none

# Response
Details about a car sharing station determined by `{stationId}`. The data structure of the response contains the attributes with the basic information and additionally the following attributes:

attribute | json data type | comments
--- | --- | ---
actions | Array of objects | [ { "name": String, "method": String, "uri": String } ]
id | String |
description | String | Approximate location
type | String |
uri | String | 
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider | String |
operator | String | 
phoneNo | String | 
operatorURI | String | 
operatorName | String | 
address | Object | {"cityCode": String, "city": String, "street": String, "houseNo": String, "district": String, "region": String, "country": String}
notes | String | 
services | Array | 
availableCars | Number | 


GET /api/V0/Resources/CarSharing/Stations/{stationId}
< 200
< Content-Type: application/json
{
    "actions": [
        {
            "name": "book",
            "method": "POST",
            "uri": "Resources/CarSharing/Stations/1634/Process?action=book"
        }
    ],
    "id": 1634,
    "description": "Friedrichstr.",
    "type": null,
    "uri": "Resources/CarSharing/Stations/1634/",
    "location": {
        "latitude": 52.5083274841,
        "longitude": 13.3902387619,
        "system": "WGS_84"
    },
    "provider": "FlinksterDB",
    "operator": "FlinksterDB",
    "phoneNo": null,
    "operatorURI": null,
    "operatorName": "FlinksterDB",
    "address": {
        "citycode": "10117",
        "city": "Berlin",
        "street": "Friedrichstr.",
        "houseno": "50-55",
        "district": null,
        "region": null,
        "country": null
    },
    "notes": [
        "Öffnungszeiten:\nMo-Fr: 7.00 - 19.00\nSa: 9.00 - 14.00\nSo: 9.00 - 13.00 "
    ],
    "services": null,
    "availableCars": 7
}


# General Description
Get list of available cars at a specific car sharing station.

# Query Parameters
Optional time interval in the future:

- `from={datetime1}`
- `to={datetime2}`  

# Response
A list of available cars at a specific car sharing station determined by `{stationId}`.
The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
actions | Array of objects | [ { "name": String, "method": String, "uri": String } ]
id | String |
description | String | 
type | String | 
url | String | 
address | Object | {"cityCode": String, "city": String, "street": String, "houseNo": String}
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
licenceId | String | 
category | String |
provider | String |

GET /api/V0/Resources/CarSharing/Stations/{stationId}/Cars
< 200
< Content-Type: application/json
[
    {
        "actions": [],
        "id": 1700,
        "description": "Friedrichstr.",
        "type": "CarSharingStationCar",
        "uri": "Resources/CarSharing/Stations/1634/Cars/1700",
        "location": {
            "latitude": 52.5083274841,
            "longitude": 13.3902387619,
            "system": "WGS_84"
        },
        "provider": "FlinksterDB",
        "operator": "FlinksterDB",
        "address": {
            "citycode": "10117",
            "city": "Berlin",
            "street": "Friedrichstr.",
            "houseno": "50-55",
            "district": null,
            "region": null,
            "country": null
        },
        "licenseId": null,
        "category": null,
        "fuelType": "UNKNOWN",
        "imageLink": null
    },
    {
        "actions": [],
        "id": 1701,
        "description": "Friedrichstr.",
        "type": "CarSharingStationCar",
        "uri": "Resources/CarSharing/Stations/1634/Cars/1701",
        "location": {
            "latitude": 52.5083274841,
            "longitude": 13.3902387619,
            "system": "WGS_84"
        },
        "provider": "FlinksterDB",
        "operator": "FlinksterDB",
        "address": {
            "citycode": "10117",
            "city": "Berlin",
            "street": "Friedrichstr.",
            "houseno": "50-55",
            "district": null,
            "region": null,
            "country": null
        },
        "licenseId": null,
        "category": null,
        "fuelType": "UNKNOWN",
        "imageLink": null
    }    
]


# General Description
Book a car offered as a free-floating car.

# Request Path Parameters

- `carId={String}, Resource Id of the car being booked`

# Request Body
The data structure of the request contains the following attributes:

attribute | json data type | comments
--- | --- | ---
operator | String | Name of the operator
from | DateTime | Optional. Default value is current time
to | DateTime | Optional 

# Response
A booking confirmation for the car. The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
confirmationId | String | 
comments | String | 

POST /api/V0/Resources/CarSharing/Cars/{carId}/Process?action=book
> Accept: application/json
> Content-Type: application/json
{ 
    "operator": "flinkster",
    "from": "",
    "to": "",
    "userId": "4711/10" 
}
< 201
< Location: /api/V0/Process/4711
< Content-Type: application/json
{  
    "confirmationId": "1012020020",
    "comments": "Comments"
}    

# General Description
Book a specific car available at a car sharing station by specifying the car id.

# Request Path Parameters

- `stationId={String}, Car sharing station id where the car is located`
- `carId={String}, Resource Id of the car being booked`

# Request Body
The data structure of the request contains the following attributes:

attribute | json data type | comments
--- | --- | ---
operator | String | Name of the operator
from | DateTime | Optional. Default value is current time
to | DateTime | Optional 

# Response
A booking confirmation for the car. The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
confirmationId | String | 
comments | String | 

POST /api/V0/Resources/CarSharing/Stations/{stationId}/Cars/{carId}/Process?action=book
> Content-Type: application/json
> Accept: application/json
{ 
    "operator": "car2go_berlin",
    "from": null,
    "to": null,
    "userId": "4711/10" 
}
< 201
< Content-Type: application/json
{  
    "confirmationId": "1012020020",
    "comments": "Comments"
}  
  

# General Description
Book any car available at a car sharing station by specifying the car type.

# Request Path Parameters

- `stationId={String}, Car sharing station id where the car is located`

# Request Body
The data structure of the request contains the following attributes:

attribute | json data type | comments
--- | --- | ---
operator | String | Name of the operator
from | DateTime | Optional. Default value is current time
to | DateTime | Optional
type | Enum value | Allowed values: TBD

# Response
A booking confirmation for the car. The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
confirmationId | String | 
comments | String | 

POST /api/V0/Resources/CarSharing/Stations/{stationId}/Process?action=book
> Content-Type: application/json
> Accept: application/json
{ 
    "operator": "car2go_berlin",
    "from": null,
    "to": null,
    "userId": "4711/10" 
}
< 201
< Content-Type: application/json
{  
    "confirmationId": "1012020020",
    "comments": "Comments"
}




-- 
EV Charging Station 
--

# General Description
Get list of EV Charging Stations.

# Query Parameters 
Define area of interest as circle or box.

## circle
`lat={lat}&lng={lng}&radius={r}`

## box
`left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng}`

# Response
List of all electric vehicle (EV) charging stations specified by query parameters (and body), 
together with geo location, name, and a URI to acquire more details.

attribute | json data type | comments
--- | --- | ---
actions | Array | List of available actions on this resource
id | Number | Internal charging station identification numberg
description | String | Approximate location or parking garage operator
type | String | ="EVChargingStation" 
uri | URI | URI to request more details
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider |  String| Charging station operator (usually equals provider)
operator | String | Charging station provider (usually equals operator)
address | Object | 
 

GET /api/V0/Resources/EVCharging/Stations
< 200
< Content-Type: application/json
[
    {
        "actions": [],
        "id": 81635,
        "description": "Conti",
        "type": "EVChargingStation",
        "uri": "Resources/EVCharging/Stations/81635",
        "location": {
            "latitude": 52.51474,
            "longitude": 13.38639,
            "system": "WGS_84"
        },
        "provider": "Vattenfall",
        "operator": "Vattenfall",
        "address": {
            "citycode": "10117",
            "city": "Berlin",
            "street": "Glinkastr.",
            "houseno": "38",
            "district": null,
            "region": null,
            "country": null
        }
    },
    {
        "actions": [],
        "id": 85970,
        "description": "vor Mini",
        "type": "EVChargingStation",
        "uri": "Resources/EVCharging/Stations/85970",
        "location": {
            "latitude": 52.5108049,
            "longitude": 13.3897369,
            "system": "WGS_84"
        },
        "provider": "Vattenfall",
        "operator": "Vattenfall",
        "address": {
            "citycode": "10117",
            "city": "Berlin",
            "street": "Friedrichstraße",
            "houseno": "191",
            "district": null,
            "region": null,
            "country": null
        }
    }
]


# General Description
Get detail information for a specific EV Charging Station. 

# Query Parameters

- currently none

# Response
Details for the EV charging station specified by `{id}`.
The data structure of the response contains the attributes with the basic information and additionally the following attributes

attribute | json data type | comments
--- | --- | ---
... | ... | ...
chargingStationType | String |  
managedChargeable | Boolean |  
owner | String |  
plugTypes | Enum value | Type of the plug. Allowed values: 
power | Number |  
voltage | Number |  
chargingPoints |  |  
properties |  |  


GET /api/V0/Resources/EVCharging/Stations/{id}
< 200
< Content-Type: application/json
{
    "description": "vor Mini",
    "type": "EVChargingStationDetails",
    "url": "Resources/EVCharging/Stations/227/",
    "location": {
        "latitude": 52.5108049,
        "longitude": 13.3897369,
        "system": "WGS_84"
    },
    "provider": "Vattenfall",
    "operator": "Vattenfall",
    "address": {
        "citycode": "10117",
        "city": "Berlin",
        "street": "Friedrichstraße",
        "houseno": "191",
        "district": null,
        "region": null,
        "country": null
    },
    "chargingStationType": "Doppelsäule 32A",
    "managedChargeable": false,
    "owner": "Berlin",
    "plugTypes": null,
    "power": 22080,
    "voltage": 230,
    "chargingPoints": [
        "015013=!=015013_R",
        "015013=!=015013_L"
    ],
    "properties": null
}




--
Traffic Info Level-of-Service. WMS
--

# General Description
Get WMS PNG file for road traffic (Level of Service).

# Query Parameters
Define area of interest as box.

## box
`left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng}`

## optional parameters
- currently none

### width
- `width={w}`: width of map output in pixels (semantics according to WMS GetMap request).
- the default value is width=250

### height
- `height={h}`: height of map output in pixels (semantics according to WMS GetMap request).
- the default value is height=250
  
Behavior: additional parameters have to be passed to WMS server such as format=image/png.

# Response
A PNG content which dispays the current traffic situation.

Please note: The accept-header of this request must be set to "image/png".
GET /api/V0/Info/TrafficInfo
> accept: image/png
< 200
< Content-Type: image/png
{ "... this should be a PNG ..."
}


--
Multimodal Routing Planner
--

# General Description
Get multimodal trip proposals with basic information for specified trip criteria.

# Query Parameters 

- `language={lang}` : de, en (currently not supported; de is the default)

# Selection criteria 
specified in the request body as described in the sample request 

- origin: start point specified by a geo location 
  (addresses can be converted into geo locations by means of "GET /Resources/GeoLocations")
- destination: start point specified by a geo location
- either orgin or destination might specify a time
- viaPoints: list of geo locations that the route should use
- costFunction: list of cost factors (such as Distance, Duration, Price, Economy), each with a percentual weight 
- trafficTypes: list of either of Walk, Bike, Car, Taxi, Metro, CityTrain, Train, Bus, Tram, RegioTrain, Ferry, Other
- routingConstraints: list of constraints to be taken into account for various traffic types, specified by min/max values
- userId: user that requests a trip

# Response
List of trip proposals with basic information such as distance, duration and an URI for detailled information.
The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
url | URI | URI to request more details
origin | Object | start point of the proposed trip
destination | Object | endpoint of the proposed trip
trafficTypes | Array | list of traffic types used in the proposed trip  
description | String | list of either of Walk, Bike, Car, Taxi, Metro, CityTrain, Train, Bus, Tram, RegioTrain, Ferry, Other
costs | Array | list of costs for the proposed trip

POST /api/V0/TripProposals
> Content-Type: application/json
> Accept: application/json
{ 
    "origin": { 
        "location": { "longitude": 13.377683, "latitude": 52.509166, "system": "WGS84" }, 
        "time": "2014-01-29T15:10:00+0200"
        },
    "destination": { 
        "location": { "longitude": 13.384160041809082, "latitude": 52.5100212097168, "system": "WGS84" },
        "time": null
        },
    "viaPoints": [],
    "costFunctions": [],
    "trafficTypes": [ "Car", "Walk", "RegioTrain", "Tram" ],
    "routingConstraints": [],
    "userId": "4711/10" 
}
< 200
< Content-Type: application/json
[
    {
        "url": "TripProposals/86496",
        "origin": {
            "location": {
                "latitude": 52.50917053222656,
                "longitude": 13.377630233764648,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-29T14:10:32+0100"
        },
        "destination": {
            "location": {
                "latitude": 52.5100021,
                "longitude": 13.3841612,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-29T15:29:02+0100"
        },
        "trafficTypes": [
            "Car",
            "Walk"
        ],
        "description": null,
        "costs": {
            "distance": null,
            "duration": {
                "unit": "Second",
                "value": 4442
            },
            "price": null,
            "emission": null
        }
    },
    {
        "url": "TripProposals/86497",
        "origin": {
            "location": {
                "latitude": 52.50917053222656,
                "longitude": 13.377630233764648,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-29T14:10:32+0100"
        },
        "destination": {
            "location": {
                "latitude": 52.510019,
                "longitude": 13.384156,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-29T15:13:00+0100"
        },
        "trafficTypes": [
            "Car",
            "Walk",
            "RegioTrain"
        ],
        "description": null,
        "costs": {
            "distance": null,
            "duration": {
                "unit": "Second",
                "value": 2302
            },
            "price": null,
            "emission": null
        }
    }
]


# General Description
Get details about a trip proposal. 

# Query Parameters: 

- `language={lang}` : de, en (currently not supported; de is the default)

Each trip proposal consists of several segments, one segment for one transportation modality such as bike, car, train, etc. 
There is also a separate segment if the traveler shall use different lines of the same transport modality, 
for instance, first U5 from A to B and then U4 from B to C.

Each segement has an origin and a destination with corresponding timestamps when to arrive and depart.
A segment consists of a sequence of wayPoints and guidingPoints.
A wayPoint describes an intermediate geo location useful for displaying the trip proposal in a map.
A guidingPoint gives a traveler hints how to travel, e.g., whenever to change the road at a crossing. GuidingPoints are a subset of wayPoints

# Response
Details about a single trip proposal determined by {proposalId}.
The data structure of the response contains the attributes with the basic information and additionally the following attributes of a segment object:

attribute | json data type | comments
--- | --- | ---
segmentId | URI | URI to request more details
origin | Object | start point of the proposed trip
destination | Object | endpoint of the proposed trip


Please note:

The trip proposals as returned by "GET /api/V0/TripProposals" are internally stored only for a certain time; afterward they expire and details are no longer available. 
The current expiration time is 10 minutes.

GET /api/V0/TripProposals/{proposalId}
< 200
< Content-Type: application/json
{
    "url": "TripProposals/1/",
    "segments": [
        {
            "segmentId": "1",
            "description": null,
            "origin": {
                "location": {
                    "latitude": 52.50917053222656,
                    "longitude": 13.377630233764648,
                    "system": "WGS_84"
                },
                "time": "2013-06-25T15:10:35MESZ"
            },
            "destination": {
                "location": {
                    "latitude": 52.5100212097168,
                    "longitude": 13.384160041809082,
                    "system": "WGS_84"
                },
                "time": "2013-06-25T15:11:35MESZ"
            },
            "trafficType": "Car",
            "cost": {
                "distanceFromOrigin": {
                    "unit": "Meter",
                    "value": 503
                },
                "duration": {
                    "unit": "Second",
                    "value": 96
                },
                "price": null,
                "emission": null
            },
            "wayPoints": [
                {
                    "latitude": 52.50917053222656,
                    "longitude": 13.377630233764648,
                    "system": "WGS_84"
                },
                {
                    "latitude": 52.509239196777344,
                    "longitude": 13.3774995803833,
                    "system": "WGS_84"
                },
                {
                    "latitude": 52.50926971435547,
                    "longitude": 13.377470016479492,
                    "system": "WGS_84"
                },
                {
                    "latitude": 52.509498596191406,
                    "longitude": 13.377449989318848,
                    "system": "WGS_84"
                },
                {
                    "latitude": 52.509521484375,
                    "longitude": 13.377750396728516,
                    "system": "WGS_84"
                },
                {
                    "latitude": 52.50959014892578,
                    "longitude": 13.377889633178711,
                    "system": "WGS_84"
                },
                {
                    "latitude": 52.509700775146484,
                    "longitude": 13.379480361938477,
                    "system": "WGS_84"
                },
                {
                    "latitude": 52.509891510009766,
                    "longitude": 13.381830215454102,
                    "system": "WGS_84"
                },
                {
                    "latitude": 52.5100212097168,
                    "longitude": 13.384160041809082,
                    "system": "WGS_84"
                }
            ],
            "guidingPoints": [
                {
                    "description": "Losfahren in  Leipziger Platz, Mitte (Berlin)",
                    "location": {
                        "location": {
                            "latitude": 52.50917053222656,
                            "longitude": 13.377630233764648,
                            "system": "WGS_84"
                        },
                        "time": null
                    },
                    "cost": {
                        "distanceFromOrigin": {
                            "unit": "Meter",
                            "value": 0
                        },
                        "duration": {
                            "unit": "Second",
                            "value": 0
                        },
                        "price": null,
                        "emission": null
                    },
                    "operator": null,
                    "locationId": "009013103#86"
                },
                {
                    "description": "Biegen Sie rechts ab auf B1 Leipziger Platz",
                    "location": {
                        "location": {
                            "latitude": 52.509498596191406,
                            "longitude": 13.377449989318848,
                            "system": "WGS_84"
                        },
                        "time": null
                    },
                    "cost": {
                        "distanceFromOrigin": {
                            "unit": "Meter",
                            "value": 41
                        },
                        "duration": {
                            "unit": "Second",
                            "value": 12
                        },
                        "price": null,
                        "emission": null
                    },
                    "operator": null
                },
                {
                    "description": "Ankunft in  B1 Leipziger Straße - Wilhelmstraße, Mitte (Berlin)",
                    "location": {
                        "location": {
                            "latitude": 52.5100212097168,
                            "longitude": 13.384160041809082,
                            "system": "WGS_84"
                        },
                        "time": null
                    },
                    "cost": {
                        "distanceFromOrigin": {
                            "unit": "Meter",
                            "value": 503
                        },
                        "duration": {
                            "unit": "Second",
                            "value": 84
                        },
                        "price": null,
                        "emission": null
                    },
                    "operator": null
                }
            ]
        }
    ]
}


# General Description
Get trip information for specified traffic types.

# Selection criteria 
Specified in the request body as described in the sample request 

- origin: start point specified by a geo location 
  (addresses can be converted into geo locations by means of "GET /Resources/GeoLocations")
- destination: start point specified by a geo location
- either orgin or destination might specify a time
- viaPoints: list of geo locations that the route should use
- costFunction: list of cost factors (such as Distance, Duration, Price, Economy), each with a percentual weight 
- trafficTypes: list of either of Walk, Bike, Car, Taxi, Metro, CityTrain, Train, Bus, Tram, RegioTrain, Ferry, Other
- routingConstraints: list of constraints to be taken into account for various traffic types, specified by min/max values
- userId: user that requests a trip

# Response
List of trip proposals with basic information such as distance, duration and an URI for details.

POST /api/V0/TripProposals
> Content-Type: application/json
> Accept: application/json
{
  "origin": {
    "location": {
      "longitude": 13.41100700000004,
      "latitude": 52.521642,
      "system": "WGS84"
    },
    "time": "2014-01-08T12:04:02UTC+05:30"
  },
  "destination": {
    "location": {
      "longitude": 13.319420000000036,
      "latitude": 52.56347100000001,
      "system": "WGS84"
    },
    "time": null
  },
  "viaPoints": [],
  "costFunctions": [
    {
      "costType": "Price",
      "percentage": 100
    }
  ],
  "userId": "4711/10",
  "trafficTypes": [
    "Walk",
    "Bike",
    "Car",
    "Metro",
    "CityTrain",
    "Bus"
  ],
  "routingConstraints": []
}
< 200
< Content-Type: application/json
[
    {
        "url": "TripProposals/2252",
        "origin": {
            "location": {
                "latitude": 52.5218455,
                "longitude": 13.4113422,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-08T13:04:02+0100"
        },
        "destination": {
            "location": {
                "latitude": 52.56353,
                "longitude": 13.3194454,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-08T14:49:41+0100"
        },
        "trafficTypes": [
            "Walk"
        ],
        "description": null,
        "costs": {
            "distance": {
                "unit": "Meter",
                "value": 8478
            },
            "duration": {
                "unit": "Second",
                "value": 6339
            },
            "price": null,
            "emission": null
        }
    },
    {
        "url": "TripProposals/2253",
        "origin": {
            "location": {
                "latitude": 52.522107,
                "longitude": 13.41098,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-08T13:04:02+0100"
        },
        "destination": {
            "location": {
                "latitude": 52.563589,
                "longitude": 13.319065,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-08T13:36:39+0100"
        },
        "trafficTypes": [
            "Bike"
        ],
        "description": "Route for Request null",
        "costs": {
            "distance": {
                "unit": "Meter",
                "value": 9382.59817008142
            },
            "duration": {
                "unit": "Second",
                "value": 1957.896757515492
            },
            "price": null,
            "emission": null
        }
    },
    {
        "url": "TripProposals/2254",
        "origin": {
            "location": {
                "latitude": 52.52180862426758,
                "longitude": 13.411370277404785,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-08T10:59:19+0100"
        },
        "destination": {
            "location": {
                "latitude": 52.56351852416992,
                "longitude": 13.319450378417969,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-08T11:23:19+0100"
        },
        "trafficTypes": [
            "Car"
        ],
        "description": "@52.52164077758788,13.411006927490234:@52.56347274780273,13.319419860839844",
        "costs": {
            "distance": {
                "unit": "Meter",
                "value": 9837
            },
            "duration": {
                "unit": "Second",
                "value": 1446
            },
            "price": null,
            "emission": null
        }
    },
    {
        "url": "TripProposals/2255",
        "origin": {
            "location": {
                "latitude": 52.521634,
                "longitude": 13.411006,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-08T13:04:00+0100"
        },
        "destination": {
            "location": {
                "latitude": 52.563469,
                "longitude": 13.319415,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-08T13:43:00+0100"
        },
        "trafficTypes": [
            "Walk",
            "Metro",
            "Bus"
        ],
        "description": "C1-0",
        "costs": {
            "distance": null,
            "duration": {
                "unit": "Second",
                "value": 2340
            },
            "price": {
                "unit": "EuroCent",
                "value": 260
            },
            "emission": null
        }
    },
    {
        "url": "TripProposals/2256",
        "origin": {
            "location": {
                "latitude": 52.521634,
                "longitude": 13.411006,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-08T13:06:00+0100"
        },
        "destination": {
            "location": {
                "latitude": 52.563469,
                "longitude": 13.319415,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-08T13:42:00+0100"
        },
        "trafficTypes": [
            "Walk",
            "CityTrain",
            "Metro"
        ],
        "description": "C1-1",
        "costs": {
            "distance": null,
            "duration": {
                "unit": "Second",
                "value": 2160
            },
            "price": {
                "unit": "EuroCent",
                "value": 260
            },
            "emission": null
        }
    }
]


# General Description
Get trip information with Car/Walk routing constraints.

# Selection criteria 
Specified in the request body as described in the sample request 

- origin: start point specified by a geo location 
  (addresses can be converted into geo locations by means of "GET /Resources/GeoLocations")
- destination: start point specified by a geo location
- either orgin or destination might specify a time
- viaPoints: list of geo locations that the route should use
- costFunction: list of cost factors (such as Distance, Duration, Price, Economy), each with a percentual weight 
- trafficTypes: list of either of Walk, Bike, Car, Taxi, Metro, CityTrain, Train, Bus, Tram, RegioTrain, Ferry, Other
- routingConstraints: list of constraints to be taken into account for various traffic types, specified by min/max values
- userId: user that requests a trip

# Response
List of trip proposals with basic information such as distance, duration and an URI for details.

POST /api/V0/TripProposals
> Content-Type: application/json
> Accept: application/json
{
  "origin": {
    "location": {
      "longitude": 13.072690999999963,
      "latitude": 52.3941887,
      "system": "WGS84"
    },
    "time": "2014-01-08T12:04:02UTC+05:30"
  },
  "destination": {
    "location": {
      "longitude": 13.319420000000036,
      "latitude": 52.56347100000001,
      "system": "WGS84"
    },
    "time": null
  },
  "viaPoints": [],
  "costFunctions": [
    {
      "costType": "Duration",
      "percentage": 100
    }
  ],
  "userId": "4711/10",
  "trafficTypes": [
    "Walk",
    "Bike",
    "Car",
    "Metro",
    "CityTrain",
    "Bus"
  ],
  "routingConstraints": [
    {
      "routingConstraintType": "Distance",
      "trafficType": "Walk",
      "max": {
        "value": "700",
        "unit": "Meter"
      }
    },
    {
      "routingConstraintType": "Distance",
      "trafficType": "Car",
      "max": {
        "value": "2000",
        "unit": "Meter"
      }
    }
  ]
}
< 200
< Content-Type: application/json
[
    {
        "url": "TripProposals/2193",
        "origin": {
            "location": {
                "latitude": 52.395081,
                "longitude": 13.071293,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-08T13:04:02+0100"
        },
        "destination": {
            "location": {
                "latitude": 52.563589,
                "longitude": 13.319065,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-08T14:42:40+0100"
        },
        "trafficTypes": [
            "Bike"
        ],
        "description": "Route for Request null",
        "costs": {
            "distance": {
                "unit": "Meter",
                "value": 30294.9150920476
            },
            "duration": {
                "unit": "Second",
                "value": 5918.08471656858
            },
            "price": null,
            "emission": null
        }
    },
    {
        "url": "TripProposals/2194",
        "origin": {
            "location": {
                "latitude": 52.394184,
                "longitude": 13.072688,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-08T13:06:00+0100"
        },
        "destination": {
            "location": {
                "latitude": 52.563469,
                "longitude": 13.319415,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-08T14:04:00+0100"
        },
        "trafficTypes": [
            "Car",
            "CityTrain",
            "Metro"
        ],
        "description": "C1-0",
        "costs": {
            "distance": null,
            "duration": {
                "unit": "Second",
                "value": 3480
            },
            "price": {
                "unit": "EuroCent",
                "value": 320
            },
            "emission": null
        }
    },
    {
        "url": "TripProposals/2195",
        "origin": {
            "location": {
                "latitude": 52.394184,
                "longitude": 13.072688,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-08T13:06:00+0100"
        },
        "destination": {
            "location": {
                "latitude": 52.563469,
                "longitude": 13.319415,
                "system": "WGS_84"
            },
            "address": null,
            "time": "2014-01-08T14:12:00+0100"
        },
        "trafficTypes": [
            "Car",
            "CityTrain",
            "Bus",
            "Walk"
        ],
        "description": "C1-1",
        "costs": {
            "distance": null,
            "duration": {
                "unit": "Second",
                "value": 3960
            },
            "price": {
                "unit": "EuroCent",
                "value": 320
            },
            "emission": null
        }
    }
]


--
WMS
--

# General Description
Get WMS PNG file for several service categories.

# Query Parameters
Define area of interest as a bounding box and with further optional parameters.

## box
`left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng}`

## optional parameters

### service names
- `serviceNames={categories}`: comma-separated list of service categories (currently offered as WMS layers by VMZ), e.g. PublicTransport, Parking

### width
- `width={w}`: width of map output in pixels (semantics according to WMS GetMap request)
- the default value is width=250
  
### heigth
- `height={h}`: height of map output in pixels (semantics according to WMS GetMap request)
- the default value is height=250
 
# Response
PNG file with requested service categories.

Please note: The accept-header of this request must be set to "image/png"
GET /api/V0/Resources?system={s}&left_lower_lng={min_lng}&left_lower_lat={min_lat}&right_upper_lng={max_lng}&right_upper_lat={max_lat}&width={w}&heigth={h}&serviceNames={categories}
> accept: image/png
< 200
< Content-Type: image/png
{   "... this should be a PNG ..."
}

--
Partners
Registered IMP Partners
--

Request for new Partner (starts "New Partner" Process).
POST /api/V0/Partners
> Content-Type: application/json
> Accept: application/json
{ "companyName":"ContiPark", roles": [ "ServiceProvider" ]}
< 201
< Content-Type: application/json
< Access-Control-Allow-Origin: *
< Access-Control-Allow-Methods: POST, GET, UPDATE, DELETE, OPTIONS
< Access-Control-Allow-Headers: content-type, x-http-method-override, x-requested-with
{ "name":"Partner 1" }

Show details of specified Partner.
GET /api/V0/Partners/{PartnerId}
< 200
< Content-Type: application/json
{ "status": "requested", "url": "/Partners/1", "companyName":"Partner 1", "roles": [ "ServiceProvider" ] }

Request update of Partner details (starts "Update Partner" Process) [UC PM-1].
PUT /Partners/{PartnerId}
> Content-Type: application/json
> Accept: application/json
{ "companyName":"Partner 1 new" }
< 200
< Content-Type: application/json
{ "status": "requested", "url": "/Partners/1", "companyName":"Partner 1 new", "roles": [ "ServiceProvider" ] }

Request deletion of specified Partner (starts "Delete Partner" Process) [UC PM-1].
DELETE /Partners/{PartnerId}
< 204

List all registered Partners (only for Admin).
GET /api/V0/Partners
< 200
< Content-Type: application/json
{ "items": [
    { "status": "registered", "url": "/Partners/1", "companyName":"Partner 1", "roles": [ "ServiceProvider" ] },
    { "status": "registered", "url": "/Partners/2", "companyName":"Partner 2", "roles": [ "ServiceProvider" ] },
    { "status": "registered", "url": "/Partners/3", "companyName":"Partner 3", "roles": [ "MobilityProvider" ] }
] }

Generate user token (starts "User Token Generation" Process).

Query Parameters

- `action={register}`: Must be "register" to start token generation
POST /api/V0/Partners/User/Process
> Content-Type: application/json
> Accept: application/json
< 201
< Content-Type: application/json
{
    "id": {id},
    "partnerId": {partnerId},
    "token": "587c8e09-cd63-48d2-b889-b6903221e8b4"
}

Request user transactions.

Query Parameters (optional - if date range not provided then results are fetched for last one month)
 
- `startDate={fromDate}`
- `endDate={toDate}`
GET /api/V0/Partners/User/Transactions
> Content-Type: application/json
> Accept: application/json
> userToken: {userToken}
< 200
< Content-Type: application/json
[
    {
        "serviceCategory": "Parking",
        "serviceType": "consumption",
        "serviceDescription": "vmzParking : consumption",
        "unit": "EUR",
        "value": 0,
        "startTime": "2014-01-07T12:38:39+0530",
        "endTime": "2014-01-07T12:38:39+0530"
    }
]

To be described
GET /Partners/verify?{verificationHash}
< 200


--
ServiceOfferings per Partner
--

Request registration of new Service for Partner (starts "New Service" Process) [UC PM-3].
POST /api/V0/Partners/{PartnerId}/ServiceOfferings
> Content-Type: application/json
> Accept: application/json
{ "companyName":"Parking / Partner 1", "url": "..." }
< 201
< Content-Type: application/json
< Location: /Partners/1/Service/1
{ "status": "requested", "url": "/Partners/1/ServiceOfferings/1", "companyName":"Parking / Partner 1" }

Request deletion of specified Service (starts "Delete Service" Process) [UC PM-3].
DELETE /V0/Partners/{PartnerId}/ServiceOfferings/{ServiceId}
< 204

Show details of specified Service.
GET /V0/Partners/{PartnerId}/ServiceOfferings/{ServiceId}
< 200
< Content-Type: application/json
{ "offeringStatus": "requested", "url": "/Partners/1/ServiceOfferings/1", "name":"Parking / Partner 1" }

Show availability of specified Service [IMP-222].
GET /V0/Partners/{PartnerId}/ServiceOfferings/{ServiceId}/Availability?from={from_time}&to={to_time}
< 200
< Content-Type: application/json
{ "offeringStatus": "available", "url": "/Partners/1/ServiceOfferings/1/Availability" }

Request update of Service details (starts "Update Service" Process)  [UC PM-3].
PUT /Partners/{PartnerId}/ServiceOfferings/{ServiceId}
> Content-Type: application/json
> Accept: application/json
{ "name":"Parking / Partner 1 new" }
< 200
< Content-Type: application/json
{ "offeringStatus": "requested", "type": "Parking", "url": "/Partners/1/ServiceOfferings/1", "name":"Parking / Partner 1 new" }

--
ServiceOfferings for all Partners
--

List all offered Services.
GET /api/V0/ServiceOfferings
< 200
< Content-Type: application/json
{ "items": [
    { "offeringStatus": "provided", "type": "Parking", "url": "/Partners/1/ServiceOfferings/1", "name":"Parking / Partner 1" },
    { "offeringStatus": "provided", "type": "Car Rental", "url": "/Partners/2/ServiceOfferings/1", "name":"Car Rental / Partner 2" }
] }

List all offered Services of a specified type.
GET /api/V0/ServiceOfferings?category=Parking
< 200
< Content-Type: application/json
{ "items": [
        { "offeringStatus": "provided", "category": "Parking", "url": "/Partners/1/ServiceOfferings/1", "name":"Parking / Partner 1" }
] }


--
Service Subscriptions
--

List all Subscriptions for specified Partner (requested by MobilityProvider).
GET /api/V0/Partners/{PartnerId}/ServiceSubscriptions
< 200
< Content-Type: application/json
{ "items": [
        { "status": "pending", "url": "/ServiceOfferings/1/ServiceSubscriptions/4711" }
] }

MobilityProvider subscribes to ServiceOffering
POST /api/V0/ServiceOfferings/{ServiceId}/ServiceSubscriptions
> Content-Type: application/json
> Accept: application/json
{ "partnerId" : "1" }
< 201
< Content-Type: application/json
< Location: /ServiceOfferings/1/ServiceSubscriptions/4711
{ "status": "pending", "url": "/ServiceOfferings/1/ServiceSubscriptions/4711" }

List all ServiceSubscriptions for a ServiceOffering (requested by ServiceProvider)
GET /api/V0/ServiceOfferings/{ServiceId}/ServiceSubscriptions
< 200
< Content-Type: application/json
{ "items": [
        { "status": "pending", "url": "/ServiceOfferings/1/ServiceSubscriptions/4711" }
] }

Unsubscribe Service
DELETE /api/V0/ServiceOfferings/1/ServiceSubscriptions/4711
< 204

--
Service Categories
--

List all available Service Categories
GET /api/V0/ServiceCategories
< 200
< Content-Type: application/json
{ "items": [
        { "name": "Parking", "url": "/ServiceCategories/Parking" , "displayText":"Store Parking" ,"resources": "/Resources/Parking" }
] }


--
--

Options (for CORS, only for mock).
OPTIONS /api/V0/Partners
< 200
< Access-Control-Allow-Origin: *
< Access-Control-Allow-Methods: POST, GET, PUT, UPDATE, DELETE, OPTIONS
< Access-Control-Allow-Headers: content-type, x-http-method-override, x-requested-with

--
Taxi
--


# General Description
Get available taxis in a specified area.

# Query Parameters
Define area of interest as circle or box.

## circle
`lat={lat}&lng={lng}&radius={r}`

## box
`left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng}`

# Response
List of available taxis with basic information.


GET /api/V0/Resources/TaxiService/Taxis
< 200
< Content-Type: application/json
[
    { 
        "id": 5120, 
        "location": {"latitude":52.5244,  "longitude":13.2541, "system":"WGS_84" }, 
        "status":"Available", 
        "licenceId":"B-TA 4820" 
    },
    { 
        "id": 5393, 
        "location": {"latitude":52.58421, "longitude":13.36627, "system":"WGS_84" }, 
        "status":"Available", 
        "licenceId":"B-GA 4518" 
    },
    { 
        "id": 4911, 
        "location": {"latitude":52.5206,  "longitude":13.38284, "system":"WGS_84" }, 
        "status":"Available", 
        "licenceId":"B-TA 4270" 
    },
    { 
        "id": 5357, 
        "location": {"latitude":52.55726, "longitude":13.52817, "system":"WGS_84" }, 
        "status":"Available", 
        "licenceId":"B-I 6606" 
    },
    { 
        "id": 5006, 
        "location": {"latitude":52.53803, "longitude":13.31234, "system":"WGS_84" }, 
        "status":"Available", 
        "licenceId":"B-T 4100" 
    },
    { 
        "id": 5109, 
        "location": {"latitude":52.54481, "longitude":13.40668, "system":"WGS_84" }, 
        "status":"Available", 
        "licenceId":"B-JW 448" 
    }
]


# General Description
Get estimated fare for trips from origin to destination.

# Query Parameters 
Either of both variants:

## origin and destination
`origin_lat={lat}&origin_lng={lng}&dest_lat={lat}&dest_lng={lng}`

## origin and distance from origin
`origin_lat={lat}&origin_lng={lng}&radius={r}`

Further conditions might specify: number of passengers, extra luggage, start time, ...

# Response
fare information for the specified trip.

GET /api/V0/Info/TaxiService/Fares
< 200
< Content-Type: application/json
{
    "fareQuality": 1.0,
    "startTime": "2013-07-09T08:09:17",
    "arrivalTime": { "value": 360, "unit": "sec"},
    "totalTime":   { "value": 660, "unit": "sec"},
    "totalDistance": { "value": 5000, "unit": "m" },
    "costs": { 
        "flagFall": { "value":300, "currency":"EuroCent"},
        "total":    { "value":960, "currency":"EuroCent"}, 
        "distance": { "value":660, "currency":"EuroCent"}, 
        "other":    { },
        "passengers": [
           { "value":0,   "currency":"EuroCent" },
           { "value":0,   "currency":"EuroCent" },
           { "value":0,   "currency":"EuroCent" },
           { "value":0,   "currency":"EuroCent" },
           { "value":150, "currency":"EuroCent" },
           { "value":300, "currency":"EuroCent" },
           { "value":450, "currency":"EuroCent" },
           { "value":600, "currency":"EuroCent" }
        ]
    }
    "services": {
        "bookingAvailable": true,
        "paymentAvailable": false,
        "privateHireVehicleAvailable": true,
        "taxiSharing": false,
        "information": "An diesem Flughafen ist keine Taxibuchung möglich, bitte nutzen Sie eines der Flughafen Taxis" 
    }      
}


# General Description

Book a Taxi: The taxi ride is specified by providing the starting point (address and/or geo location) and the destination.
This means that no specific, previously selected taxi, is booked.

# Query Parameters

- `action={Book}`: Must be "Book" to perform a booking

Input in request body: 

- operator: name, userId and password (for authentication)
- origin of the taxi ride and optional start time
- destination of the taxi ride
- further parameters might later detail the request by specifying the number of passengers, availability of child seats, extra luggage etc.

# Failures

- booking is not possible: response body explains the reason why

# Output
- the estimated costs, the taxi's licence id, and a booking id are returned; the latter can be used to cancel the booking.

Please note: 

- Since data about the traveler is usually requested by the taxi SP, we assume that the end-user (or the mobility provider) himself is responsible to register at the service provider.
- We currently require one operator in the input body.

POST /api/V0/Resources/TaxiService/Taxis/Processes?action=Book
> Accept: application/json
> Content-Type: application/json
> userToken: {userToken}
{
    "operator": {
        "name": "BetterTaxi",
        "userId": "MP1_1",
        "password": "TopSecret!"
    },
    "origin" : {
        "location": { "latitude":52.51914, "longitude": 13.40693 }, 
        "address": { "citycode":"10178", "city":"Berlin", "Street":"Spandauer Straße","houseno":"9" }, 
        "time": "2013-05-01T12:00:00" 
    },
    "destination" : {
        "address": { "citycode":"12109", "city":"Berlin", "Street":"Ullsteinstraße","houseno":"114" }
    }
}
< 201
< Location: /api/V0/Process/4711
< Content-Type: application/json
{
    "processId" : 123,
    "confirmation" : {
        "confirmationId" : 456,
        "featureType": "BOOKING"
    },
    "origin" : {
        "location": { "latitude":52.51914, "longitude": 13.40693 }, 
        "address": { "citycode":"10178", "city":"Berlin", "Street":"Spandauer Straße","houseno":"9" }, 
        "time": "2013-05-01 12:00:00" 
    },
    "destination" : {
        "address": { "citycode":"12109", "city":"Berlin", "Street":"Ullsteinstraße","houseno":"114" }
    },
    "operatorId": "BetterTaxi",
    "licenceId": "B-OB 007",
    "arrivalTime": "2013-05-01T12:05:00",
    "services": {
        "bookingAvailable": true,
        "paymentAvailable": false,
        "privateHireVehicleAvailable": true,
        "taxiSharing": false,
        "information": "An diesem Flughafen ist keine Taxibuchung möglich, bitte nutzen Sie eines der Flughafen Taxis" 
    },
    "actions": [
        {
            "name": "Cancel",
            "method": "PUT",
            "uri": "/api/V0/Processes/123?action=Cancel"
        }
    ]
}


# General Descrition 
Cancel a booking for a taxi that has been booked before with a booking id 4711.

# Query Parameters

- `action={Cancel}`: Must be "Cancel" for performing a booking

Input in request body: 

- userId and password (for authentication)

# Failures

- cancelation is not possible: the response body explains the reason why.

# Output
information about the originally planned taxi ride and the cancelation fee
PUT /api/V0/Process/123?action=Cancel
> Accept: application/json
> Content-Type: application/json
> userToken: {userToken}
{ 
    "operator": { 
        "name": "BetterTaxi", 
        "userId": "MP1_1",
        "password": "TopSecret!"
    }
}
< 201
< Location: /api/V0/Process/123
< Content-Type: application/json
{
    "userId": "MP1_1",
    "ride": { 
        "origin" : {
            "location": { "latitude":52.51914, "longitude": 13.40693 }, 
            "address": { "citycode":"10178", "city":"Berlin", "Street":"Spandauer Straße","houseno":"9" }, 
            "time": "2013-05-01 12:00:00" 
        },
        "destination" : {
            "address": { "citycode":"12109", "city":"Berlin", "Street":"Ullsteinstraße","houseno":"114" }
        }
    },
    "confirmation": {
        "featureType": "CANCELATION",
        "confirmationId": "17",
        "fee": { "value": 0, "currency": "EUR" }
    },
    "actions": [ ]
}



-- 
Incidents / Traffic Info
--

# General Description
Get recent general incidents / traffic info in a specific area.

# Query Parameters
Define area of interest as circle or box.
 
## circle
`lat={lat}&lng={lng}&radius={r}`

## box
`left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng}`

# Response
List of traffic information in the specified geo location specified by query parameters.
GET /api/V0/Info/Incidents
< 200
< Content-Type: application/json
[   {
        "description": "Roadworks road closed",
        "type": "IndividualTransport",
        "uri": null,
        "location": {
            "latitude": 52.51642,
            "longitude": 13.38888,
            "system": "WGS_84"
        },
        "provider": "News",
        "category": "Blockade",
        "message": "Closed Road",
        "timePeriod": {
            "from": "2012-07-13T07:00:00MESZ",
            "to": "2013-12-31T17:00:59MEZ"
        },
        "coordinates": [
            {
                "latitude": 52.51642,
                "longitude": 13.38888,
                "system": "WGS_84"
            }
        ],
        "reason": null,
        "reasonShort": null,
        "consequence": null,
        "consequenceShort": null,
        "location": "bidirectional between Unter den Linden and Behrenstr.",
        "source": "INKO",
        "affectedTrips": null,
        "net": []
    },
    {
        "description": "Baumaßnahme",
        "type": "PublicTransportation",
        "uri": null,
        "provider": "News",
        "category": "Other",
        "message": "Disruption",
        "timePeriod": {
            "from": "2012-08-22T04:00:00MESZ",
            "to": "2013-11-01T03:30:00MEZ"
        },
        "coordinates": [
            {
                "latitude": 52.52035888888889,
                "longitude": 13.388417777777777,
                "system": "WGS_84"
            }
        ],
        "reason": "Sperrung wegen Bauarbeiten der BVG",
        "reasonShort": "Sperrung wegen Bauarbeiten der BVG",
        "consequence": "Die Linie ist zwischen U Friedrichstraße und U Französische Str. unterbrochen. Zwischen U Friedrichstr. und U Stadtmitte können Sie die Buslinie 147 nutzen oder alternativ ab U Französische Str. die Strecke von 500 Metern zu Fuß gehen.",
        "consequenceShort": "Unterbrechung wegen Bauarbeiten",
        "location": null,
        "source": "PT",
        "affectedTrips": null,
        "net": []
    }
]

# General Description
Get recent individual transportation incidents / traffic info in a specific area.

# Query Parameters
Define area of interest as circle or box.
 
## circle
`lat={lat}&lng={lng}&radius={r}`

## box
`left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng}`

# Response 
List of traffic information in the specified geo location specified by query parameters.

GET /api/V0/Info/Incidents/IndividualTransport
< 200
< Content-Type: application/json
[    {
        "description": "Roadworks carriageway reduced from 2 to 1 lane traffic, congestion has to be expected road closed",
        "type": "IncidentIndividualTransport",
        "uri": null,
        "provider": "News",
        "category": "Blockade",
        "message": "Closed Road",
        "timePeriod": {
            "from": "2012-11-09T12:00:00MEZ",
            "to": "2013-12-31T17:00:59MEZ"
        },
        "coordinates": [
            {
                "latitude": 52.51774,
                "longitude": 13.38868,
                "system": "WGS_84"
            }
        ],
        "reason": null,
        "reasonShort": null,
        "consequence": null,
        "consequenceShort": null,
        "location": "towards Unter den Linden at crossing Unter den Linden",
        "source": "INKO",
        "affectedTrips": null,
        "net": [],
        "roadName": "Friedrichstr. (Mitte)"
    }
]


# General Description
Get recent public transportation incidents / traffic info in a specific area.

# Query Parameters
Define area of interest as circle or box.
 
## circle
`lat={lat}&lng={lng}&radius={r}`

## box
`left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng}`

# Response 
List of traffic data in the specified geo location specified by query parameters.

GET /api/V0/Info/Incidents/PublicTransport
< 200
< Content-Type: application/json
[   {
        "description": "Umleitung / geänderte Haltestellenbedienung",
        "type": "IncidentPublicTransport",
        "uri": null,
        "provider": "News",
        "category": "Other",
        "message": "Disruption",
        "timePeriod": {
            "from": "2013-01-21T05:00:00MEZ",
            "to": null
        },
        "coordinates": [
            {
                "latitude": 52.51748527777778,
                "longitude": 13.388815833333332,
                "system": "WGS_84"
            }
        ],
        "reason": "Sperrung wegen Bauarbeiten der BVG",
        "reasonShort": "Sperrung wegen Bauarbeiten der BVG",
        "consequence": "Die Linie muss von der Fischerinsel über Gertraudenstr., Leipziger Str., Mauerstr., Glinkastr., Neustädtische Kirchstr. und Dorotheenstr. zur Friedrichstr. bzw. entgegengesetzt umgeleitet werden. Die Haltestellen Neumannsgasse, Werderscher Markt, U Französische Str. und Unter den Linden/Friedrichstr. werden nicht bedient. Die auf dem Umleitungsweg befindlichen Haltestellen werden angefahren.",
        "consequenceShort": "Bauarbeiten, Umleitung",
        "location": null,
        "source": "PT",
        "affectedTrips": null,
        "net": [],
        "direction": "Beide",
        "firstStop": "Fischerinsel",
        "lastStop": "S+U Friedrichstr.",
        "lineName": {
            "name": "147",
            "trafficType": "Bus"
        }
    }
]


-- 
Reporting
--

# General Description
Get service usage statistics for specified date range.

# Query Parameters
 
- `startDate={fromDate}`
- `endDate={toDate}`
 
# Response
List of service with usage statistics.
GET /api/V0/Reporting/serviceUsageStatistics
< 200
< Content-Type: application/json
[   
    {
        "id": null,
        "featureType": "LIST",
        "serviceCategory": "PUBLIC_TRANSPORT",
        "mobilityProvider": "MP1",
        "serviceProvider": "IMP",
        "numberOfCalls": 1,
        "serviceAlias": "Offline Stations",
        "time": null
    }
]


# General Description
Get service performance statistics for specified date range.

# Query Parameters
 
- `startDate={fromDate}`
- `endDate={toDate}`
 
# Response
List of service with performance statistics.
GET /api/V0/Reporting/servicePerformanceStatistics
< 200
< Content-Type: application/json
[   
    {
        "id": null,
        "serviceName": "bettertaxi_booking",
        "responseCode": "200",
        "avgResponseTime": 14.3333333333,
        "maxResponseTime": 41.0,
        "serviceProvider": "BetterTaxi"
    }
]


-- 
Dummy. Please do not delete.
--

