FORMAT: 1A
HOST: https://as.production.imp.mobilitaetsdienste.de:8443/

# IMP North. Implemented
This is API in a new format 1A 

# Readme before making any changes   

Please keep the groovy generating script in synch with this documentation. Read more on Wiki: https://confluence.imp.mobilitaetsdienste.de/display/IMP/Apiary. 

*update the goovy script if you change names of any chapter* 
*chapter names can not contain special characters "(", ")", "\", etc. which have a meaning in regular expressions*

# Introduction

This is a description of a public REST interface offered by Siemens AG and its subsidiary VMZ Berlin Betreibergesellschaft GmbH 
in the project Open Mobility Berlin. A mockup of this interface can be tried using the URLs listed on the right. For access to the production
system please write an email to `henrik.koberg@siemens.com`

(c) Siemens AG 2014 All rights reserved

# Group Bike Sharing
This is a group of all bike sharing related rest resources
    
## Bike Sharing Stations [/imp-endpoint/api/V1/Resources/BikeSharing/Stations?lat={lat}&lng={lng}&radius={radius}]    
This collection contains a list of all bike sharing stations in an area of interest specified by query parameters. (for station-based bike sharing)
Note: The area of interest can be defined as:

* a bounding circle (lat={lat}&lng={lng}&radius={radius})
* a bounding box (left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng})

The If-Modified-Since (optional) can be set to a specific date-time in order to request only resources modified after a particular date-time.
Date time in HTTP date format for e.g. Wed, 09 Apr 2008 23:55:38 GMT

The data structure of the response contains the following attributes: 

attribute | json data type | comments
--- | --- | ---
metadata | Object | List of service providers and the last update times and failures if any [{serviceAlias:"XXX",lastUpdateTime:dd-mm-yyyyThhmmssZ,messages:[]}]
--- | --- | ---
resources | Array | Array of resources within the search area
--- | --- | ---
actions | Array | Available actions
id | Number | Internal bike sharing station identification number
description | String | Approximate location
type | String | Type of bike sharing station
uri | URI | URI to request more details.
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider | String | service provider
availability | Double | Availability in percentage
operator | String | resource operator
phoneNo | String | 
operatorURI | String |
operatorName | String | 
address | Object | 
numberOfBikes | Number | 
numberOfFreeBikes | Number | 
services | Array | 
modFlag | Enum | Type of modification to resource [New / Modified / Relocated / Deleted]. This attribute is present only when the If-Modified-Since header is passed in the request  

Parts of the data structure might be omitted if the information is not available. 
    
### Getting bikes [GET]
@testable

+ Parameters
    + lat (number, `52.52`) ... latitude value. Has example value.
    + lng (number, `13.39`) ... longitude value. Has example value.
    + radius (number, `1000`) ... radius value. Has example value.
    
+ Request

    + Headers
    
            If-Modified-Since: Wed, 09 Apr 2008 23:55:38 GMT 
        
+ Response 200 (application/json)

        {
            "metaData": [
                {
                    "serviceAlias": "callabike",
                    "lastUpdateTime": "2014-07-10T14:23:11+02:00",
                    "messages": []
                },
                {
                    "serviceAlias": "nextbike",
                    "lastUpdateTime": "2014-07-10T14:11:02+02:00",
                    "messages": []
                }
            ],
            "resources": [
                {
                    "actions": [
                        {
                            "name": "book",
                            "method": "POST",
                            "uri": "Resources/BikeSharing/Stations/270210/Process?action=book"
                        }
                    ],
                    "id": 270210,
                    "description": "S+U-Bhf. Friedrichstraße",
                    "type": "BikeSharingStation",
                    "uri": "Resources/BikeSharing/Stations/270210",
                    "location": {
                        "latitude": 52.519676208496094,
                        "longitude": 13.385995864868164,
                        "system": "WGS_84"
                    },
                    "provider": "callabike",
                    "availability": 100,
                    "operator": "CallABike",
                    "modFlag": "Modified",
                    "phoneNo": null,
                    "operatorURI": null,
                    "operatorName": "CallABike",
                    "address": null,
                    "numberOfBikes": 16,
                    "numberOfFreeBikes": 16,
                    "services": null
                },
                {
                    "actions": [
                        {
                            "name": "book",
                            "method": "POST",
                            "uri": "Resources/BikeSharing/Stations/270258/Process?action=book"
                        }
                    ],
                    "id": 270258,
                    "description": "Tucholskystraße / Torstraße",
                    "type": "BikeSharingStation",
                    "uri": "Resources/BikeSharing/Stations/270258",
                    "location": {
                        "latitude": 52.52822494506836,
                        "longitude": 13.392618179321289,
                        "system": "WGS_84"
                    },
                    "provider": "callabike",
                    "availability": 43.75,
                    "operator": "CallABike",
                    "modFlag": "Modified",
                    "phoneNo": null,
                    "operatorURI": null,
                    "operatorName": "CallABike",
                    "address": null,
                    "numberOfBikes": 16,
                    "numberOfFreeBikes": 7,
                    "services": null
                }
            ]
        }
        
## All Bike Sharing Stations [/imp-endpoint/api/V1/Resources/BikeSharing/All]    
This collection contains a list of all bike sharing stations (for station-based bike sharing)

The If-Modified-Since (optional) can be set to a specific date-time in order to request only resources modified after a particular date-time.
Date time in HTTP date format for e.g. Wed, 09 Apr 2008 23:55:38 GMT

The data structure of the response contains the following attributes: 

attribute | json data type | comments
--- | --- | ---
metadata | Object | List of service providers and the last update times and failures if any [{serviceAlias:"XXX",lastUpdateTime:dd-mm-yyyyThhmmssZ,messages:[]}]
--- | --- | ---
resources | Array | Array of resources within the search area
--- | --- | ---
actions | Array | Available actions
id | Number | Internal bike sharing station identification number
description | String | Approximate location
type | String | Type of bike sharing station
uri | URI | URI to request more details.
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider | String | service provider
availability | Double | Availability in percentage
operator | String | resource operator
phoneNo | String | 
operatorURI | String |
operatorName | String | 
address | Object | 
numberOfBikes | Number | 
numberOfFreeBikes | Number | 
services | Array | 
modFlag | Enum | Type of modification to resource [New / Modified / Relocated / Deleted]. This attribute is present only when the If-Modified-Since header is passed in the request  

Parts of the data structure might be omitted if the information is not available. 
    
### Getting bikes [GET]
@testable

+ Request

    + Headers
    
            If-Modified-Since: Wed, 09 Apr 2008 23:55:38 GMT 
        
+ Response 200 (application/json)

        {
          "metaData": [
            {
              "serviceAlias": "callabike",
              "lastUpdateTime": "2014-08-11T13:38:33+02:00",
              "messages": [
                
              ]
            },
            {
              "serviceAlias": "nextbike",
              "lastUpdateTime": "2014-08-11T13:38:36+02:00",
              "messages": [
                
              ]
            }
          ],
          "resources": [
            {
              "actions": [
                {
                  "name": "book",
                  "method": "POST",
                  "uri": "Resources/BikeSharing/BikeSharingStation/47059/Process?action=book"
                }
              ],
              "id": 47059,
              "description": "Ernst-Reuter-Platz / Marchstraße",
              "type": "BikeSharingStation",
              "uri": "Resources/BikeSharing/BikeSharingStation/47059",
              "location": {
                "latitude": 52.51343536376953,
                "longitude": 13.32278823852539,
                "system": "WGS_84"
              },
              "provider": "callabike",
              "availability": 62.5,
              "operator": "CallABike"
            },
            {
              "actions": [
                {
                  "name": "book",
                  "method": "POST",
                  "uri": "Resources/BikeSharing/BikeSharingStation/47072/Process?action=book"
                }
              ],
              "id": 47072,
              "description": "Wilmersdorfer Straße / Goethestraße",
              "type": "BikeSharingStation",
              "uri": "Resources/BikeSharing/BikeSharingStation/47072",
              "location": {
                "latitude": 52.5088996887207,
                "longitude": 13.306029319763184,
                "system": "WGS_84"
              },
              "provider": "callabike",
              "availability": 68.75,
              "operator": "CallABike"
            }
          ]
        }
        
## Station with Detailed Info [/imp-endpoint/api/V1/Resources/BikeSharing/Stations/{stationId}]
A single bike sharing station object with Detailed Information determined by a specific id.
The data structure of the response contains the attributes with the basic information and additionally the following attributes:

attribute | json data type | comments
--- | --- | ---
... | ... | ...


### Getting a specific station [GET] 
@nottestable

+ Parameters
    + stationId (string, `203869`) ... String `stationId` as retrieved through *[/imp-endpoint/api/V1/Resources/BikeSharing/Stations?lat={lat}&lng={lng}&radius={radius}]* .
        
+ Response 200 (application/json)

    + Body
    
            {
                "actions": [
                    {
                        "name": "book",
                        "method": "POST",
                        "uri": "Resources/BikeSharing/Stations/9/Process?action=book"
                    }
                ],
                "id": 9,
                "description": "Museumsinsel / Monbijoubrücke",
                "type": "BikeSharingStationDetails",
                "uri": "Resources/BikeSharing/Stations/9/",
                "location": {
                    "latitude": 52.52271270751953,
                    "longitude": 13.394195556640625,
                    "system": "WGS_84"
                },
                "provider": "callabike",
                "availability": 33.333333333333336,
                "operator": "CallABike",
                "phoneNo": null,
                "operatorURI": null,
                "operatorName": "CallABike",
                "address": null,
                "numberOfBikes": 18,
                "numberOfFreeBikes": 6,
                "services": null
            }
            
            
## Getting bikes for a specific station [/imp-endpoint/api/V1/Resources/BikeSharing/Stations/{stationId}/Bikes]
Get list of bikes for a specific station determined by a specific stationId.
The data structure of the response contains the attributes with the basic information and additionally the following attributes:

attribute | json data type | comments
--- | --- | ---
... | ... | ...
unitId | String | 

### Getting bikes for a specific station [GET] 
@nottestable

+ Parameters
    + stationId (string, `203869`) ... String `stationId` as retrieved through *[/imp-endpoint/api/V1/Resources/BikeSharing/Stations?lat={lat}&lng={lng}&radius={radius}]* .
        
+ Response 200 (application/json)

    + Body
        
            {
                "metaData": [
                    {
                        "serviceAlias": "callabike",
                        "lastUpdateTime": "2014-09-08T13:44:09+05:30",
                        "messages": []
                    }
                ],
                "resources": [
                    {
                        "actions": [
                            {
                                "name": "book",
                                "method": "POST",
                                "uri": "Resources/BikeSharing/Stations/18612/Bikes/18644/Process?action=book"
                            }
                        ],
                        "id": 18644,
                        "description": "S+U-Bhf. Friedrichstraße",
                        "type": "BikeSharingStationBikeDetails",
                        "uri": "Resources/BikeSharing/Stations/18612/Bikes/18644",
                        "location": {
                            "latitude": 52.519676208496094,
                            "longitude": 13.385995864868164,
                            "system": "WGS_84"
                        },
                        "provider": "callabike",
                        "availability": 100,
                        "operator": "CallABike",
                        "unitId": "9423"
                    }
                ]
            }
            
## Getting details of bike of a specific station [/imp-endpoint/api/V1/Resources/BikeSharing/Stations/{stationId}/Bikes/{bikeId}]
Get details of bike of a specific station determined by a specific stationId and bikeId
The data structure of the response contains the attributes with the basic information and additionally the following attributes:

attribute | json data type | comments
--- | --- | ---
... | ... | ...


### Getting details of bike of a specific station [GET] 
@nottestable

+ Parameters
    + stationId (string, `203869`) ... String `stationId` as retrieved through *[/imp-endpoint/api/V1/Resources/BikeSharing/Stations?lat={lat}&lng={lng}&radius={radius}]* .
    + bikeId (string, `18644`) ... String `bikeId` as retrieved through *[/imp-endpoint/api/V1/Resources/BikeSharing/Stations/{stationId}/Bikes]* .
        
+ Response 200 (application/json)

    + Body
        
            {
                "actions": [
                    {
                        "name": "book",
                        "method": "POST",
                        "uri": "Resources/BikeSharing/Stations/18612/Bikes/18644/Process?action=book"
                    }
                ],
                "id": 18644,
                "description": "S+U-Bhf. Friedrichstraße",
                "type": "BikeSharingStationBikeDetails",
                "uri": "Resources/BikeSharing/Stations/18612/Bikes/18644/",
                "location": {
                    "latitude": 52.519676208496094,
                    "longitude": 13.385995864868164,
                    "system": "WGS_84"
                },
                "provider": "callabike",
                "availability": 100,
                "operator": "CallABike",
                "unitId": "9423"
            }
     
            
        
## Book a bike available at a bike sharing station [/imp-endpoint/api/V1/Resources/BikeSharing/Stations/{id}/Process?action=book]

The data structure of the request contains the following attributes:

attribute | json data type | comments
--- | --- | ---
operator | String | Name of the operator
from | DateTime | Optional. Default value is current time
to | DateTime | Optional 

The data structure of the response has the following attributes:

attribute | json data type | comments
--- | --- | ---
confirmationId | String | 
comments | String | 

### Booking a bike [POST]
@nottestable

+ Parameters
    + id (string, `2`) ... Bike sharing station id where the bike is to be booked. String `id` as retrieved through *[/imp-endpoint/api/V1/Resources/BikeSharing/Stations?lat={lat}&lng={lng}&radius={radius}]* .

+ Request

        { 
           "operator":{
           "name":"callabike",   
            "userId": "3349",
            "password": "41b40ce13a2eb2901fe0e31a528bbd62"            
                    },
         "userId":"callabike_user",
         "from":"2002-20-10T22:00:33+02:00",
         "to":"2002-20-10T22:00:33+02:00"
        }


+ Response 201 (application/json)
        
        {
            "actions": [
            {
                "name": "cancel",
                "method": "PUT",
                "uri": "Processes/82?action=cancel"
            }
            ],
            "processId": "82",
            "confirmation": {
            "featureType": "BOOKING",
            "confirmationId": "Reservation",
            "confirmationData": "6678"
            }
        }


## Book a specific bike of bike sharing station [/imp-endpoint/api/V1/Resources/BikeSharing/Stations/{stationId}/Bikes/{bikeId}/Process?action=book]

The data structure of the request contains the following attributes:

attribute | json data type | comments
--- | --- | ---
operator | String | Name of the operator
from | DateTime | Optional. Default value is current time
to | DateTime | Optional 

The data structure of the response has the following attributes:

attribute | json data type | comments
--- | --- | ---
confirmationId | String | 
comments | String | 

### Book a specific bike of bike sharing station [POST]
@nottestable

+ Parameters
    + stationId (string, `2`) ... Bike sharing station id where the bike is to be booked. String `id` as retrieved through *[/imp-endpoint/api/V1/Resources/BikeSharing/Stations?lat={lat}&lng={lng}&radius={radius}]* .
    + bikeId (string, `1`) ... Bike to be booked. String `id` as retrieved through *[/imp-endpoint/api/V1/Resources/BikeSharing/Stations/{stationId}/Bikes]* .

+ Request

        { 
           "operator":{
           "name":"callabike",   
            "userId": "3349",
            "password": "41b40ce13a2eb2901fe0e31a528bbd62"            
                    },
         "userId":"callabike_user",
         "from":"2002-20-10T22:00:33+02:00",
         "to":"2002-20-10T22:00:33+02:00"
        }


+ Response 201 (application/json)
        
        {
            "actions": [
            {
                "name": "cancel",
                "method": "PUT",
                "uri": "Processes/82?action=cancel"
            }
            ],
            "processId": "82",
            "confirmation": {
            "featureType": "BOOKING",
            "confirmationId": "Reservation",
            "confirmationData": "6678"
            }
        }

## Get floating bikes [/imp-endpoint/api/V1/Resources/BikeSharing/Bikes?lat={lat}&lng={lng}&radius={radius}]    
This collection contains a list of all floating bikes in an area of interest specified by query parameters.
Note: The area of interest can be defined as:

* a bounding circle (lat={lat}&lng={lng}&radius={radius})
* a bounding box (left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng})

The If-Modified-Since (optional) can be set to a specific date-time in order to request only resources modified after a particular date-time.
Date time in HTTP date format for e.g. Wed, 09 Apr 2008 23:55:38 GMT

The data structure of the response contains the following attributes: 

attribute | json data type | comments
--- | --- | ---
metadata | Object | List of service providers and the last update times and failures if any [{serviceAlias:"XXX",lastUpdateTime:dd-mm-yyyyThhmmssZ,messages:[]}]
--- | --- | ---
resources | Array | Array of resources within the search area
--- | --- | ---
actions | Array | Available actions
id | Number | Internal bike sharing station identification number
description | String | Approximate location
type | String | Type of bike sharing station
uri | URI | URI to request more details.
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider | String | service provider
availability | Double | Availability in percentage
operator | String | resource operator
phoneNo | String | 
operatorURI | String |
operatorName | String | 
address | Object | 
numberOfBikes | Number | 
numberOfFreeBikes | Number | 
services | Array | 
modFlag | Enum | Type of modification to resource [New / Modified / Relocated / Deleted]. This attribute is present only when the If-Modified-Since header is passed in the request  

Parts of the data structure might be omitted if the information is not available. 
    
### Get floating bikes [GET]
@nottestable

+ Parameters
    + lat (number, `52.52`) ... latitude value. Has example value.
    + lng (number, `13.39`) ... longitude value. Has example value.
    + radius (number, `1000`) ... longitude value. Has example value.
    
+ Request

    + Headers
    
            If-Modified-Since: Wed, 09 Apr 2008 23:55:38 GMT 
        
+ Response 200 (application/json)

        {
            "metaData": [
                {
                    "serviceAlias": "callabike",
                    "lastUpdateTime": "2014-09-08T13:44:09+05:30",
                    "messages": []
                },
                {
                    "serviceAlias": "nextbike",
                    "lastUpdateTime": "2014-09-08T13:40:38+05:30",
                    "messages": []
                }
            ],
            "resources": []
        }
        
        
## Getting details of flaoting bike [/imp-endpoint/api/V1/Resources/BikeSharing/Bikes/{bikeId}]
Get details of floating bike determined by a specific bikeId
The data structure of the response contains the attributes with the basic information and additionally the following attributes:

attribute | json data type | comments
--- | --- | ---
... | ... | ...


### Getting details of flaoting bike [GET] 
@nottestable

+ Parameters
    + bikeId (string, `18644`) ... String `bikeId` as retrieved through *[/imp-endpoint/api/V1/Resources/BikeSharing/Bikes?lat={lat}&lng={lng}&radius={radius}]* .
        
+ Response 200 (application/json)

    + Body
        
            {
                "actions": [
                    {
                        "name": "book",
                        "method": "POST",
                        "uri": "Resources/BikeSharing/Bikes/18644/Process?action=book"
                    }
                ],
                "id": 18644,
                "description": "S+U-Bhf. Friedrichstraße",
                "type": "BikeSharingBikeDetails",
                "uri": "Resources/BikeSharing/Bikes/18644/",
                "location": {
                    "latitude": 52.519676208496094,
                    "longitude": 13.385995864868164,
                    "system": "WGS_84"
                },
                "provider": "callabike",
                "availability": 100,
                "operator": "CallABike",
                "unitId": "9423"
            }

## Book a floating bike [/imp-endpoint/api/V1/Resources/BikeSharing/Bikes/{bikeId}/Process?action=book]

The data structure of the request contains the following attributes:

attribute | json data type | comments
--- | --- | ---
operator | String | Name of the operator
from | DateTime | Optional. Default value is current time
to | DateTime | Optional 

The data structure of the response has the following attributes:

attribute | json data type | comments
--- | --- | ---
confirmationId | String | 
comments | String | 

### Book a floating bike [POST]
@nottestable

+ Parameters
    + bikeId (string, `1`) ... Bike to be booked. String `id` as retrieved through *[/imp-endpoint/api/V1/Resources/BikeSharing/Bikes?lat={lat}&lng={lng}&radius={radius}]* .

+ Request

        { 
           "operator":{
           "name":"callabike",   
            "userId": "3349",
            "password": "41b40ce13a2eb2901fe0e31a528bbd62"            
                    },
         "userId":"callabike_user",
         "from":"2002-20-10T22:00:33+02:00",
         "to":"2002-20-10T22:00:33+02:00"
        }


+ Response 201 (application/json)
        
        {
            "actions": [
            {
                "name": "cancel",
                "method": "PUT",
                "uri": "Processes/82?action=cancel"
            }
            ],
            "processId": "82",
            "confirmation": {
            "featureType": "BOOKING",
            "confirmationId": "Reservation",
            "confirmationData": "6678"
            }
        }             
        
        
# Group Car Sharing
This is a group of all car sharing related rest resources

## List of Car Sharing Locations with Basic Info [/imp-endpoint/api/V1/Resources/CarSharing/All?lat={lat}&lng={lng}&radius={radius}] 

This collection contains list of available car sharing locations in an area of interest specified by the query parameters (both free-floating cars and/or car stations) 
with basic information and a URI to acquire more details.
In case of station-based cars, only the URI of the Car Sharing station is returned; in case of free-floating cars, the URI to the car itself.
Note: The area of interest can be defined as:

* a bounding circle (lat={lat}&lng={lng}&radius={radius})
* a bounding box (left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng})


The If-Modified-Since (optional) can be set to a specific date-time in order to request only resources modified after a particular date-time. Date time in HTTP date format for e.g. Wed, 09 Apr 2008 23:55:38 GMT

attribute | json data type | comments
--- | --- | ---
metadata | Object | List of service providers and the last update times and failures if any [{serviceAlias:"XXX",lastUpdateTime:dd-mm-yyyyThhmmssZ,messages:[]}]
--- | --- | ---
resources | Array | Array of resources
--- | --- | ---
actions | Array | 
id | Number | 
description | String | License ID or approximate location
type | String | 
uri | URI | URI
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider | String | 
availability | Double | Availability in percentage
operator | String | 
modFlag | Enum | Type of modification to resource [New / Modified / Relocated / Deleted]. This attribute is present only when the If-Modified-Since header is passed in the request

### Getting all car sharing locations [GET]
@testable

+ Parameters
    + lat (optional, number, `52.52`) ... latitude value. Has example value.
    + lng (optional, number, `13.39`) ... longitude value. Has example value.
    + radius (optional, number, `5000`) ... radius value. Has example value.

+ Request

    + Headers
        
            If-Modified-Since: Wed, 09 Apr 2008 23:55:38 GMT 

+ Response 200 (application/json)
    
    + Body
    
            {
              "metaData": [
                {
                  "serviceAlias": "flinkster",
                  "lastUpdateTime": "2014-11-22T03:14:44+0100",
                  "messages": []
                },
                {
                  "serviceAlias": "car2Go",
                  "lastUpdateTime": "2014-11-22T03:20:51+0100",
                  "messages": []
                },
                {
                  "serviceAlias": "driveNow",
                  "lastUpdateTime": "2014-11-22T03:20:16+0100",
                  "messages": []
                },
                {
                  "serviceAlias": "citeeCar",
                  "lastUpdateTime": "2014-11-22T03:19:51+0100",
                  "messages": []
                },
                {
                  "serviceAlias": "multiCity",
                  "lastUpdateTime": "2014-11-22T03:20:34+0100",
                  "messages": []
                }
              ],
              "resources": [
                {
                  "actions": [],
                  "id": 49483,
                  "description": "B-CC 1426",
                  "type": "Cars",
                  "uri": "Resources/CarSharing/Cars/49483",
                  "location": {
                    "latitude": 52.525909423828125,
                    "longitude": 13.390524864196777,
                    "system": "WGS_84"
                  },
                  "provider": "citeeCar",
                  "availability": null,
                  "operator": "CiteeCar",
                  "modFlag": "Relocated"
                },
                {
                  "actions": [],
                  "id": 48831,
                  "description": "B-CC 6109",
                  "type": "Cars",
                  "uri": "Resources/CarSharing/Cars/48831",
                  "location": {
                    "latitude": 52.51978302001953,
                    "longitude": 13.393811225891113,
                    "system": "WGS_84"
                  },
                  "provider": "citeeCar",
                  "availability": null,
                  "operator": "CiteeCar",
                  "modFlag": "Relocated"
                },
                {
                  "actions": [],
                  "id": 56507,
                  "description": "114071",
                  "type": "Cars",
                  "uri": "Resources/CarSharing/Cars/56507",
                  "location": {
                    "latitude": 52.5156,
                    "longitude": 13.3879333,
                    "system": "WGS_84"
                  },
                  "provider": "multiCity",
                  "availability": 100,
                  "operator": "Multicity",
                  "modFlag": "Modified"
                },
                {
                  "actions": [],
                  "id": 49498,
                  "description": "151616",
                  "type": "Cars",
                  "uri": "Resources/CarSharing/Cars/49498",
                  "location": {
                    "latitude": 52.5271867,
                    "longitude": 13.3861633,
                    "system": "WGS_84"
                  },
                  "provider": "multiCity",
                  "availability": 100,
                  "operator": "Multicity",
                  "modFlag": "Modified"
                },
                {
                  "actions": [],
                  "id": 50280,
                  "description": "151683",
                  "type": "Cars",
                  "uri": "Resources/CarSharing/Cars/50280",
                  "location": {
                    "latitude": 52.5198967,
                    "longitude": 13.3961867,
                    "system": "WGS_84"
                  },
                  "provider": "multiCity",
                  "availability": 100,
                  "operator": "Multicity",
                  "modFlag": "Modified"
                }
              ]
            } 

## List of All Car Sharing Locations with Basic Info [/imp-endpoint/api/V1/Resources/CarSharing/All] 

This collection contains list of all available car sharing locations (both free-floating cars and/or car stations) 
with basic information and a URI to acquire more details.
In case of station-based cars, only the URI of the Car Sharing station is returned; in case of free-floating cars, the URI to the car itself.

The If-Modified-Since (optional) can be set to a specific date-time in order to request only resources modified after a particular date-time. Date time in HTTP date format for e.g. Wed, 09 Apr 2008 23:55:38 GMT

attribute | json data type | comments
--- | --- | ---
metadata | Object | List of service providers and the last update times and failures if any [{serviceAlias:"XXX",lastUpdateTime:dd-mm-yyyyThhmmssZ,messages:[]}]
--- | --- | ---
resources | Array | Array of resources
--- | --- | ---
actions | Array | 
id | Number | 
description | String | License ID or approximate location
type | String | 
uri | URI | URI
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider | String | 
availability | Double | Availability in percentage
operator | String | 
modFlag | Enum | Type of modification to resource [New / Modified / Relocated / Deleted]. This attribute is present only when the If-Modified-Since header is passed in the request

### Getting all car sharing locations [GET]
@testable

+ Request

    + Headers
        
            If-Modified-Since: Wed, 09 Apr 2008 23:55:38 GMT 

+ Response 200 (application/json)
    
    + Body
    
            {
              "metaData": [
                {
                  "serviceAlias": "flinkster",
                  "lastUpdateTime": "2014-07-25T11:30:33+05:30",
                  "messages": [
                    
                  ]
                },
                {
                  "serviceAlias": "car2Go",
                  "lastUpdateTime": "2014-07-25T11:30:28+05:30",
                  "messages": [
                    
                  ]
                },
                {
                  "serviceAlias": "driveNow",
                  "lastUpdateTime": "2014-07-25T11:30:30+05:30",
                  "messages": [
                    
                  ]
                },
                {
                  "serviceAlias": "citeeCar",
                  "lastUpdateTime": "2014-07-25T11:30:34+05:30",
                  "messages": [
                    
                  ]
                },
                {
                  "serviceAlias": "multiCity",
                  "lastUpdateTime": "2014-07-25T11:30:36+05:30",
                  "messages": [
                    
                  ]
                }
              ],
              "resources": [
                {
                  "actions": [
                    {
                      "name": "book",
                      "method": "POST",
                      "uri": "Resources/CarSharing/Stations/7695/Process?action=book"
                    }
                  ],
                  "id": 7695,
                  "description": "U-Bahnhof Senefelder Platz",
                  "type": "Stations",
                  "uri": "Resources/CarSharing/Stations/7695",
                  "location": {
                    "latitude": 52.53166159018624,
                    "longitude": 13.412632271647453,
                    "system": "WGS_84"
                  },
                  "provider": "flinkster",
                  "availability": 0,
                  "operator": "FlinksterDB"
                },
                {
                  "actions": [
                    {
                      "name": "book",
                      "method": "POST",
                      "uri": "Resources/CarSharing/Stations/7683/Process?action=book"
                    }
                  ],
                  "id": 7683,
                  "description": "U-Bahnhof Hermannplatz",
                  "type": "Stations",
                  "uri": "Resources/CarSharing/Stations/7683",
                  "location": {
                    "latitude": 52.48663380523992,
                    "longitude": 13.422980234026909,
                    "system": "WGS_84"
                  },
                  "provider": "flinkster",
                  "availability": 0,
                  "operator": "FlinksterDB"
                },
                {
                  "actions": [
                    {
                      "name": "book",
                      "method": "POST",
                      "uri": "Resources/CarSharing/Cars/7884/Process?action=book"
                    }
                  ],
                  "id": 7884,
                  "description": "B-GO2879",
                  "type": "Cars",
                  "uri": "Resources/CarSharing/Cars/7884",
                  "location": {
                    "latitude": 52.4701,
                    "longitude": 13.42044,
                    "system": "WGS_84"
                  },
                  "provider": "car2Go",
                  "availability": 100,
                  "operator": "Car2Go_Berlin"
                },
                {
                  "actions": [
                    {
                      "name": "book",
                      "method": "POST",
                      "uri": "Resources/CarSharing/Cars/7885/Process?action=book"
                    }
                  ],
                  "id": 7885,
                  "description": "B-GO2653",
                  "type": "Cars",
                  "uri": "Resources/CarSharing/Cars/7885",
                  "location": {
                    "latitude": 52.52848,
                    "longitude": 13.19156,
                    "system": "WGS_84"
                  },
                  "provider": "car2Go",
                  "availability": 100,
                  "operator": "Car2Go_Berlin"
                },
                {
                  "actions": [
                    {
                      "name": "book",
                      "method": "POST",
                      "uri": "Resources/CarSharing/Cars/8816/Process?action=book"
                    }
                  ],
                  "id": 8816,
                  "description": "Romeo",
                  "type": "Cars",
                  "uri": "Resources/CarSharing/Cars/8816",
                  "location": {
                    "latitude": 52.513024,
                    "longitude": 13.327073,
                    "system": "WGS_84"
                  },
                  "provider": "driveNow",
                  "availability": 100,
                  "operator": "DriveNow"
                },
                {
                  "actions": [
                    {
                      "name": "book",
                      "method": "POST",
                      "uri": "Resources/CarSharing/Cars/8817/Process?action=book"
                    }
                  ],
                  "id": 8817,
                  "description": "Kingsley",
                  "type": "Cars",
                  "uri": "Resources/CarSharing/Cars/8817",
                  "location": {
                    "latitude": 52.500411,
                    "longitude": 13.374263,
                    "system": "WGS_84"
                  },
                  "provider": "driveNow",
                  "availability": 100,
                  "operator": "DriveNow"
                },
                {
                  "actions": [
                    {
                      "name": "book",
                      "method": "POST",
                      "uri": "Resources/CarSharing/Cars/8818/Process?action=book"
                    }
                  ],
                  "id": 8818,
                  "description": "Inness",
                  "type": "Cars",
                  "uri": "Resources/CarSharing/Cars/8818",
                  "location": {
                    "latitude": 52.502916,
                    "longitude": 13.479554,
                    "system": "WGS_84"
                  },
                  "provider": "driveNow",
                  "availability": 100,
                  "operator": "DriveNow"
                },
                {
                  "actions": [
                    
                  ],
                  "id": 9323,
                  "description": "B-CC 4162",
                  "type": "Cars",
                  "uri": "Resources/CarSharing/Cars/9323",
                  "location": {
                    "latitude": 52.50404000000001,
                    "longitude": 13.47005,
                    "system": "WGS_84"
                  },
                  "provider": "citeeCar",
                  "availability": null,
                  "operator": "CiteeCar"
                },
                {
                  "actions": [
                    
                  ],
                  "id": 9324,
                  "description": "B-CC 1541",
                  "type": "Cars",
                  "uri": "Resources/CarSharing/Cars/9324",
                  "location": {
                    "latitude": 52.565338134765625,
                    "longitude": 13.420881271362305,
                    "system": "WGS_84"
                  },
                  "provider": "citeeCar",
                  "availability": null,
                  "operator": "CiteeCar"
                },
                {
                  "actions": [
                    
                  ],
                  "id": 9325,
                  "description": "B-CC 3392",
                  "type": "Cars",
                  "uri": "Resources/CarSharing/Cars/9325",
                  "location": {
                    "latitude": 52.521278381347656,
                    "longitude": 13.419211387634277,
                    "system": "WGS_84"
                  },
                  "provider": "citeeCar",
                  "availability": null,
                  "operator": "CiteeCar"
                },
                {
                  "actions": [
                    
                  ],
                  "id": 9467,
                  "description": "151601",
                  "type": "Cars",
                  "uri": "Resources/CarSharing/Cars/9467",
                  "location": {
                    "latitude": 52.5275867,
                    "longitude": 13.4586233,
                    "system": "WGS_84"
                  },
                  "provider": "multiCity",
                  "availability": 100,
                  "operator": "Multicity"
                },
                {
                  "actions": [
                    
                  ],
                  "id": 9468,
                  "description": "150554",
                  "type": "Cars",
                  "uri": "Resources/CarSharing/Cars/9468",
                  "location": {
                    "latitude": 52.5312183,
                    "longitude": 13.3188283,
                    "system": "WGS_84"
                  },
                  "provider": "multiCity",
                  "availability": 100,
                  "operator": "Multicity"
                },
                {
                  "actions": [
                    
                  ],
                  "id": 9469,
                  "description": "114075",
                  "type": "Cars",
                  "uri": "Resources/CarSharing/Cars/9469",
                  "location": {
                    "latitude": 52.4811767,
                    "longitude": 13.3154033,
                    "system": "WGS_84"
                  },
                  "provider": "multiCity",
                  "availability": 100,
                  "operator": "Multicity"
                }
              ]
            }

## List of free-floating Cars with Basic Info [/imp-endpoint/api/V1/Resources/CarSharing/Cars?lat={lat}&lng={lng}&radius={radius}&f_cars={fuelTypeJson}]

This collection contains a list of available free-floating cars in a specific area specified by query parameters (for free-floating car sharing only!).
Note: The area of interest can be defined as:

* a bounding circle (lat={lat}&lng={lng}&radius={radius})
* a bounding box (left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng})

The optional filter `f_cars` can be used to get cars with a specific `fuelType`

The If-Modified-Since (optional) can be set to a specific date-time in order to request only resources modified after a particular date-time. Date time in HTTP date format for e.g. Wed, 09 Apr 2008 23:55:38 GMT

attribute | json data type | comments
--- | --- | ---
metadata | Object | List of service providers and the last update times and failures if any [{serviceAlias:"XXX",lastUpdateTime:dd-mm-yyyyThhmmssZ,messages:[]}]
--- | --- | ---
resources | Array | Array of resources
--- | --- | ---
actions | Array | 
id | Number | car id
description | String | License ID or approximate location
type | String | "CarSharingCarDetails"
uri | URI | URI
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider | String | 
availability | Double | Svailability in percentage
operator | String | "Car2Go_Berlin" etc.
model | String | 
address | String | Street, city, etc.
licenseId | String | License ID
category | String | ENUM{"Fullsize", "Compact", "Smallsize", ... }
fuelType | String | electric vehicle ("ELECTRICITY") or petrol car ("PETROL")
fuelLevel | Double | Fuel level in percentage
imageLink | Link | link to the car image
modFlag | Enum | Type of modification to resource [New / Modified / Relocated / Deleted]. This attribute is present only when the If-Modified-Since header is passed in the request

### Getting free-floating Cars [GET] 
@testable

+ Parameters
    + lat (number, `52.52`) ... latitude value. Has example value.
    + lng (number, `13.39`) ... longitude value. Has example value.
    + radius (number, `3000`) ... radius value. Has example value.
    + fuelTypeJson (optional, string, `{"fuelType":"ELECTRICITY"}`) ... String `fuelTypeJson` fuel type json data. Example value `{"fuelType":"ELECTRICITY"}` or `{"fuelType":"PETROL"}`

+ Request

    + Headers
    
            If-Modified-Since: Wed, 09 Apr 2008 23:55:38 GMT     
        
        
+ Response 200 (application/json)

    + Body
    
            {
                "metaData": [
                    {
                        "serviceAlias": "flinkster",
                        "lastUpdateTime": "2014-12-16T10:25:02+01:00",
                        "messages": []
                    },
                    {
                        "serviceAlias": "car2Go",
                        "lastUpdateTime": "2014-12-16T10:24:59+01:00",
                        "messages": []
                    },
                    {
                        "serviceAlias": "citeeCar",
                        "lastUpdateTime": "2014-12-16T10:25:03+01:00",
                        "messages": []
                    },
                    {
                        "serviceAlias": "multiCity",
                        "lastUpdateTime": "2014-12-16T10:25:04+01:00",
                        "messages": []
                    },
                    {
                        "serviceAlias": "driveNow",
                        "lastUpdateTime": "2014-12-16T10:24:57+01:00",
                        "messages": []
                    }
                ],
                "resources": [
                    {
                        "actions": [],
                        "id": 50781,
                        "description": "B-MC 2463",
                        "type": "CarSharingCar",
                        "uri": "Resources/CarSharing/Cars/50781",
                        "location": {
                            "latitude": 52.526275,
                            "longitude": 13.3706283,
                            "system": "WGS_84"
                        },
                        "provider": "multiCity",
                        "availability": 100,
                        "operator": "Multicity",
                        "model": "Citroën C-Zero ",
                        "address": null,
                        "licenseId": "B-MC 2463",
                        "category": null,
                        "fuelType": "ELECTRICITY",
                        "fuelLevel": null,
                        "imageLink": "www.flinkster.de/common/gethashdata.php?uniquebid=dbc653cac35df2a7f854457e6c2d6339"
                    },
                    {
                        "actions": [],
                        "id": 50324,
                        "description": "B-MC 2594",
                        "type": "CarSharingCar",
                        "uri": "Resources/CarSharing/Cars/50324",
                        "location": {
                            "latitude": 52.5327567,
                            "longitude": 13.39542,
                            "system": "WGS_84"
                        },
                        "provider": "multiCity",
                        "availability": 100,
                        "operator": "Multicity",
                        "model": "Citroën C-Zero ",
                        "address": null,
                        "licenseId": "B-MC 2594",
                        "category": null,
                        "fuelType": "ELECTRICITY",
                        "fuelLevel": null,
                        "imageLink": "www.flinkster.de/common/gethashdata.php?uniquebid=eb6c05d7352c1ee9bf38ce2e6a1eada4"
                    }
                ]
            }
        
## Car with Detailed Info [/imp-endpoint/api/V1/Resources/CarSharing/Cars/{carId}]

A single car object with Detailed Information. 
The data structure of the response contains the attributes with the basic information and additionally the following attributes:

attribute | json data type | comments
--- | --- | ---
... | ... | ...
model | String | car model
name | String | car name
power | String | 
seatCount | Number | number of sits
doorCount | Number | number of doors
colour | String  | car colour
properties | Array | List of properties: "ABS" etc.
locationNote | String | 
operatorURI | URI | operator URI
fee | String | car costs per time unit

### Getting a specific car [GET] 
@nottestable

+ Parameters
    + carId (string, `203869`) ... String `carId` as retrieved through *[/imp-endpoint/api/V1/Resources/CarSharing/All?lat={lat}&lng={lng}&radius={radius}]* .

        
+ Response 200 (application/json)

    + Body
        
            {
              "actions": [
                    {
                        "name": "book",
                        "method": "POST",
                        "uri": "Resources/CarSharing/Cars/203869/Process?action=book"
                    }
                ],
                "id": 203869,
                "description": "B-GO4010",
                "type": "CarSharingCarDetails",
                "uri": "Resources/CarSharing/Cars/203869/",
                "location": {
                    "latitude": 52.51613,
                    "longitude": 13.41643,
                    "system": "WGS_84"
                },
                "provider": "car2Go",
                "availability": 100,
                "operator": "Car2Go_Berlin",
                "model": "smart fortwo",
                "address": {
                    "citycode": null,
                    "city": null,
                    "street": "Schicklerstraße 5, 10179 Berlin",
                    "houseno": null,
                    "district": null,
                    "region": null,
                    "country": null
                },
                "licenseId": "B-GO4010",
                "category": null,
                "fuelType": "ELECTRICITY",
                "fuelLevel": 85,
                "imageLink": null,
                "name": "smart fortwo",
                "power": null,
                "seatCount": null,
                "doorCount": null,
                "colour": null,
                "properties": [],
                "locationNote": null,
                "operatorURI": null,
                "fee": null
            }        
    
## List of Stations with Basic Info [/imp-endpoint/api/V1/Resources/CarSharing/Stations?lat={lat}&lng={lng}&radius={radius}&f_cars={fuelTypeJson}&operatorId={operatorId}]

This collection contains a list of car sharing stations in a specific area (for station-based car sharing) specified by the query parameters,
together with basic information and URI to acquire more details.
Note: The area of interest can be defined as:

* a bounding circle (lat={lat}&lng={lng}&radius={radius})
* a bounding box (left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng})

The optional filter `f_cars` can be used to get cars with a specific `fuelType`

The If-Modified-Since (optional) can be set to a specific date-time in order to request only resources modified after a particular date-time. Date time in HTTP date format for e.g. Wed, 09 Apr 2008 23:55:38 GMT

attribute | json data type | comments
--- | --- | ---
metadata | Object | List of service providers and the last update times and failures if any [{serviceAlias:"XXX",lastUpdateTime:dd-mm-yyyyThhmmssZ,messages:[]}]
--- | --- | ---
resources | Array | Array of resources within the search area
--- | --- | ---
actions | Array | 
id | Number | 
description | String | Approximate location
type | String | 
uri | URI | URI to request more details
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider | String | 
availability | Double | Availability in percentage
operator | String | 
operatorURI | String | 
operatorName | String | 
address | Object | {"cityCode": String, "city": String, "street": String, "houseNo": String, "district": String, "region": String, "country": String}
modFlag | Enum | Type of modification to resource [New / Modified / Relocated / Deleted]. This attribute is present only when the If-Modified-Since header is passed in the request 

### Getting car sharing station list [GET] 
@testable

+ Parameters
    + lat (number, `52.52`) ... latitude value. Has example value.
    + lng (number, `13.39`) ... longitude value. Has example value.
    + radius (number, `3000`) ... radius value. Has example value.
    + fuelTypeJson (optional, string, `{"fuelType":"ELECTRICITY"}`) ... String `fuelTypeJson` fuel type json data. Example value `{"fuelType":"ELECTRICITY"}` or `{"fuelType":"PETROL"}`
    + operatorId (optional, string, `FlinksterDB`) ... String `operatorId` operator id data. Has example value.

+ Request

    + Headers
    
            If-Modified-Since: Wed, 09 Apr 2008 23:55:38 GMT 
        
+ Response 200 (application/json)
            
    + Body
    
            {
                "metaData": [
                {
                  "serviceAlias": "flinkster",
                  "lastUpdateTime": "2014-12-12T14:24:04+01:00",
                  "messages": []
                },
                {
                  "serviceAlias": "car2Go",
                  "lastUpdateTime": "2014-12-12T14:23:58+01:00",
                  "messages": []
                },
                {
                  "serviceAlias": "driveNow",
                  "lastUpdateTime": "2014-12-12T14:23:51+01:00",
                  "messages": []
                },
                {
                  "serviceAlias": "citeeCar",
                  "lastUpdateTime": "2014-12-12T14:24:14+01:00",
                  "messages": []
                },
                {
                  "serviceAlias": "multiCity",
                  "lastUpdateTime": "2014-12-12T14:24:11+01:00",
                  "messages": []
                }
              ],
              "resources": [
                {
                  "actions": [
                    {
                      "name": "book",
                      "method": "POST",
                      "uri": "Resources/CarSharing/Stations/46874/Process?action=book"
                    }
                  ],
                  "id": 46874,
                  "description": "Caroline-Michaelis-Straße",
                  "type": "CarSharingStation",
                  "uri": "Resources/CarSharing/Stations/46874",
                  "location": {
                    "latitude": 52.533559809882156,
                    "longitude": 13.382519781589508,
                    "system": "WGS_84"
                  },
                  "provider": "flinkster",
                  "availability": 100,
                  "operator": "FlinksterDB",
                  "modFlag": "Modified",
                  "phoneNo": null,
                  "operatorURI": null,
                  "operatorName": "FlinksterDB",
                  "address": {
                    "citycode": "10115",
                    "city": "Berlin",
                    "street": "Caroline-Michaelis-Straße",
                    "houseno": "5-11",
                    "district": "Mitte",
                    "region": null,
                    "country": null
                  }
                }
              ]
            }  

## Station with Detailed Info [/imp-endpoint/api/V1/Resources/CarSharing/Stations/{stationId}]
A single car sharing station object with Detailed Information determined by a specific id.
The data structure of the response contains the attributes with the basic information and additionally the following attributes:

attribute | json data type | comments
--- | --- | ---
... | ... | ...
notes | String | 
services | Array | 
availableCars | Number | number of available cars

### Getting a specific station [GET] 
@nottestable

+ Parameters
    + stationId (string, `203869`) ... String `stationId` as retrieved through *[/imp-endpoint/api/V1/Resources/CarSharing/Stations?lat={lat}&lng={lng}&radius={radius}]* .
        
+ Response 200 (application/json)

    + Body
    
            {
                "actions": [
                    {
                        "name": "book",
                        "method": "POST",
                        "uri": "Resources/CarSharing/Stations/1634/Process?action=book"
                    }
                ],
                "id": 1634,
                "description": "Friedrichstr.",
                "type": null,
                "uri": "Resources/CarSharing/Stations/1634/",
                "location": {
                    "latitude": 52.5083274841,
                    "longitude": 13.3902387619,
                    "system": "WGS_84"
                },
                "provider": "FlinksterDB",
                "availability" : 100,
                "operator": "FlinksterDB",
                "phoneNo": null,
                "operatorURI": null,
                "operatorName": "FlinksterDB",
                "address": {
                    "citycode": "10117",
                    "city": "Berlin",
                    "street": "Friedrichstr.",
                    "houseno": "50-55",
                    "district": null,
                    "region": null,
                    "country": null
                },
                "notes": [
                    "Öffnungszeiten:\nMo-Fr: 7.00 - 19.00\nSa: 9.00 - 14.00\nSo: 9.00 - 13.00 "
                ],
                "services": null,
                "availableCars": 7
            }        

## List of Cars at a specific Station with Basic Info [/imp-endpoint/api/V1/Resources/CarSharing/Stations/{stationId}/Cars]
This collection contains a list of cars at a specific car sharing stations.

The If-Modified-Since (optional) can be set to a specific date-time in order to request only resources modified after a particular date-time.
Date time in HTTP date format for e.g. Wed, 09 Apr 2008 23:55:38 GMT

### Getting cars at a specific station [GET]
@nottestable

+ Parameters
    + stationId (string, `203869`) ... String `stationId` as retrieved through *[/imp-endpoint/api/V1/Resources/CarSharing/Stations?lat={lat}&lng={lng}&radius={radius}]*
    
+ Request

    + Headers
    
            If-Modified-Since: Wed, 09 Apr 2008 23:55:38 GMT 
        
+ Response 200 (application/json)
    
    + Body

            {
            "metaData": [
                {
                    "serviceAlias": "flinkster",
                    "lastUpdateTime": "2014-07-08T13:36:39+02:00",
                    "messages": []
                }
            ],
            "resources": [
                {
                    "actions": [
                        {
                            "name": "book",
                            "method": "POST",
                            "uri": "Resources/CarSharing/Stations/206470/Cars/207643/Process?action=book"
                        }
                    ],
                    "id": 207643,
                    "description": "Caroline-Michaelis-Straße",
                    "type": "CarSharingStationCarDetails",
                    "uri": "Resources/CarSharing/Stations/206470/Cars/207643",
                    "location": {
                        "latitude": 52.533559809882156,
                        "longitude": 13.382519781589508,
                        "system": "WGS_84"
                    },
                    "provider": "flinkster",
                    "availability": null,
                    "operator": "FlinksterDB",
                    "model": "Kleinwagen",
                    "address": {
                        "citycode": "10115",
                        "city": "Berlin",
                        "street": "Caroline-Michaelis-Straße",
                        "houseno": "5-11",
                        "district": "Mitte",
                        "region": null,
                        "country": null
                    },
                    "licenseId": null,
                    "category": null,
                    "fuelType": "DIESEL",
                    "fuelLevel": null,
                    "imageLink": null
                },
                {
                    "actions": [
                        {
                            "name": "book",
                            "method": "POST",
                            "uri": "Resources/CarSharing/Stations/206470/Cars/207644/Process?action=book"
                        }
                    ],
                    "id": 207644,
                    "description": "Caroline-Michaelis-Straße",
                    "type": "CarSharingStationCarDetails",
                    "uri": "Resources/CarSharing/Stations/206470/Cars/207644",
                    "location": {
                        "latitude": 52.533559809882156,
                        "longitude": 13.382519781589508,
                        "system": "WGS_84"
                    },
                    "provider": "flinkster",
                    "availability": null,
                    "operator": "FlinksterDB",
                    "model": "Mittelklasse",
                    "address": {
                        "citycode": "10115",
                        "city": "Berlin",
                        "street": "Caroline-Michaelis-Straße",
                        "houseno": "5-11",
                        "district": "Mitte",
                        "region": null,
                        "country": null
                    },
                    "licenseId": null,
                    "category": null,
                    "fuelType": "DIESEL",
                    "fuelLevel": null,
                    "imageLink": null
                }
            ]
            } 

## Book a free-floating car [/imp-endpoint/api/V1/Resources/CarSharing/Cars/{carId}/Process?action=book]

The data structure of the request contains the following attributes:

attribute | json data type | comments
--- | --- | ---
operator | String | Name of the operator
from | DateTime | Optional. Default value is current time
to | DateTime | Optional 

The data structure of the response has the following attributes:

attribute | json data type | comments
--- | --- | ---
confirmationId | String | 
comments | String | 

### Booking a car [POST]
@nottestable

+ Parameters
    + carId (string, `2`) ... String `carId` as retrieved through *[/imp-endpoint/api/V1/Resources/CarSharing/Cars?lat={lat}&lng={lng}&radius={radius}]* .


+ Request

        { 
            "operator": "flinkster",
            "from": "",
            "to": "",
            "userId": "4711/10" 
        }
    
        
+ Response 201 (application/json)

        {  
            "confirmationId": "1012020020",
            "comments": "Comments"
        } 

## Book a car at a specific station [/imp-endpoint/api/V1/Resources/CarSharing/Stations/{stationId}/Cars/{carId}/Process?action=book]

The data structure of the request contains the following attributes:

attribute | json data type | comments
--- | --- | ---
operator | String | Name of the operator
from | DateTime | Optional. Default value is current time
to | DateTime | Optional 

The data structure of the response has the following attributes:

attribute | json data type | comments
--- | --- | ---
confirmationId | String | 
comments | String | 

### Booking a car at a station [POST]
@nottestable

+ Parameters
    + stationId (string, `1`) ... String `stationId`
    + carId (string, `2`) ... String `carId` 


+ Request

        { 
            "operator": "car2go_berlin",
            "from": null,
            "to": null,
            "userId": "4711/10"  
        }
    
        
+ Response 201 (application/json)

        {  
            "confirmationId": "1012020020",
            "comments": "Comments"
        } 

## Book any car available at a station by specifying the car type [/imp-endpoint/api/V1/Resources/CarSharing/Stations/{stationId}/Process?action=book]

The data structure of the request contains the following attributes:

attribute | json data type | comments
--- | --- | ---
operator | String | Name of the operator
from | DateTime | Optional. Default value is current time
to | DateTime | Optional
type | Enum value | Allowed values: TBD

The data structure of the response has the following attributes:

attribute | json data type | comments
--- | --- | ---
confirmationId | String | 
comments | String | 

### Booking a car at a station [POST]
@nottestable

+ Parameters
    + stationId (string, `2`) ... String `stationId` as retrieved through *[/imp-endpoint/api/V1/Resources/CarSharing/Stations?lat={lat}&lng={lng}&radius={radius}]*

+ Request

        { 
            "operator": "car2go_berlin",
            "from": null,
            "to": null,
            "userId": "4711/10"   
        }
        
+ Response 201 (application/json)

        {  
            "confirmationId": "1012020020",
            "comments": "Comments"
        }         

# Group EV Charging
This is a group of all EV Charging related rest resources    
    
## List of EV Charging Stations with Basic Info [/imp-endpoint/api/V1/Resources/EVCharging/Stations?lat={lat}&lng={lng}&radius={radius}]
This collection contains a list of all electric vehicle (EV) charging stations in an area of interest specified by query parameters, 
together with geo location, name, and a URI to acquire more details.
Note: The area of interest can be defined as:

* a bounding circle (lat={lat}&lng={lng}&radius={radius})
* a bounding box (left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng})

The If-Modified-Since (optional) can be set to a specific date-time in order to request only resources modified after a particular date-time.
Date time in HTTP date format for e.g. Wed, 09 Apr 2008 23:55:38 GMT

attribute | json data type | comments
--- | --- | ---
metadata | Object | List of service providers and the last update times and failures if any [{serviceAlias:"XXX",lastUpdateTime:dd-mm-yyyyThhmmssZ,messages:[]}]
--- | --- | ---
resources | Array | Array of resources within the search area
--- | --- | ---
actions | Array | List of available actions on this resource
id | Number | Internal charging station identification numberg
description | String | Approximate location or parking garage operator
type | String | ="EVChargingStation" 
uri | URI | URI to request more details
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider |  String| Charging station operator (usually equals provider)
availability | Double | Availability in percentage
operator | String | Charging station provider (usually equals operator)
address | Object | 
plugTypes | Enum value | Type of the plug.
power | Number |  
modFlag | Enum | Type of modification to resource [New / Modified / Relocated / Deleted]. This attribute is present only when the If-Modified-Since header is passed in the request  

### Getting EV charging stations [GET]
@testable

+ Parameters
    + lat (number, `52.52`) ... latitude value. Has example value.
    + lng (number, `13.39`) ... longitude value. Has example value.
    + radius (number, `1000`) ... longitude value. Has example value.
    
+ Request

    + Headers
    
            If-Modified-Since: Wed, 09 Apr 2008 23:55:38 GMT 
        
+ Response 200 (application/json)
    
        {
            "metaData": [
                {
                    "serviceAlias": "vattenfall",
                    "lastUpdateTime": "2014-07-10T12:06:09+02:00",
                    "messages": []
                }
            ],
            "resources": [
                {
                    "actions": [],
                    "id": 268355,
                    "description": "Conti",
                    "type": "EVChargingStation",
                    "uri": "Resources/EVCharging/Stations/268355",
                    "location": {
                        "latitude": 52.51474,
                        "longitude": 13.38639,
                        "system": "WGS_84"
                    },
                    "provider": "vattenfall",
                    "availability": 0,
                    "operator": "Vattenfall",
                    "modFlag": "Relocated",
                    "address": {
                        "citycode": "10117",
                        "city": "Berlin",
                        "street": "Glinkastr.",
                        "houseno": "38",
                        "district": null,
                        "region": null,
                        "country": null
                    },
                    "plugTypes": [
                        "Type2Outlet",
                        "TypeFSchuko"
                    ],
                    "power": {
                        "unit": "KiloWatt",
                        "value": 11040
                    }
                }
            ]
        }

## List of All EV Charging Stations with Basic Info [/imp-endpoint/api/V1/Resources/EVCharging/Stations/All]
This collection contains a list of all electric vehicle (EV) charging stations.

The If-Modified-Since (optional) can be set to a specific date-time in order to request only resources modified after a particular date-time.
Date time in HTTP date format for e.g. Wed, 09 Apr 2008 23:55:38 GMT

attribute | json data type | comments
--- | --- | ---
metadata | Object | List of service providers and the last update times and failures if any [{serviceAlias:"XXX",lastUpdateTime:dd-mm-yyyyThhmmssZ,messages:[]}]
--- | --- | ---
resources | Array | Array of resources within the search area
--- | --- | ---
actions | Array | List of available actions on this resource
id | Number | Internal charging station identification numberg
description | String | Approximate location or parking garage operator
type | String | ="EVChargingStation" 
uri | URI | URI to request more details
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider |  String| Charging station operator (usually equals provider)
availability | Double | Availability in percentage
operator | String | Charging station provider (usually equals operator)
address | Object | 
plugTypes | Enum value | Type of the plug.
power | Number |  
modFlag | Enum | Type of modification to resource [New / Modified / Relocated / Deleted]. This attribute is present only when the If-Modified-Since header is passed in the request  

### Getting EV charging stations [GET]
@testable

+ Request

    + Headers
    
            If-Modified-Since: Wed, 09 Apr 2008 23:55:38 GMT 
        
+ Response 200 (application/json)
    
        {
            "metaData": [
                {
                    "serviceAlias": "vattenfall",
                    "lastUpdateTime": "2014-08-11T14:54:39+02:00",
                    "messages": []
                },
                {
                    "serviceAlias": "hubject",
                    "lastUpdateTime": "2014-08-11T05:17:50+02:00",
                    "messages": []
                }
            ],
            "resources": [
                {
                    "actions": [],
                    "id": 53009,
                    "description": "",
                    "type": "EVChargingStationDetails",
                    "uri": "Resources/EVCharging/Stations/EVChargingStationDetails/53009",
                    "location": {
                        "latitude": 52.43498,
                        "longitude": 13.43448,
                        "system": "WGS_84"
                    },
                    "provider": "vattenfall",
                    "availability": 100,
                    "operator": "Vattenfall"
                },
                {
                    "actions": [],
                    "id": 49313,
                    "description": "TOTAL-Tankstelle",
                    "type": "EVChargingStationDetails",
                    "uri": "Resources/EVCharging/Stations/EVChargingStationDetails/49313",
                    "location": {
                        "latitude": 52.5481579,
                        "longitude": 13.4675685,
                        "system": "WGS_84"
                    },
                    "provider": "vattenfall",
                    "availability": 100,
                    "operator": "Vattenfall"
                }
            ]
        }

## EV Charging Station with Detailed Info [/imp-endpoint/api/V1/Resources/EVCharging/Stations/{stationId}]

A single charging station object with Detailed Information. 
The data structure of the response contains the attributes with the basic information and additionally the following attributes:

attribute | json data type | comments
--- | --- | ---
... | ... | ...
chargingStationType | String |  
managedChargeable | Boolean |  
owner | String |  
plugTypes | Enum value | Type of the plug.
power | Number |  
voltage | Number |  
chargingPoints |  |  
properties |  |  
units | EVChargingUnit | Details of EV Charging units

### Getting a specific charging station [GET] 
@nottestable

+ Parameters
    + stationId (string, `203869`) ... String `stationId` as retrieved through *[/imp-endpoint/api/V1/Resources/EVCharging/Stations?lat={lat}&lng={lng}&radius={radius}]*

        
+ Response 200 (application/json)

            {
                "actions": [],
                "id": 238936,
                "description": "Charging Station RWE Effizienz",
                "type": "EVChargingStationDetails",
                "uri": "Resources/EVCharging/Stations/238936/",
                "location": {
                    "latitude": 52.519231,
                    "longitude": 13.390489,
                    "system": "WGS_84"
                },
                "provider": "hubject",
                "availability": 0,
                "operator": "Hubject",
                "address": {
                    "citycode": "10117",
                    "city": "Berlin",
                    "street": "Planckstr.",
                    "houseno": "4",
                    "district": null,
                    "region": "11",
                    "country": "DE"
                },
                "plugTypes": [
                    "Type2Outlet"
                ],
                "power": null,
                "chargingStationType": null,
                "managedChargeable": null,
                "owner": null,
                "voltage": null,
                "properties": null,
                "numberOfUnits": 2,
                "availableUnits": 0,
                "units": [
                    {
                        "description": "+49*809*010*150109",
                        "state": "IN_USE",
                        "plugType": "Type2Outlet"
                    },
                    {
                        "description": "+49*809*010*150108",
                        "state": "IN_USE",
                        "plugType": "Type2Outlet"
                    }
                ]
            }


# Group Ticketing
This is a group of all handy ticketing related rest resources.
    
## Available Tickets [/imp-endpoint/api/V1/Resources/Ticketing/Tickets]    
This collection contains a list of available products (tickets) for specified origin and destination. Both are public transport stations and are identified by `{pointId}`. 
PointId can be retrieved using `GET /imp-endpoint/api/V1/Resources/PublicTransport/Stations`

The data structure of the request:

attribute | json data type | comments
--- | --- | ---
origin | Object | Point id and address string
destination | Object | Point id and address string
viaPoints | Object | List of geo locations the route should pass
numberOfTickets | Object | Number of tickets
ticketingCategory | String | Specified zone. Possible values: B0, B1, B2, B3


The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
actions | Array | List of available actions on this resource (buy/confirm)
id | Number | Resource id
description | String | 
type | String | 
uri | URI | URI to request more details
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider | String | 
operator | String | Name of Ticket Operator
tariffText | String | Contains Zone and Validity inforation
tariffInformation | String | Conditions applied for ticket
price | double | Price of ticket
currency | String | Currency

Parts of the data structure might be omitted if the information is not available. 
    
### Getting available tickets [GET]
@nottestable
    
+ Request

    + Body
    
            { 
             "origin": { 
             "id": "130", 
             "address": "Dresden Hauptbahnhof"
             },
             "destination": { 
             "id": "130", 
             "address": "Dresden Postplatz" 
             },
             "numberOfTickets": "1",
             "ticketingCategory": "B0",
             "viaPoints": []
            }
        
+ Response 200 (application/json)

    + Body
    
            {
                [
                    {
                        "actions": [
                            {
                                "name": "buy",
                                "method": "POST",
                                "uri": "Resources/Ticketing/Tickets/{resourceId}/Process?action=buy"
                            }
                        ],
                        "id": {resourceId},
                        "description": null,
                        "type": null,
                        "uri": "Resources/Ticketing/Tickets/157",
                        "location": null,
                        "provider": null,
                        "operator": "handyticket",
                        "tariffText": "DVB VVO-Einzelfahrt normal Preisstufe 1 für Zone Dresden gültig 18.11.13 12:21 Uhr bis 13:21 Uhr.",
                        "tariffInformation": "Gilt in der angegebenen Tarifzone; max. 1 Std.",
                        "price": 2.2,
                        "currency": "EUR"
                    }
                ]
            }

## Buy a Ticket [/imp-endpoint/api/V1/Resources/Ticketing/Tickets/{id}/Process?action=buy]    
The response contains details of a bought ticket, identified by {ticketIds} and {ticketContent} 

The data structure of the request body:

attribute | json data type | comments
--- | --- | ---
name | String | Name of Ticket Operator
userId | String | Point id and address string
password | String | Password for buying ticket

The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
actions | Array | List of available actions on this resource (confirm)
processId | Number | BPMN process id
confirmation | Object | Buy ticket response data


confirmation contains following fileds:

attribute | json data type | comments
--- | --- | ---
requestId | String | Resource id received while initiating the booking
ticketIds | Array | Array of ticket ids 
ticketContent | Base64Binary | Content of Ticket
    
### Buying a ticket [POST]
@nottestable

+ Parameters
    + id (string, `9347`) ... String `id` ticket id value.
    
+ Request

    + Headers
        
            userToken: {someUserToken} 

    + Body
    
            {
                "operator": {
                    "name": "handyticket",
                    "userId": "01805006013",
                    "password": "7555"
                }
            }
        
+ Response 201 (application/json)

    + Body
    
            {
                "actions": [
                    {
                        "name": "confirm",
                        "method": "PUT",
                        "uri": "Processes/{processId}?action=confirm"
                    }
                ],
                "processId": {processId},
                "confirmation": {
                    "featureType": "BUY",
                    "confirmationId": null,
                    "confirmationData": {
                        "requestId": "{resourceid}"
                        "ticketIds": [
                            "274946704480125"
                        ],
                        "ticketContent": "UEQ5NGJXd2dkbVZ5YzJsdmJqMGlNUzR3SWlCbGJtTnZaR2x1WnowaVZWUkdMVGdpUHo0TkNqeDBhV15yWlhSRmNuZGxjbUp6VUhKdmVtVnpjMUpsYzNCdmJuTmxQZzBLSUNBOGNISmxhWE0rTWl3eU1Ed3ZjSEpsYVhNK0RRb2dJRHgzWVdWb2NuVnVaejVGVlZJOEwzZGhaV2h5ZFc1blBnMEtJQ0E4WVdkVVpYaDBQakY0SUVSV1FpQldWazh0UldsdWVtVnNabUZvY25RZ2JtOXliV0ZzSUZCeVpXbHpjM1IxWm1VZ01TQm13N3h5SUZwdmJtVWdSSEpsYzJSbGJpQm53N3hzZEdsbklERXpMakV4TGpFeklEQTFPalV6SUZWb2NpQmlhWE1nTURZNk5UTWdWV2h5TGp3dllXZFVaWGgwUGcwS0lDQThiV1Z6YzJGblpTQjBlWEJsUFNKM1lYSnVhVzVuSWo0OEwyMWxjM05oWjJVK0RRb2dJRHh1ZFhSNlpYSWdMejROQ2lBZ1BHSmxjbVZqYUhScFozVnVaMlZ1UGcwS0lDQWdJRHhpWlhKbFkyaDBhV2QxYm1jK0RRb2dJQ0FnSUNBOGMzUmhkSFZ6UGpBOEwzTjBZWFIxY3o0TkNpQWdJQ0FnSUR4MGVYQStNVHd2ZEhsd1BnMEtJQ0FnSUNBZ1BIQjJQall3TmpBOEwzQjJQZzBLSUNBZ0lDQWdQSEJ5YVcxaFpYSkxkbkErTmpBeE16d3ZjSEpwYldGbGNrdDJjRDROQ2lBZ0lDQWdJRHh6Wld0MWJtUmhaWEpMZG5BK05qQXhNend2YzJWcmRXNWtZV1Z5UzNad1BnMEtJQ0FnSUNBZ1BIQnliMlIxYTNSRGIyUmxQakU4TDNCeWIyUjFhM1JEYjJSbFBnMEtJQ0FnSUNBZ1BHZGxZbWxsZEhOSGRXVnNkR2xuYTJWcGRENHdQQzluWldKcFpYUnpSM1ZsYkhScFoydGxhWFErRFFvZ0lDQWdJQ0E4ZW1WcGRFZDFaV3gwYVdkclpXbDBQakE4TDNwbGFYUkhkV1ZzZEdsbmEyVnBkRDROQ2lBZ0lDQWdJRHh1ZFhSNlpYSlVlWEErTUR3dmJuVjBlbVZ5Vkhsd1BnMEtJQ0FnSUNBZ1BITjBZWEowV205dVpUNHhNRHd2YzNSaGNuUmFiMjVsUGcwS0lDQWdJQ0FnUEd0dmJXWnZjblErTVR3dmEyOXRabTl5ZEQ0TkNpQWdJQ0FnSUR4eGRXRnNhWFJoWlhRK01Ud3ZjWFZoYkdsMFlXVjBQZzBLSUNBZ0lDQWdQR0psYzJOb2NtVnBZblZ1Wno1RVZrSWdWbFpQTFVWcGJucGxiR1poYUhKMElHNXZjbTFoYkNCUWNtVnBjM04wZFdabElERWdac084Y2lCYWIyNWxJRVJ5WlhOa1pXNGdaOE84YkhScFp5QXhNeTR4TVM0eE15QXdOVG8xTXlCVmFISWdZbWx6SURBMk9qVXpJRlZvY2k0OEwySmxjMk5vY21WcFluVnVaejROQ2lBZ0lDQWdJRHgwWVhKcFptbHVabTgrUjJsc2RDQnBiaUJrWlhJZ1lXNW5aV2RsWW1WdVpXNGdWR0Z5YVdaNmIyNWxPeUJ0WVhndUlERWdVM1JrTGp3dmRHRnlhV1pwYm1adlBnMEtJQ0FnSUNBZ1BITnBZMmhsY21obGFYUnpUV1Z5YTIxaGJENUZUakV0TVRBdE1UTXhNVEExTlRNS1VDb3FNekV5TXpFeU16aDJDazF2ZEdsMklEUXhPVFV6TlRNM05qY0tMUzFVUlZOVUxTMVVTVU5MUlZRdExRbzhMM05wWTJobGNtaGxhWFJ6VFdWeWEyMWhiRDROQ2lBZ0lDQWdJRHhpWVhKamIyUmxQbWxXUWs5U2R6QkxSMmR2UVVGQlFVNVRWV2hGVldkQlFVRkpORUZCUVVOUFEwRk5RVUZCUkZGSk9FRTJRVUZCUVVKc1FrMVdSVmd2THk4NFFVRkJRbFozZEU0clFVRkJSVFZGYkVWUlZsSTBNblV5WXpJeU4ycE5RWGhGYkdZdkx6WlhNVkppUXpKU05UbEVjR3NyWTJoQ1ZHSlpTa3haT0hScGFHVm9jVTl6TVRsbVppdDJjamRtYmpJNVpuUTFaSEk1WkRNdk1TdDJZaXQyYmpWNlpsZ3laR051SzNodU4wVmtkSEpKU25nclkyOVdNRzV1ZDA1MlRVODBMMjR2WlVsMEwwRmtaSHA0UlU5TVoyNUJSREozWlhWcVVFZEhZMFV4Y1ZBeU1pdHZNM1EwS3pkbWRUUmxXRVJQVGpBdkwzazBUbnB0ZEhveFlWQnphMVpaVFRoR2VrbGlUbkJzZFZCaVMwMUdkMlZ1VERkMGRYTkxZM2hVYTNReWJGWkljbTFQZHpaT0szVktaMnhQV0U5VWJFZFhjbnB1UWxOeFVXVnpSbnBuV0daSVowMU5PVVJMWlRaeGRUWTRkWFYxY1VRM2MySTNORXg0T1M5UGNTc3ZkVVpHWjI1SVJqTnhaR3RQY21rMk4zUjFkMDlsU1RsV2IyNTNSRkUwWm1GR1YxTkNXVzByV2t0Vk1FWlZiME0yVUVJM0wwOUtaM3BOV2pKbGVua3JjMDkyTkdGWEt6RnJWM2xZZW5OT1JHaHRabmd2YldWVWRtNVJkRXBVU2tsSk5tSkViMDU2YkdsNE0yZFpRMHRHU1djMGNsSlRjVlJ5UWs4eWFrWlBSVXA0TlhOMWVsVmhVbTR6VFVaRlpGSllNRWxTTlVGSmFFMVFiWGd4VUdjM016STJOa1pOVFVsdFJuZGxhMHBsUm5sUFZubEVlRnB1V0hsM1prczRVMFY0ZFhkTlJHaEZha1pEY1RsV04yZGFSbEJzT0UxdVJtUkNiMk50Tmt0bGRVNVBVVkpKZHpSM1kxTnRXRVpNWlV0RWFXTkJSbEZFY0VaVGFUQjZRbXN2YmpBMU9VOUxlREZQWjNoalJEYzRhbk5RY0RSWk1sTkxVM0E0VDBsRmQzQjZaVlo2ZEhWWldWaERTVzVxV25FeGMzUXJUV3MxTWtOV1RsRkZjbUk0WTFScGRHUkdPRk16YWtKRk9XdFRjVXB0TlVjeFIwRmFTR2RsYm14cFVtTjNiRmhwYmpST2NGUXlhM0JuUVhsQ1MxRnZUM1EwWlZsdmNYcEZTRVJsU25sRFNIZFRUREJ6VTBsT1ZFb3lhRXRKWlc1NmVWbFlNakZKTTBwWE4wTmxSMFJvT1c5bVpWVnhObHBWU0ZSNlJGcEljVUY1VVZBeFQzY3ZRMWxZUzFKcGJERjVRMGd5YVhKaWJsZFJlbGR0ZUZkR2R6VnJVMEpEY0djclMxWTBVVGxqYkhWaVQwRkRNbmR0UW5kNVduQmtTMWR1TkVaUGVtbEtjM1JzVG1scmQyRkZWMVZETDJKb1FuZFRTM05XWTNkclFsQTVkRVpETkVWNlEwSnVXbTR2VW5scVkzRXlWWEJDY3k5U1EwVm9ZMDFwY0dOWlNrWTBTbmhsYjAxWVRVeG9UMU55ZVVFME0wWjZNSFJJVW1oVk5EWkxTVFphTmtvNFpWTkNiMlJHUTI0d05VODNia2xXVEN0V1VUbDNWMkZJTkRWRFRUWklNek5HSzNnNWVqZHNUVFUzVnpKcFpXTkhiMEpHTmtabFJrcDRaUzl1ZFhvemJWWTBabE5zWW5jMWMwUk9jMU56UTBScVZWaHdOVVp1WWpNMWN6QlVkakJvWmpaWGNsQlJTbWM0VDJ4NlRqTnhWMmRRUVdwU2FHc3dTVWxUSzJ0M1QwSTBWMDlVYm5kcFpreHJNVWRXTjNjeVVrZDNTbTFUY1RSdGRXMHdjMkp0ZUZseGFWVjBlVWRuWmtoRFQyVTNZWEJ4YjJKck9HZHhSR2RYTUZWTldVaEhkRFJ0VTNsTGIyOHlZazlOYkhCWFZIRmhRMWxsYTB3MVlrVnpOamwzVFhOdVJHaExjSGhaSzBGM1EyUkJXRXMxYldkdFZGbG1kMk5GWVhCalJYaGpUSEo0YzI5NVlXRmFXa3BEYlRKRlJFMXJRbE53UTBsblkwNTViVXhWYlhOd1lrVnBWVlJ1YlRoVVVGcFhNWEJqUzJkb05YUkpjbTkzV2xsM1IyVkhNRVpRWmxKU1JUSkJRVFJZT0hrMU4xaFdiM0Y2YlZJMFRqSnphSEkyVEdkMVJXcExUbTlMVWl0SGIyMWxlV1pwY1d4M2NFUk5Oa2d6TTJ4dVpuaGhXSFZ3TWxGek5WbDBNRGM1VnpocVFURnNkM0pJVWtkTmEyVkhTR0ZyYjJkRFNUaFhPWE5hUVVob01YVnNURWhhTWtOYVJWaFJWVGQyV1hKdlYwSlpaRVphWWpaU1ltdHZVV1ZQZGtKMFIxY3hRbHByZDA5SFUzbHlaMmxpYUZJMVZEQnFWMHg2YkhOMVIwRlFTRlZ6Y0ZvNVIwSmljQ3MyVEZGaFdWbFJVREJXUVVsak0wRlZOME5QYmk5ek5WQjRaRXBKUTBOdGVrRTBka1ZJVTFKYU5WUkJOVXB2Uldwa2RHRllhRWgzWlVoNWFFUmpNR1ZWZGtGcmVFWnhTMWhEUTJWMFFrNU5XRU5KYlcxWFFqUlRVMFI0YlROallYaEpURWs0WjNkUFExbG5TWGh1YlV4TGVUVXlNRUl4YkRZMlFqVjJVbmhQUlhoQk9HdFpaak5wUW05UU1IWnBlbFY0TWtWeWJIZG1SbEJWZGtremNHNWxPVGsyYTBOclNHZGlTSFExY1N0MU5tMVJURzVYTTFWa2NHOXBSRkUwYkhCUGVFOUllbUZXTUVkMWEwRjZXSEZXTjJOR0wyOXZia0VyTHpoNFpqbEVkRTlLVEd4emQwMXpObVJMT0hSRmREazVkV2x2VEdwTVZtNHZjVkpKYW5sTGJEaG1iR05YWlRGQlIxVllRalJoTjJFeGFqbGhZWEJKTW5weVNIZFRiRGhpUWl0UlpXcFVRMWx3Vm1aMlEwZFJRVUZCUVVKS1VsVTFSWEpyU21kblp6MDlQQzlpWVhKamIyUmxQZzBLSUNBZ0lDQWdQR0psY21WamFIUnBaM1Z1WjNORVlYUmxQakl3TVRNdE1URXRNVE5VTURVNk5UTTZNakVyTURFd01Ed3ZZbVZ5WldOb2RHbG5kVzVuYzBSaGRHVStEUW9nSUNBZ0lDQThaM1ZsYkhScFoydGxhWFJ6UW1WbmFXNXVQakl3TVRNdE1URXRNVE5VTURVNk5UTTZNakFyTURFd01Ed3ZaM1ZsYkhScFoydGxhWFJ6UW1WbmFXNXVQZzBLSUNBZ0lDQWdQR2QxWld4MGFXZHJaV2wwYzBWdVpHVStNakF4TXkweE1TMHhNMVF3TmpvMU16b3lNQ3N3TVRBd1BDOW5kV1ZzZEdsbmEyVnBkSE5GYm1SbFBnMEtJQ0FnSUNBZ1BHWnZjbTFoZEhSbFpGQnlaV2x6UGpJc01qQWdSVlZTUEM5bWIzSnRZWFIwWldSUWNtVnBjejROQ2lBZ0lDQWdJRHgzWVdWb2NuVnVaejR1UEM5M1lXVm9jblZ1Wno0TkNpQWdJQ0FnSUR4cmIyNTBjbTlzYkdWMWNuTkRiMlJsUGtWT01TMHhNQzB4TXpFeE1EVTFNend2YTI5dWRISnZiR3hsZFhKelEyOWtaVDROQ2lBZ0lDQWdJRHhyYjI1MGNtOXNiRzFsWkdsMWJUNVFLaW96TVRJek1USXpPSFk4TDJ0dmJuUnliMnhzYldWa2FYVnRQZzBLSUNBZ0lDQWdQSFJoWjJWelEyOWtaVDVOYjNScGRqd3ZkR0ZuWlhORGIyUmxQZzBLSUNBZ0lDQWdQSFJwWTJ0bGRFbEVQakkzTkRrME5qY3dORFE0TURFeU5Ud3ZkR2xqYTJWMFNVUStEUW9nSUNBZ0lDQThjMmxuYm1GMGRYSmxQaTB0VkVWVFZDMHRWRWxEUzBWVUxTMDhMM05wWjI1aGRIVnlaVDROQ2lBZ0lDQThMMkpsY21WamFIUnBaM1Z1Wno0TkNpQWdQQzlpWlhKbFkyaDBhV2QxYm1kbGJqNE5Dand2ZEdsamEyVjBSWEozWlhKaWMxQnliM3BsYzNOU1pYTndiMjV6WlQ0TkNnMEs="
                    }
                }
            }

## Confirm ticket delivery [/imp-endpoint/api/V1/Processes/{processId}]    
The response contains details of a bought ticket, identified by {ticketIds} and {ticketContent} 

The data structure of the request body:

attribute | json data type | comments
--- | --- | ---
requestId | String | Resource id
ticketIds | String | Tickets ids for confirmation
operator | String | Name of Ticket Operator

The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
actions | Array | List of available actions on this resource (confirm)
processId | Number | BPMN process id
confirmation | Object | Confirm ticket response data


confirmation contains following fileds:

attribute | json data type | comments
--- | --- | ---
featureType | String | Feature type
confirmationId | String | 
confirmationData | Object | Response of confirm ticket request

confirmationData contains following fileds:

attribute | json data type | comments
--- | --- | ---
confirmed | Boolean | Value indicating success/failure
    
### Confirming a ticket delivery [PUT]
@nottestable

+ Parameters
    + processId (string, `9347`) ... String `id` - BPMN process id
    
+ Request

    + Headers
        
            userToken: {someUserToken} 

    + Body
    
            {
              "requestId": "{resourceId}",
              "ticketIds": [
                            "274946704480125"
                           ],
               "operator": {
                    "name": "handyticket"        
                }
            }
        
+ Response 200 (application/json)

    + Body
    
            {
                "process": {
                    "actions": [],
                    "processId": "{processId}",
                    "confirmation": {
                        "featureType": "CONFIRM",
                        "confirmationId": null,
                        "confirmationData": {
                            "confirmed": true
                        }
                    }
                }
            }

# Group Parking
This is a group of all parking related rest resources. Parking Garages & On-street Paring Vacancies
    
## Parking Garages with Basic Info [/imp-endpoint/api/V1/Resources/Parking/Garages?lat={lat}&lng={lng}&radius={radius}&f_garages={categoryJson}]  
This collection contains a list of all parking garages in an area of interest specified by query parameters together with an URI to acquire more details. Parking garages can be filtered by category.
Note: The area of interest can be defined as:

* a bounding circle (lat={lat}&lng={lng}&radius={radius})
* a bounding box (left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng})

The If-Modified-Since (optional) can be set to a specific date-time in order to request only resources modified after a particular date-time.
Date time in HTTP date format for e.g. Wed, 09 Apr 2008 23:55:38 GMT

The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
metadata | Object | List of service providers and the last update times and failures if any [{serviceAlias:"XXX",lastUpdateTime:dd-mm-yyyyThhmmssZ,messages:[]}]
--- | --- | ---
resources | Array | Array of resources within the search area
--- | --- | ---
actions | Array | List of available actions on this resource (book, cancel, etc.)
id | Number | Internal parking garage identification number
description | String | Approximate location
type | String | (="ParkingGarage")
uri | URI | URI to request more details
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  } 
provider | String | Parking service provider (usually equals operator)
availability | Double | Availability in percentage
operator | String | Parking space operator (usually equals provider)
totalnumber | Object | Number of lots for different categories { "handicappedOnly":Int, "womenOnly":Int, "others":Int }
lottype | Enum | Type of garage {"Parkhaus", "Parkzone", "Tiefgarage", "Parkplatz"} 
modFlag | Enum | Type of modification to resource [New / Modified / Relocated / Deleted]. This attribute is present only when the If-Modified-Sinceodified-Since header is passed in the request 

Parts of the data structure might be omitted if the information is not available. 
    
### Getting parking garages [GET]
@testable

+ Parameters
    + lat (optional, number, `52.52`) ... latitude value. Has example value.
    + lng (optional, number, `13.39`) ... longitude value. Has example value.
    + radius (optional, number, `10000`) ... longitude value. Has example value.
    + categoryJson (optional, string, `{"category": ["P%2BR"]}`) ... String `categoryJson` category json data, containing a list of possible category values conbined by OR. Example value `{"category":["P%2BR"]}` or `{"category":["P"]}`, P%2BR stands for P+R

    
+ Request

    + Headers
    
            If-Modified-Since: Wed, 09 Apr 2008 23:55:38 GMT 
        
+ Response 200 (application/json)   

        {
            "metaData": [
                {
                    "serviceAlias": "vmzParking",
                    "lastUpdateTime": "2014-12-16T10:14:46+01:00",
                    "messages": []
                },
                {
                    "serviceAlias": "city2eParking",
                    "lastUpdateTime": "2014-12-16T10:35:46+01:00",
                    "messages": []
                },
                {
                    "serviceAlias": "parkUParking",
                    "lastUpdateTime": "2014-12-16T10:35:46+01:00",
                    "messages": []
                }
            ],
            "resources": [
                {
                    "actions": [
                        {
                            "name": "consume",
                            "method": "POST",
                            "uri": "Resources/Parking/Garages/50368/Process?action=consume"
                        }
                    ],
                    "id": 50368,
                    "description": "P+R Alt-Mariendorf (U)",
                    "type": "ParkingGarage",
                    "uri": "Resources/Parking/Garages/50368",
                    "location": {
                        "latitude": 52.439266204834,
                        "longitude": 13.3900337219238,
                        "system": "WGS_84"
                    },
                    "provider": "vmzParking",
                    "availability": null,
                    "operator": "PR",
                    "totalnumber": {
                        "others": 125,
                        "handicappedOnly": null,
                        "womenOnly": null
                    },
                    "lottype": null
                },
                {
                    "actions": [
                        {
                            "name": "consume",
                            "method": "POST",
                            "uri": "Resources/Parking/Garages/50050/Process?action=consume"
                        }
                    ],
                    "id": 50050,
                    "description": "P+R Tempelhof (S + U)",
                    "type": "ParkingGarage",
                    "uri": "Resources/Parking/Garages/50050",
                    "location": {
                        "latitude": 52.4693984985352,
                        "longitude": 13.3851003646851,
                        "system": "WGS_84"
                    },
                    "provider": "vmzParking",
                    "availability": null,
                    "operator": "PR",
                    "totalnumber": {
                        "others": 70,
                        "handicappedOnly": null,
                        "womenOnly": null
                    },
                    "lottype": null
                },
                {
                    "actions": [
                        {
                            "name": "consume",
                            "method": "POST",
                            "uri": "Resources/Parking/Garages/50399/Process?action=consume"
                        }
                    ],
                    "id": 50399,
                    "description": "P+R Heidelberger Platz (S + U)",
                    "type": "ParkingGarage",
                    "uri": "Resources/Parking/Garages/50399",
                    "location": {
                        "latitude": 52.4807777404785,
                        "longitude": 13.3121109008789,
                        "system": "WGS_84"
                    },
                    "provider": "vmzParking",
                    "availability": null,
                    "operator": "PR",
                    "totalnumber": {
                        "others": 140,
                        "handicappedOnly": null,
                        "womenOnly": null
                    },
                    "lottype": null
                }
            ]
        }


## Parking Garage with Detailed Info [/imp-endpoint/api/V1/Resources/Parking/Garages/{id}]

A single parking garage object with Detailed Information. 
The data structure of the response contains the attributes with the basic information and additionally the following attributes:

attribute | json data type | comments
--- | --- | ---
... | ... | ...
address | Object | Address {"citycode": String, "city": String, "street": String, "houseno": String }
pricing | String | Price structure 
payment | Array | Payment options {COINPAY, BANKNOTEPAY, BANKCARDPAY, CREDICARDPAY, PREPAIDCARDPAY, PAYCARDPAY, DEBITPAY}
category | Enum | P - parking, P+R park and ride, etc. { "P+R","B+R", "P", ... } 
openingHours | String | Opening hours
bookable | Boolean |  
heightLimit | Object | Height limit { "value": Number, "unit": String } 
occupancyRate | Number | Occupany rate in percent (real time data) 
allowedStay | Object | Allowed stay { "value": Number, "unit": String } 
generalInformations | String |
restrictions | Array | Usage restrictions {"VisitorsOnly","GuestsOnly"}
services | Array | Special services { "WomenParking", "DisabledParking", "Monitored", "ChargingStation", "ParentChild", "MotorCycle", ... } 
securityComment | String |  Securtiy features
entrance | String |

### Getting a specific garage [GET] 
@nottestable

+ Parameters
    + id (string, `878`) ... String `id` as retrieved through *[/imp-endpoint/api/V1/Resources/Parking/Garages?lat={lat}&lng={lng}&radius={radius}]* .
        
+ Response 200 (application/json)

    + Body
    
            {
                "actions": [
                    {
                        "name": "consume",
                        "method": "POST",
                        "uri": "Resources/Parking/Garages/878/Process?action=consume"
                    }
                ],
                "id": 878,
                "description": "Mitte, An der Friedrichswerderschen Kirche",
                "type": "ParkingGarageDetails",
                "uri": "Resources/Parking/Garages/878",
                "location": {
                    "latitude": 52.515930000000004,
                    "longitude": 13.39694,
                    "system": "WGS_84"
                },
                "provider": "vmzParking",
                "availability": null,
                "operator": "P",
                "totalnumber": {
                    "others": 75,
                    "handicappedOnly": 0,
                    "womenOnly": 0
                },
                "lottype": "Parkplatz",
                "address": {
                    "citycode": "10117",
                    "city": "Berlin",
                    "street": "Oberwallstr.",
                    "houseno": null,
                    "district": null,
                    "region": null,
                    "country": null
                },
                "pricing": "EUR 0,25 pro 15 min.<br>Mo-Fr von 19 - 9 Uhr: kostenlos<br>Sa von 14 - 9 Uhr: kostenlos<br>So: kostenlos",
                "payment": [
                    "COINPAY"
                ],
                "category": [
                    "P"
                ],
                "openingHours": null,
                "bookable": false,
                "heightLimit": null,
                "occupancyRate": null,
                "allowedStay": null,
                "generalInformations": null,
                "restrictions": null,
                "services": null,
                "securityComment": null,
                "entrance": null
            }

## OnStreet Parking Spaces [/imp-endpoint/api/V1/Resources/Parking/OnStreetSpaces?lat={lat}&lng={lng}&radius={radius}&f_onStreetSpaces={sizeJson}]
This collection contains a list of OnStreet parking spaces for specified size in an area of interest specified by query parameters together with an URI to acquire more details. OnStreet spaces can be filtered by the space size.

The If-Modified-Since (optional) can be set to a specific date-time in order to request only resources modified after a particular date-time.
Date time in HTTP date format for e.g. Wed, 09 Apr 2008 23:55:38 GMT

The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
metadata | Object | List of service providers and the last update times and failures if any [{serviceAlias:"XXX",lastUpdateTime:dd-mm-yyyyThhmmssZ,messages:[]}]
--- | --- | ---
resources | Array | Array of resources within the search area
--- | --- | ---
actions | Array | List of available actions on this resource (currently no actions available)
id | Number | Internal OnStreet parking space identification number
description | String | Approximate location
type | String | (="ParkingOnStreetSpace")
uri | URI | URI to request more details
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  } 
provider | String | Parking service provider (usually equals operator)
availability | Double | Availability in percentage
operator | String | Parking space operator (usually equals provider)
size | Enum | Size of OnStreet parking space {"Large", "Medium", "Small", "Unknown"} 
accessibility | Enum | Accessbility of OnStreet parking space {"Private","Public","SemiPublic","Unknown"}
modFlag | Enum | Type of modification to resource [New / Modified / Relocated / Deleted]. This attribute is present only when the If-Modified-Since header is passed in the request 

Parts of the data structure might be omitted if the information is not available. 

### Getting OnStreet parking [GET]
@testable

+ Parameters
    + lat (optional, number, `52.50`) ... latitude value. Has example value.
    + lng (optional, number, `13.35`) ... longitude value. Has example value.
    + radius (optional, number, `5000`) ... longitude value. Has example value.
    + sizeJson (optional, string, `{"size":"Large"}`) ... String `sizeJson` size json data. Example value `{"size":"Large"}` or `{"size":"Medium"}`

+ Request

    + Headers

            If-Modified-Since: Wed, 09 Apr 2008 23:55:38 GMT 

+ Response 200 (application/json)   

        {
            "metaData": [
                {
                    "serviceAlias": "vmzParking",
                    "lastUpdateTime": "2014-12-02T15:59:01+01:00",
                    "messages": []
                },
                {
                    "serviceAlias": "city2eParking",
                    "lastUpdateTime": "2014-12-02T16:27:45+01:00",
                    "messages": []
                },
                {
                    "serviceAlias": "parkUParking",
                    "lastUpdateTime": "2014-12-02T16:27:50+01:00",
                    "messages": []
                }
            ],
            "resources": [
                {
                    "actions": [],
                    "id": 239,
                    "description": "Einemstraße",
                    "type": "ParkingOnStreetSpace",
                    "uri": "Resources/Parking/OnStreetSpaces/239",
                    "location": {
                        "latitude": 52.502795,
                        "longitude": 13.352953,
                        "system": "WGS_84"
                    },
                    "provider": "parkUParking",
                    "availability": 100,
                    "operator": "ParkU",
                    "size": "Large",
                    "accessibility": null
                }
            ]
        }

## OnStreet Space with Detailed Info [/imp-endpoint/api/V1/Resources/Parking/OnStreetSpaces/{id}]

A single onStreet Space object with Detailed Information. 
The data structure of the response contains the attributes with the basic information and additionally the following attributes:

attribute | json data type | comments
--- | --- | ---
... | ... | ...
address | Object | Address {"citycode": String, "city": String, "street": String, "houseno": String }
barrier | boolean |  
indoor | boolean | 
patio | String | 
barrierFree | boolean | 
category | Enum |  
usage | String |  

### Getting a specific onStreet Space [GET] 
@nottestable

+ Parameters
    + id (string, `907`) ... String `id` as retrieved through *[/imp-endpoint/api/V1/Resources/Parking/OnStreetSpaces?lat={lat}&lng={lng}&radius={radius}]* .
        
+ Response 200 (application/json)

    + Body
    
            {
                "actions": [],
                "id": 907,
                "description": "Kleine Rosenthaler Str.",
                "type": "ParkingOnStreetSpaceDetails",
                "uri": "Resources/Parking/OnStreetSpaces/907",
                "location": {
                    "latitude": 52.528512,
                    "longitude": 13.403188,
                    "system": "WGS_84"
                },
                "provider": "parkUParking",
                "availability": 100,
                "operator": "ParkU",
                "size": "Large",
                "accessibility": null,
                "address": {
                    "citycode": "10119",
                    "city": "Berlin",
                    "street": "Kleine Rosenthaler Str.",
                    "houseno": "12",
                    "district": null,
                    "region": null,
                    "country": "DE"
                },
                "barrier": true,
                "indoor": true,
                "patio": null,
                "barrierFree": true,
                "category": [
                    "attribute/available/true",
                    "attribute/traffic/sharingOperator/ParkU",
                    "point/traffic/parking/p/dynamic"
                ],
                "usage": "Tiefgarage Hotel  AMANO, kameraüberwacht, freie Platzwahl, Ausfahrt Rosenthaler Straße (QR-Code auf Rezeptionsklingel); zum Öffnen der Tore benötigen Sie die parku-App.\r\n\r\n5 Minuten zum Hackeschen Markt oder Rosenthaler Platz."
            }
            
        
## All Parking Garages or OnStreet parking spaces or both [/imp-endpoint/api/V1/Resources/Parking/All?f_onStreetSpaces={sizeJson}&f_garages={categoryJson}]    
This collection contains a list of all parking garages or OnStreet parking spaces or both in an area of interest. The parking possibilities can be filtered by garage category (viz. P+R or P) or space size (Small, Medium or Large).

The If-Modified-Since (optional) can be set to a specific date-time in order to request only resources modified after a particular date-time.
Date time in HTTP date format for e.g. Wed, 09 Apr 2008 23:55:38 GMT

The response contains attributes from parking garages or OnStreet parking spaces or both

Parts of the data structure might be omitted if the information is not available. 
    
### Getting all parking garages or OnStreet parking spaces or both with specified size and category [GET]
@testable

+ Parameters
    + sizeJson (optional, string, `{"size":"Large"}`) ... String `sizeJson` size json data. Example value `{"size":"Large"}` or `{"size":"Medium"}`or `{"size":"Small"}
    + categoryJson (optional, string, `{"category": ["P%2BR"]}`) ... String `categoryJson` category json data. Example value `{"category" : ["P%2BR"]}` or `{"category": ["P"]}`
    
+ Request

    + Headers
    
            If-Modified-Since: Wed, 09 Apr 2008 23:55:38 GMT 
        
+ Response 200 (application/json)   

        {
            "metaData": [
                {
                    "serviceAlias": "vmzParking",
                    "lastUpdateTime": "2014-11-20T12:55:14+01:00",
                    "messages": []
                                    },
                {
                    "serviceAlias": "city2eParking",
                    "lastUpdateTime": "2014-11-20T13:22:50+01:00",
                    "messages": []
                },
                {
                    "serviceAlias": "parkUParking",
                    "lastUpdateTime": "2014-11-20T13:22:54+01:00",
                    "messages": []
                }
            ],
            "resources": [
                {
                    "actions": [],
                    "id": 2838,
                    "description": "Lohmeyerstraße",
                    "type": "OnStreetSpaces",
                    "uri": "Resources/Parking/OnStreetSpaces/2838",
                    "location": {
                        "latitude": 52.517519,
                        "longitude": 13.301087,
                        "system": "WGS_84"
                    },
                    "provider": "parkUParking",
                    "availability": 100,
                    "operator": "ParkU"
                },
                {
                    "actions": [],
                    "id": 239,
                    "description": "Einemstraße",
                    "type": "OnStreetSpaces",
                    "uri": "Resources/Parking/OnStreetSpaces/239",
                    "location": {
                        "latitude": 52.502795,
                        "longitude": 13.352953,
                        "system": "WGS_84"
                    },
                    "provider": "parkUParking",
                    "availability": 100,
                    "operator": "ParkU"
                }
            ]
        }


            
            

# Group Public Transport
This is a group of all public transportation related rest resources.

## List of Public Transport Stations with Basic Info [/imp-endpoint/api/V1/Resources/PublicTransport/Stations?lat={lat}&lng={lng}&radius={radius}&f_stations={f_stations}] 

This collection contains list stations (U-Bahn/S-Bahn/train/bus/tram) in a specific area with basic information and a URI to get more details.
Note: The area of interest can be defined as:

* a bounding circle (lat={lat}&lng={lng}&radius={radius})
* a bounding box (left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng})

The optional filter `f_stations` can be used to get the stations with a particular   `stationType`

The If-Modified-Since (optional) can be set to a specific date-time in order to request only resources modified after a particular date-time. Date time in HTTP date format for e.g. Wed, 09 Apr 2008 23:55:38 GMT

attribute | json data type | comments
--- | --- | ---
metadata | Object | List of service providers and the last update times and failures if any [{serviceAlias:"XXX",lastUpdateTime:dd-mm-yyyyThhmmssZ,messages:[]}]
--- | --- | ---
resources | Array | Array of resources within the search area
--- | --- | ---
description | String | Approximate location
type | String | (="PublicTransportStation")
uri | URI | URI to request more details
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider | String | Bus/tram (="VBBStation"), metro (="VBBStationU"), S-Bahn (="VBBStationS")
availability | Double | Availability in percentage
operator | String | Bus/tram (="VBBStation"), metro (="VBBStationU"), S-Bahn (="VBBStationS")
stationType | String | BusTramStation, MetroStation, CityTrainStation
modFlag | Enum | Type of modification to resource [New / Modified / Relocated / Deleted]. This attribute is present only when the If-Modified-Since header is passed in the request 


+ Parameters
    + lat (number, `52.52`) ... latitude value. Has example value.
    + lng (number, `13.39`) ... longitude value. Has example value.
    + radius (number, `1000`) ... radius value. Has example value.
    + f_stations (optional, string, `{"stationType":"BusTramStation"}`) ... String `f_stations` filter value. Has example value.
+ Model (application/json)

    + Body
    
            {
                "metaData": [
                    {
                        "serviceAlias": "vmzStation",
                        "lastUpdateTime": "2014-07-11T12:08:22+0200",
                        "messages": []
                    }
                ],
                "resources": [
                    {
                        "actions": [],
                        "id": 306016,
                        "description": "Berlin, Jüdisches Museum",
                        "type": "PublicTransportStation",
                        "uri": "Resources/PublicTransport/Stations/306016",
                        "location": {
                            "latitude": 52.503543,
                            "longitude": 13.395639,
                            "system": "WGS_84"
                        },
                        "provider": "vmzStation",
                        "availability": 100,
                        "operator": "VBBStation",
                        "stationType":"BusTramStation",
                        "modFlag": "Relocated"
                    },
                    {
                        "actions": [],
                        "id": 306017,
                        "description": "Berlin, Kommandantenstr.",
                        "type": "PublicTransportStation",
                        "uri": "Resources/PublicTransport/Stations/306017",
                        "location": {
                            "latitude": 52.507675,
                            "longitude": 13.40418,
                            "system": "WGS_84"
                        },
                        "provider": "vmzStation",
                        "availability": 100,
                        "operator": "VBBStation",
                        "stationType":"BusTramStation",
                        "modFlag": "Relocated"
                    }
                ]
            }


### Getting all stations in a specific area [GET]
@testable

+ Request

    + Headers
        
            If-Modified-Since: Wed, 09 Apr 2008 23:55:38 GMT

+ Response 200

    [List of Public Transport Stations with Basic Info][]
    
    
## List of All Public Transport Stations with Basic Info [/imp-endpoint/api/V1/Resources/PublicTransport/Stations/All] 

This collection contains list stations (U-Bahn/S-Bahn/train/bus/tram)

The If-Modified-Since (optional) can be set to a specific date-time in order to request only resources modified after a particular date-time. Date time in HTTP date format for e.g. Wed, 09 Apr 2008 23:55:38 GMT

attribute | json data type | comments
--- | --- | ---
metadata | Object | List of service providers and the last update times and failures if any [{serviceAlias:"XXX",lastUpdateTime:dd-mm-yyyyThhmmssZ,messages:[]}]
--- | --- | ---
resources | Array | Array of resources within the search area
--- | --- | ---
description | String | Approximate location
type | String | (="PublicTransportStation")
uri | URI | URI to request more details
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider | String | Bus/tram (="VBBStation"), metro (="VBBStationU"), S-Bahn (="VBBStationS")
availability | Double | Availability in percentage
operator | String | Bus/tram (="VBBStation"), metro (="VBBStationU"), S-Bahn (="VBBStationS")
modFlag | Enum | Type of modification to resource [New / Modified / Relocated / Deleted]. This attribute is present only when the If-Modified-Since header is passed in the request 

+ Model (application/json)

    + Body
    
            {
                "metaData": [
                    {
                        "serviceAlias": "vmzStation",
                        "lastUpdateTime": "2014-10-14T07:48:27+02:00",
                        "messages": []
                    }
                ],
                "resources": [
                    {
                        "actions": [],
                        "id": 52696,
                        "description": "Berlin, Wiebestr./Huttenstr.",
                        "type": "PublicTransportStation",
                        "uri": "Resources/PublicTransport/Stations/PublicTransportStation/52696",
                        "location": {
                            "latitude": 52.528315,
                            "longitude": 13.320255,
                            "system": "WGS_84"
                        },
                        "provider": "vmzStation",
                        "availability": 100,
                        "operator": "VBBStation",
                        "modFlag": "Modified"
                    },
                    {
                        "actions": [],
                        "id": 51655,
                        "description": "Berlin, Waltersdorfer Str./Krumme Str.",
                        "type": "PublicTransportStation",
                        "uri": "Resources/PublicTransport/Stations/PublicTransportStation/51655",
                        "location": {
                            "latitude": 52.398914,
                            "longitude": 13.574981,
                            "system": "WGS_84"
                        },
                        "provider": "vmzStation",
                        "availability": 100,
                        "operator": "VBBStation",
                        "modFlag": "Modified"
                    }
                ]
            }


### Getting all stations [GET]
@testable

+ Request

    + Headers
        
            If-Modified-Since: Wed, 09 Apr 2008 23:55:38 GMT

+ Response 200

            {
                        "metaData": [
                            {
                                "serviceAlias": "vmzStation",
                                "lastUpdateTime": "2014-10-14T07:48:27+02:00",
                                "messages": []
                            }
                        ],
                        "resources": [
                            {
                                "actions": [],
                                "id": 52696,
                                "description": "Berlin, Wiebestr./Huttenstr.",
                                "type": "PublicTransportStation",
                                "uri": "Resources/PublicTransport/Stations/PublicTransportStation/52696",
                                "location": {
                                    "latitude": 52.528315,
                                    "longitude": 13.320255,
                                    "system": "WGS_84"
                                },
                                "provider": "vmzStation",
                                "availability": 100,
                                "operator": "VBBStation",
                                "modFlag": "Modified"
                            },
                            {
                                "actions": [],
                                "id": 51655,
                                "description": "Berlin, Waltersdorfer Str./Krumme Str.",
                                "type": "PublicTransportStation",
                                "uri": "Resources/PublicTransport/Stations/PublicTransportStation/51655",
                                "location": {
                                    "latitude": 52.398914,
                                    "longitude": 13.574981,
                                    "system": "WGS_84"
                                },
                                "provider": "vmzStation",
                                "availability": 100,
                                "operator": "VBBStation",
                                "modFlag": "Modified"
                            }
                        ]
                    }

## Time Table of a specific Station [/imp-endpoint/api/V1/Resources/PublicTransport/Stations/{id}/TimeTables]

Arrival and departure times at a specified station. 
The data structure contains the following attributes:

attribute | json data type | comments
--- | --- | ---
metadata | Object | List of service providers and the last update times and failures if any [{serviceAlias:"XXX",lastUpdateTime:dd-mm-yyyyThhmmssZ,messages:[]}]
--- | --- | ---
resources | Array | Array of resources within the search area
--- | --- | ---
id | Number | Internal public transport station identification number
... | ... | ...
arrivals | String | Arrivals info containing direction, line and arrival times
departures | String | Departures info containing direction, line and departure times

!Please note: expectedTime is not always available.

### Getting a time table [GET] 
@nottestable

+ Parameters
    + id (string, `2532`) ... String `id` as retrieved through *[/imp-endpoint/api/V1/Resources/PublicTransport/Stations?lat={lat}&lng={lng}&radius={radius}]* .

        
+ Response 200 (application/json)

    + Body
    
            {
                "metaData": [
                    {
                        "serviceAlias": "vmzStation",
                        "lastUpdateTime": null,
                        "messages": []
                    }
                ],
                "resources": [
                    {
                        "actions": [],
                        "id": 2532,
                        "description": "Berlin, Alexandrinenstr.",
                        "type": "PublicTransportStation",
                        "uri": "Resources/PublicTransport/Stations/2532/TimeTables/2532",
                        "location": {
                            "latitude": 52.505154,
                            "longitude": 13.405322,
                            "system": "WGS_84"
                        },
                        "provider": "vmzStation",
                        "availability": 100,
                        "operator": "VBBStation",
                        "arrivals": [],
                        "departures": [
                            {
                                "direction": "U Hermannplatz",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T18:46:00+02:00",
                                "expectedTime": null
                            },
                            {
                                "direction": "Grunewald, Roseneck",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T18:49:00+02:00",
                                "expectedTime": null
                            },
                            {
                                "direction": "U Hermannplatz",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T18:51:00+02:00",
                                "expectedTime": null
                            },
                            {
                                "direction": "U Wittenbergplatz",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T18:54:00+02:00",
                                "expectedTime": null
                            },
                            {
                                "direction": "U Hermannplatz",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T18:56:00+02:00",
                                "expectedTime": null
                            },
                            {
                                "direction": "Grunewald, Roseneck",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T18:59:00+02:00",
                                "expectedTime": null
                            },
                            {
                                "direction": "U Hermannplatz",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T19:01:00+02:00",
                                "expectedTime": null
                            },
                            {
                                "direction": "U Wittenbergplatz",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T19:04:00+02:00",
                                "expectedTime": null
                            },
                            {
                                "direction": "U Hermannplatz",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T19:06:00+02:00",
                                "expectedTime": null
                            },
                            {
                                "direction": "Grunewald, Roseneck",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T19:09:00+02:00",
                                "expectedTime": null
                            },
                            {
                                "direction": "U Hermannplatz",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T19:11:00+02:00",
                                "expectedTime": null
                            },
                            {
                                "direction": "U Wittenbergplatz",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T19:14:00+02:00",
                                "expectedTime": null
                            },
                            {
                                "direction": "U Hermannplatz",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T19:16:00+02:00",
                                "expectedTime": null
                            },
                            {
                                "direction": "Grunewald, Roseneck",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T19:19:00+02:00",
                                "expectedTime": null
                            },
                            {
                                "direction": "U Hermannplatz",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T19:21:00+02:00",
                                "expectedTime": null
                            },
                            {
                                "direction": "U Wittenbergplatz",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T19:24:00+02:00",
                                "expectedTime": null
                            },
                            {
                                "direction": "U Hermannplatz",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T19:26:00+02:00",
                                "expectedTime": null
                            },
                            {
                                "direction": "Grunewald, Roseneck",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T19:29:00+02:00",
                                "expectedTime": null
                            },
                            {
                                "direction": "U Hermannplatz",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T19:31:00+02:00",
                                "expectedTime": null
                            },
                            {
                                "direction": "U Wittenbergplatz",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T19:34:00+02:00",
                                "expectedTime": null
                            },
                            {
                                "direction": "U Hermannplatz",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T19:35:00+02:00",
                                "expectedTime": null
                            },
                            {
                                "direction": "Grunewald, Roseneck",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T19:39:00+02:00",
                                "expectedTime": null
                            },
                            {
                                "direction": "U Hermannplatz",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T19:41:00+02:00",
                                "expectedTime": null
                            },
                            {
                                "direction": "U Wittenbergplatz",
                                "line": "Bus M29",
                                "aimedTime": "2014-07-14T19:44:00+02:00",
                                "expectedTime": null
                            }
                        ]
                    }
                ]
            }

# Group Taxi Service
This is a group of all taxi related rest resources.

## List of available Taxis with Basic Info [/imp-endpoint/api/V1/Resources/TaxiService/Taxis?lat={lat}&lng={lng}&radius={radius}] 

This collection contains list of taxis in a specific area with basic information and a URI to get more details.
Note: The area of interest can be defined as:

* a bounding circle (lat={lat}&lng={lng}&radius={radius})
* a bounding box (left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng})

The If-Modified-Since (optional) can be set to a specific date-time in order to request only resources modified after a particular date-time. Date time in HTTP date format for e.g. Wed, 09 Apr 2008 23:55:38 GMT

### Get taxis in a specific area [GET]
@testable

+ Parameters
    + lat (number, `52.52`) ... latitude value. Has example value.
    + lng (number, `13.39`) ... longitude value. Has example value.
    + radius (number, `1000`) ... radius value. Has example value.
    
+ Request

    + Headers
    
            If-Modified-Since: Wed, 09 Apr 2008 23:55:38 GMT 

+ Response 200 (application/json)

        {
            "metaData": [
                {
                  "serviceAlias": "bettertaxi",
                  "lastUpdateTime": null,
                  "messages": []
                }
            ],
              "resources": []
        }

## List of All available Taxis with Basic Info [/imp-endpoint/api/V1/Resources/TaxiService/Taxis/All] 

This collection contains list of taxis.

The If-Modified-Since (optional) can be set to a specific date-time in order to request only resources modified after a particular date-time. Date time in HTTP date format for e.g. Wed, 09 Apr 2008 23:55:38 GMT

### Get taxis in a specific area [GET]
@testable

+ Request

    + Headers
    
            If-Modified-Since: Wed, 09 Apr 2008 23:55:38 GMT 

+ Response 200 (application/json)

        {
            "metaData": [
                {
                  "serviceAlias": "bettertaxi",
                  "lastUpdateTime": null,
                  "messages": []
                }
            ],
              "resources": []
        }        
        

## Fare for the specified trip [/imp-endpoint/api/V1/Resources/TaxiService/Fares?origin_lat={lat}&origin_lng={lng}&radius={radius}] 

This response contains estimated fare for trips from origin and distanse from origin.

### Get fare information for the trip specified by origing and radius [GET]
@nottestable

+ Parameters
    + lat (number, `52.482780222078205`) ... latitude value. Has example value.
    + lng (number, `13.3154296875`) ... longitude value. Has example value.
    + radius (number, `2000`) ... radius value. Has example value.

+ Response 200 (application/json)

        {
            "fareQuality": 1.0,
            "startTime": "2013-07-09T08:09:17",
            "arrivalTime": { "value": 360, "unit": "sec"},
            "totalTime":   { "value": 660, "unit": "sec"},
            "totalDistance": { "value": 5000, "unit": "m" },
            "costs": { 
                "flagFall": { "value":300, "currency":"EuroCent"},
                "total":    { "value":960, "currency":"EuroCent"}, 
                "distance": { "value":660, "currency":"EuroCent"}, 
                "other":    { },
                "passengers": [
                   { "value":0,   "currency":"EuroCent" },
                   { "value":0,   "currency":"EuroCent" },
                   { "value":0,   "currency":"EuroCent" },
                   { "value":0,   "currency":"EuroCent" },
                   { "value":150, "currency":"EuroCent" },
                   { "value":300, "currency":"EuroCent" },
                   { "value":450, "currency":"EuroCent" },
                   { "value":600, "currency":"EuroCent" }
                ]
            }
            "services": {
                "bookingAvailable": true,
                "paymentAvailable": false,
                "privateHireVehicleAvailable": true,
                "taxiSharing": false,
                "information": "An diesem Flughafen ist keine Taxibuchung möglich, bitte nutzen Sie eines der Flughafen Taxis" 
            }      
        }

## Fare for the specified trip [/imp-endpoint/api/V1/Resources/TaxiService/Fares?origin_lat={lat}&origin_lng={lng}&dest_lat={dlat}&dest_lng={dlng}] 

This response contains estimated fare for trips from origin and distanse from origin.

### Get fare information for the trip specified by origin and destination [GET]
@nottestable

+ Parameters
    + lat (number, `52.482780222078205`) ... latitude value. Has example value.
    + lng (number, `13.3154296875`) ... longitude value. Has example value.
    + dlat (number, `53.57914`) ... latitude value. Has example value.
    + dlng (number, `13.40603`) ... longitude value. Has example value.

+ Response 200 (application/json)

        {
            "fareQuality": 1.0,
            "startTime": "2013-07-09T08:09:17",
            "arrivalTime": { "value": 360, "unit": "sec"},
            "totalTime":   { "value": 660, "unit": "sec"},
            "totalDistance": { "value": 5000, "unit": "m" },
            "costs": { 
                "flagFall": { "value":300, "currency":"EuroCent"},
                "total":    { "value":960, "currency":"EuroCent"}, 
                "distance": { "value":660, "currency":"EuroCent"}, 
                "other":    { },
                "passengers": [
                   { "value":0,   "currency":"EuroCent" },
                   { "value":0,   "currency":"EuroCent" },
                   { "value":0,   "currency":"EuroCent" },
                   { "value":0,   "currency":"EuroCent" },
                   { "value":150, "currency":"EuroCent" },
                   { "value":300, "currency":"EuroCent" },
                   { "value":450, "currency":"EuroCent" },
                   { "value":600, "currency":"EuroCent" }
                ]
            }
            "services": {
                "bookingAvailable": true,
                "paymentAvailable": false,
                "privateHireVehicleAvailable": true,
                "taxiSharing": false,
                "information": "An diesem Flughafen ist keine Taxibuchung möglich, bitte nutzen Sie eines der Flughafen Taxis" 
            }      
        }


## Booking a taxi [/imp-endpoint/api/V1/Resources/TaxiService/Taxis/Processes?action=Book] 

Book a Taxi: The taxi ride is specified by providing the starting point (address and/or geo location) and the destination.
This means that no specific, previously selected taxi, is booked.

Input in request body: 
operator: name, userId and password (for authentication)
origin of the taxi ride and optional start time
destination of the taxi ride
further parameters might later detail the request by specifying the number of passengers, availability of child seats, extra luggage etc.


The response contains the estimated costs, the taxi's licence id, and a booking id are returned; the latter can be used to cancel the booking.

Please note: 
Since data about the traveler is usually requested by the taxi SP, we assume that the end-user (or the mobility provider) himself is responsible to register at the service provider.
We currently require one operator in the input body.
If booking is not possible: response body explains the reason why

### Book a taxi [POST]
@nottestable
    
+ Request

    + Headers
    
            userToken: "some token"
        
    + Body
    
            {
                "operator": {
                    "name": "BetterTaxi",
                    "userId": "MP1_1",
                    "password": "TopSecret!"
                },
                "origin" : {
                    "location": { "latitude":52.51914, "longitude": 13.40693 }, 
                    "address": { "citycode":"10178", "city":"Berlin", "Street":"Spandauer Straße","houseno":"9" }, 
                    "time": "2013-05-01T12:00:00" 
                },
                "destination" : {
                    "address": { "citycode":"12109", "city":"Berlin", "Street":"Ullsteinstraße","houseno":"114" }
                }
            }


+ Response 201 (application/json)

    + Headers
    
            Location: /api/V1/Process/4711
            
    + Body
    
            {
                "processId" : 123,
                "confirmation" : {
                    "confirmationId" : 456,
                    "featureType": "BOOKING"
                },
                "origin" : {
                    "location": { "latitude":52.51914, "longitude": 13.40693 }, 
                    "address": { "citycode":"10178", "city":"Berlin", "Street":"Spandauer Straße","houseno":"9" }, 
                    "time": "2013-05-01 12:00:00" 
                },
                "destination" : {
                    "address": { "citycode":"12109", "city":"Berlin", "Street":"Ullsteinstraße","houseno":"114" }
                },
                "operatorId": "BetterTaxi",
                "licenceId": "B-OB 007",
                "arrivalTime": "2013-05-01T12:05:00",
                "services": {
                    "bookingAvailable": true,
                    "paymentAvailable": false,
                    "privateHireVehicleAvailable": true,
                    "taxiSharing": false,
                    "information": "An diesem Flughafen ist keine Taxibuchung möglich, bitte nutzen Sie eines der Flughafen Taxis" 
                },
                "actions": [
                    {
                        "name": "Cancel",
                        "method": "PUT",
                        "uri": "/api/V1/Processes/123?action=Cancel"
                    }
                ]
            }


## Canceling a taxi [/imp-endpoint/api/V1/Process/123?action=Cancel] 

Cancel a booking for a taxi that has been booked before with a booking id 4711.

Input in request body: 
operator: name, userId and password (for authentication)

The response contains information about the originally planned taxi ride and the cancelation fee.

Please note: 
If booking is not possible: response body explains the reason why

### Book a taxi [POST]
@nottestable
    
+ Request

    + Headers
    
            userToken: "some token"
        
    + Body
    
            {
                "operator": {
                    "name": "BetterTaxi",
                    "userId": "MP1_1",
                    "password": "TopSecret!"
                }
            }


+ Response 201 (application/json)

    + Headers
    
            Location: /api/V1/Process/123
            
    + Body
    
            {
                "userId": "MP1_1",
                "ride": { 
                    "origin" : {
                        "location": { "latitude":52.51914, "longitude": 13.40693 }, 
                        "address": { "citycode":"10178", "city":"Berlin", "Street":"Spandauer Straße","houseno":"9" }, 
                        "time": "2013-05-01T12:00:00" 
                    },
                    "destination" : {
                        "address": { "citycode":"12109", "city":"Berlin", "Street":"Ullsteinstraße","houseno":"114" }
                    }
                },
                "confirmation": {
                    "featureType": "CANCELATION",
                    "confirmationId": "17",
                    "fee": { "value": 0, "currency": "EUR" }
                },
                "actions": [ ]
            }

# Group Journey Planner. Open Trip Planner
This is a group of all OTP journey planner related rest resources.

## List of Trip Proposals with Basic Info. Open Trip Planner Router [/imp-endpoint/api/V1/TripProposals/OTP] 

This collection contains a list of trip proposals with basic information for specified trip criteria. 

The data structure of collection contains a list of trip proposals. Each trip proposal contains the following attributes:

attribute | json data type | comments
--- | --- | ---
url | URI | URI to request more details
origin | Object | start point of the proposed trip
destination | Object | endpoint of the proposed trip
trafficTypes | Array | list of traffic types used in the proposed trip. Possible values: Walk,Bus, Train, Bike, Car, Tram, UBahn, Ferry.
description | String | description of the trip proposal
costs | Array | list of costs for the proposed trip including distance, duration, price, etc.

    
+ Model (application/json)
        
    + Body
        
            [
                {
                    "url": "TripProposals/OTP/14229",
                    "origin": {
                        "location": {
                            "latitude": 52.565474674602385,
                            "longitude": 13.352367671031436,
                            "system": "WGS_84"
                        },
                        "address": "Aroser Allee",
                        "time": "2014-11-26T15:04:10+01:00"
                    },
                    "destination": {
                        "location": {
                            "latitude": 52.45282893167094,
                            "longitude": 13.483013425631938,
                            "system": "WGS_84"
                        },
                        "address": "path",
                        "time": "2014-11-26T16:45:43+01:00"
                    },
                    "trafficTypes": [
                        "Walk",
                        "Bus"
                    ],
                    "description": null,
                    "costs": {
                        "distance": null,
                        "duration": {
                            "unit": "sec",
                            "value": 6093
                        },
                        "price": null,
                        "emission": null,
                        "ticketPrice": null
                    }
                },
                {
                    "url": "TripProposals/OTP/14230",
                    "origin": {
                        "location": {
                            "latitude": 52.565474674602385,
                            "longitude": 13.352367671031436,
                            "system": "WGS_84"
                        },
                        "address": "Aroser Allee",
                        "time": "2014-11-26T15:04:10+01:00"
                    },
                    "destination": {
                        "location": {
                            "latitude": 52.45282893167094,
                            "longitude": 13.483013425631938,
                            "system": "WGS_84"
                        },
                        "address": "path",
                        "time": "2014-11-26T16:45:43+01:00"
                    },
                    "trafficTypes": [
                        "Walk",
                        "Bus"
                    ],
                    "description": null,
                    "costs": {
                        "distance": null,
                        "duration": {
                            "unit": "sec",
                            "value": 6093
                        },
                        "price": null,
                        "emission": null,
                        "ticketPrice": null
                    }
                }
            ]


### Getting Trip Proposals by OTP [POST]
@testable

Selection criteria for trip proposals is specified in the request body as described in the sample request with the following attributes:

attribute | json data type | comments
--- | --- | ---
origin | Object | start point specified by a geo location (optionally can also include starttime).
destination | Object | end point specified by a geo location (optional can also include endtime). 
viapoints | Array of Objects | list of geolocations the route should pass
costfunctions | Array of Objects | list of cost factors, Note: Only Duration or Emission is supported by OTP, with a percentual weight. One with greater percentile is selected. Sample custfunction: {"costType":"Duration","percentage":"100"}
userId | String | traveller id that requests a trip. Note: currently not used by IMP and can be any string
trafficTypes | Array | list of traffic types which should be included into trip proposal calculation. Currently possible: Walk,Bus, Train, Bike, Car, Tram, UBahn, Ferry.
routingConstraints | Array of Objects | list of constraints to be taken into account for various traffic types, specified by max values. E.q. maximal distance in meters the traveller agrees to walk: {"routingConstraintType": "Distance", "trafficType": "Walk", "max":{"value":600, "unit":"Meter"}}

+ Request

    + Headers
    
            Content-Type: application/json
            Accept: application/json

    + Body
    
            {
              "origin": {
                "location": {
                  "longitude": 13.352508544921875,
                  "latitude": 52.565499392715374,
                  "system": "WGS84"
                },
                "time": "2014-11-26T13:27:00UTC+05:30"
              },
              "destination": {
                "location": {
                  "longitude": 13.48297119140625,
                  "latitude": 52.453498792506736,
                  "system": "WGS84"
                },
                "time": null
              },
              "trafficTypes": [
                "Walk",
                "Bus"
              ],
              "costFunctions": [
                {
                  "costType": "Duration",
                  "percentage": "100"
                }
              ],
              "viaPoints": [
              ],
              "routingConstraints": [
                {
                  "routingConstraintType": "Distance",
                  "trafficType": "Walk",
                  "min": {
                    "value": 0,
                    "unit": "Meter"
                  },
                  "max": {
                    "value": 1000,
                    "unit": "Meter"
                  }
                }
              ]
            }
+ Response 200

    [List of Trip Proposals with Basic Info. Open Trip Planner Router][]


## Trip Proposal with Detailed Info [/imp-endpoint/api/V1/TripProposals/OTP/{proposalId}]

A single trip proposal object with Detailed Information. 
Each trip proposal consists of several segments, one segment for one transportation modality such as bike, car, train, etc. 
A segment consists of a sequence of wayPoints and guidingPoints.
A wayPoint describes an intermediate geo location useful for displaying the trip proposal in a map.
A guidingPoint gives a traveler hints how to travel, e.g., whenever to change the road at a crossing. GuidingPoints are a subset of wayPoints

The data structure of the trip proposal with detailed info contains the basic information attributes (*[POST /imp-endpoint/api/V1/TripProposals/IMR]*) and additionally the following attributes:

attribute | json data type | comments
--- | --- | ---
segmentId | URI | URI to request more details
origin | Object | start point of the proposed trip. For car sharing segment we have "operatorId" and "unitId" and for CityTrain/RegioTrain segment we have "platform", "stationId" and "direction"
destination | Object | endpoint of the proposed trip


Notes:
- The trip proposals as returned by *[GET /imp-endpoint/api/V1/TripProposals/OTP]* are internally stored only for a certain time; afterwards they expire and details are no longer available. The current expiration time is 10 minutes.

### Getting a specific Trip Proposal [GET] 
@nottestable

+ Parameters
    + proposalId (string, `21844`) ... String `proposalId` as retrieved through *[GET /imp-endpoint/api/V1/TripProposals/OTP]*

        
+ Response 200 (application/json)

    + Body
    
            {
                "url": "TripProposals/OTP/14229/",
                "segments": [
                    {
                        "segmentId": "1",
                        "description": "Walk 138.2783409092006m to Grindelwaldweg (Berlin)",
                        "origin": {
                            "location": {
                                "latitude": 52.565474674602385,
                                "longitude": 13.352367671031436,
                                "system": "WGS_84"
                            },
                            "address": "Aroser Allee",
                            "time": "2014-11-26T14:44:10+01:00"
                        },
                        "destination": {
                            "location": {
                                "latitude": 52.56436824190343,
                                "longitude": 13.352722264672881,
                                "system": "WGS_84"
                            },
                            "address": "Grindelwaldweg (Berlin)",
                            "time": "2014-11-26T14:45:59+01:00"
                        },
                        "trafficType": "Walk",
                        "cost": {
                            "distance": {
                                "unit": "m",
                                "value": 138.2783409092006
                            },
                            "duration": {
                                "unit": "sec",
                                "value": 109
                            },
                            "price": null,
                            "emission": null,
                            "ticketPrice": null
                        },
                        "wayPoints": [
                            {
                                "latitude": 52.565470000000005,
                                "longitude": 13.352360000000001,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.564370000000004,
                                "longitude": 13.35288,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.56436000000001,
                                "longitude": 13.352720000000001,
                                "system": "WGS_84"
                            }
                        ],
                        "guidingPoints": [
                            {
                                "description": "DEPART on to \"Aroser Allee\"",
                                "location": {
                                    "location": {
                                        "latitude": 52.565474674602385,
                                        "longitude": 13.352367671031436,
                                        "system": "WGS_84"
                                    },
                                    "address": null,
                                    "time": null
                                },
                                "cost": null,
                                "operator": null,
                                "pointId": null,
                                "comment": null
                            },
                            {
                                "description": "RIGHT on to \"Grindelwaldweg\"",
                                "location": {
                                    "location": {
                                        "latitude": 52.564377500000006,
                                        "longitude": 13.352888700000001,
                                        "system": "WGS_84"
                                    },
                                    "address": null,
                                    "time": null
                                },
                                "cost": null,
                                "operator": null,
                                "pointId": null,
                                "comment": null
                            }
                        ]
                    },
                    {
                        "segmentId": "2",
                        "description": "Bus 5377.626689312766m to S+U Berlin Hauptbahnhof",
                        "origin": {
                            "location": {
                                "latitude": 52.564373,
                                "longitude": 13.352722,
                                "system": "WGS_84"
                            },
                            "address": "Grindelwaldweg (Berlin)",
                            "time": "2014-11-26T14:45:59+01:00"
                        },
                        "destination": {
                            "location": {
                                "latitude": 52.525847,
                                "longitude": 13.368924,
                                "system": "WGS_84"
                            },
                            "address": "S+U Berlin Hauptbahnhof",
                            "time": "2014-11-26T15:11:00+01:00"
                        },
                        "trafficType": "Bus",
                        "cost": {
                            "distance": {
                                "unit": "m",
                                "value": 5377.626689312766
                            },
                            "duration": {
                                "unit": "sec",
                                "value": 1500
                            },
                            "price": null,
                            "emission": null,
                            "ticketPrice": null
                        },
                        "wayPoints": [
                            {
                                "latitude": 52.564370000000004,
                                "longitude": 13.352720000000001,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.56208,
                                "longitude": 13.353750000000002,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.55856000000001,
                                "longitude": 13.35161,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.55491000000001,
                                "longitude": 13.345970000000001,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.55350000000001,
                                "longitude": 13.34659,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.550470000000004,
                                "longitude": 13.351960000000002,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.54784,
                                "longitude": 13.356570000000001,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.546490000000006,
                                "longitude": 13.359390000000001,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.544470000000004,
                                "longitude": 13.362660000000002,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.542730000000006,
                                "longitude": 13.366060000000001,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.541520000000006,
                                "longitude": 13.36941,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.53989000000001,
                                "longitude": 13.37039,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.53468,
                                "longitude": 13.370080000000002,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.530530000000006,
                                "longitude": 13.37405,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.52584,
                                "longitude": 13.368920000000001,
                                "system": "WGS_84"
                            }
                        ],
                        "guidingPoints": []
                    },
                    {
                        "segmentId": "3",
                        "description": "Bus 10964.80951009045m to Sonnenallee/Baumschulenstr. (Berlin)",
                        "origin": {
                            "location": {
                                "latitude": 52.525847,
                                "longitude": 13.368924,
                                "system": "WGS_84"
                            },
                            "address": "S+U Berlin Hauptbahnhof",
                            "time": "2014-11-26T15:11:00+01:00"
                        },
                        "destination": {
                            "location": {
                                "latitude": 52.460768,
                                "longitude": 13.480992,
                                "system": "WGS_84"
                            },
                            "address": "Sonnenallee/Baumschulenstr. (Berlin)",
                            "time": "2014-11-26T16:13:00+01:00"
                        },
                        "trafficType": "Bus",
                        "cost": {
                            "distance": {
                                "unit": "m",
                                "value": 10964.80951009045
                            },
                            "duration": {
                                "unit": "sec",
                                "value": 2760
                            },
                            "price": null,
                            "emission": null,
                            "ticketPrice": null
                        },
                        "wayPoints": [
                            {
                                "latitude": 52.52584,
                                "longitude": 13.368920000000001,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.51014000000001,
                                "longitude": 13.376650000000001,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.508720000000004,
                                "longitude": 13.37723,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.506550000000004,
                                "longitude": 13.379660000000001,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.50453,
                                "longitude": 13.38207,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.50041,
                                "longitude": 13.387440000000002,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.49777,
                                "longitude": 13.391760000000001,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.496010000000005,
                                "longitude": 13.395380000000001,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.494330000000005,
                                "longitude": 13.400630000000001,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.49391000000001,
                                "longitude": 13.40318,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.49336,
                                "longitude": 13.406780000000001,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.49203000000001,
                                "longitude": 13.41234,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.49096,
                                "longitude": 13.41614,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.48969,
                                "longitude": 13.420650000000002,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.488020000000006,
                                "longitude": 13.424570000000001,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.487550000000006,
                                "longitude": 13.426470000000002,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.486160000000005,
                                "longitude": 13.430460000000002,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.483810000000005,
                                "longitude": 13.435910000000002,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.48167,
                                "longitude": 13.44007,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.47981000000001,
                                "longitude": 13.44391,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.477500000000006,
                                "longitude": 13.44856,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.475500000000004,
                                "longitude": 13.45259,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.47382,
                                "longitude": 13.455990000000002,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.47223,
                                "longitude": 13.459380000000001,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.470270000000006,
                                "longitude": 13.464910000000001,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.46916,
                                "longitude": 13.46752,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.46654,
                                "longitude": 13.470350000000002,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.464850000000006,
                                "longitude": 13.472830000000002,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.463350000000005,
                                "longitude": 13.47507,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.46076000000001,
                                "longitude": 13.48099,
                                "system": "WGS_84"
                            }
                        ],
                        "guidingPoints": []
                    },
                    {
                        "segmentId": "4",
                        "description": "Bus 1195.917447864259m to Mahonienweg (Berlin)",
                        "origin": {
                            "location": {
                                "latitude": 52.460768,
                                "longitude": 13.480992,
                                "system": "WGS_84"
                            },
                            "address": "Sonnenallee/Baumschulenstr. (Berlin)",
                            "time": "2014-11-26T16:13:00+01:00"
                        },
                        "destination": {
                            "location": {
                                "latitude": 52.452586,
                                "longitude": 13.481247,
                                "system": "WGS_84"
                            },
                            "address": "Mahonienweg (Berlin)",
                            "time": "2014-11-26T16:23:00+01:00"
                        },
                        "trafficType": "Bus",
                        "cost": {
                            "distance": {
                                "unit": "m",
                                "value": 1195.917447864259
                            },
                            "duration": {
                                "unit": "sec",
                                "value": 180
                            },
                            "price": null,
                            "emission": null,
                            "ticketPrice": null
                        },
                        "wayPoints": [
                            {
                                "latitude": 52.46076000000001,
                                "longitude": 13.48099,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.456100000000006,
                                "longitude": 13.475430000000001,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.452580000000005,
                                "longitude": 13.481240000000001,
                                "system": "WGS_84"
                            }
                        ],
                        "guidingPoints": []
                    },
                    {
                        "segmentId": "5",
                        "description": "Walk 196.99748325794488m to path",
                        "origin": {
                            "location": {
                                "latitude": 52.45259980004502,
                                "longitude": 13.481257927173194,
                                "system": "WGS_84"
                            },
                            "address": "Mahonienweg (Berlin)",
                            "time": "2014-11-26T16:23:00+01:00"
                        },
                        "destination": {
                            "location": {
                                "latitude": 52.45282893167094,
                                "longitude": 13.483013425631938,
                                "system": "WGS_84"
                            },
                            "address": "path",
                            "time": "2014-11-26T16:25:43+01:00"
                        },
                        "trafficType": "Walk",
                        "cost": {
                            "distance": {
                                "unit": "m",
                                "value": 196.99748325794488
                            },
                            "duration": {
                                "unit": "sec",
                                "value": 162
                            },
                            "price": null,
                            "emission": null,
                            "ticketPrice": null
                        },
                        "wayPoints": [
                            {
                                "latitude": 52.45259000000001,
                                "longitude": 13.481250000000001,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.45253,
                                "longitude": 13.481340000000001,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.45239,
                                "longitude": 13.48164,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.452220000000004,
                                "longitude": 13.482120000000002,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.45232000000001,
                                "longitude": 13.482140000000001,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.452600000000004,
                                "longitude": 13.482140000000001,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.45270000000001,
                                "longitude": 13.482120000000002,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.45264,
                                "longitude": 13.482230000000001,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.452690000000004,
                                "longitude": 13.482450000000002,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.45282,
                                "longitude": 13.482830000000002,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.45282,
                                "longitude": 13.483010000000002,
                                "system": "WGS_84"
                            }
                        ],
                        "guidingPoints": [
                            {
                                "description": "DEPART on to \"Königsheideweg\"",
                                "location": {
                                    "location": {
                                        "latitude": 52.45259980004502,
                                        "longitude": 13.481257927173194,
                                        "system": "WGS_84"
                                    },
                                    "address": null,
                                    "time": null
                                },
                                "cost": null,
                                "operator": null,
                                "pointId": null,
                                "comment": null
                            },
                            {
                                "description": "LEFT on to \"path\"",
                                "location": {
                                    "location": {
                                        "latitude": 52.4522266,
                                        "longitude": 13.4821244,
                                        "system": "WGS_84"
                                    },
                                    "address": null,
                                    "time": null
                                },
                                "cost": null,
                                "operator": null,
                                "pointId": null,
                                "comment": null
                            }
                        ]
                    }
                ]
            }


# Group Journey Planner. IMR
This is a group of all IMR journey planner related rest resources.

## List of Trip Proposals with Basic Info. Intermodal Router [/imp-endpoint/api/V1/TripProposals/IMR] 

This collection contains a list of trip proposals with basic information for specified trip criteria. Note: the trip proposals can be multimodal or intermodal, depending on which routing service the user is subscribed to.

The data structure of collection contains a list of trip proposals. Each trip proposal contains the following attributes:

attribute | json data type | comments
--- | --- | ---
url | URI | URI to request more details
origin | Object | start point of the proposed trip
destination | Object | endpoint of the proposed trip
trafficTypes | Array | list of traffic types used in the proposed trip. Possible values: Bike, Bus, Car, CityTrain, Ferry, Metro, Other, RegioTrain, Unknown, Train, Tram, Walk, UBahn. trafficType Other is used in the segments for car rental/parking
description | String | description of the trip proposal
costs | Array | list of costs for the proposed trip including distance, duration, price, etc.

    
+ Model (application/json)

    + Body
    
            [
                {
                    "url": "TripProposals/IMR/67884",
                    "origin": {
                        "location": {
                            "latitude": 52.3934913,
                            "longitude": 13.0744278,
                            "system": "WGS_84"
                        },
                        "address": "Humboldtring 10, 14473 Potsdam, Germany",
                        "time": "2014-08-27T11:23:06+02:00"
                    },
                    "destination": {
                        "location": {
                            "latitude": 52.5258182,
                            "longitude": 13.369545,
                            "system": "WGS_84"
                        },
                        "address": "Europa Square 1, 10557 Berlin, Germany",
                        "time": "2014-08-27T13:03:07+02:00"
                    },
                    "trafficTypes": [
                        "Walk",
                        "Other",
                        "Bike"
                    ],
                    "description": null,
                    "costs": {
                        "distance": {
                            "unit": "Meter",
                            "value": 28537.5323005797
                        },
                        "duration": {
                            "unit": "Minute",
                            "value": 100.01666666666667
                        },
                        "price": {
                            "unit": "Euro",
                            "value": 0.1
                        },
                        "emission": {
                            "unit": "Gram",
                            "value": 0
                        },
                        "ticketPrice": null
                    }
                },
                {
                    "url": "TripProposals/IMR/67885",
                    "origin": {
                        "location": {
                            "latitude": 52.3934913,
                            "longitude": 13.0744278,
                            "system": "WGS_84"
                        },
                        "address": "Humboldtring 10, 14473 Potsdam, Germany",
                        "time": "2014-08-27T11:23:06+02:00"
                    },
                    "destination": {
                        "location": {
                            "latitude": 52.5258182,
                            "longitude": 13.369545,
                            "system": "WGS_84"
                        },
                        "address": "Europa Square 1, 10557 Berlin, Germany",
                        "time": "2014-08-27T13:11:13+02:00"
                    },
                    "trafficTypes": [
                        "Walk",
                        "Other",
                        "Bike"
                    ],
                    "description": null,
                    "costs": {
                        "distance": {
                            "unit": "Meter",
                            "value": 29568.7704083448
                        },
                        "duration": {
                            "unit": "Minute",
                            "value": 108.11666666666666
                        },
                        "price": {
                            "unit": "Euro",
                            "value": 0.1
                        },
                        "emission": {
                            "unit": "Gram",
                            "value": 0
                        },
                        "ticketPrice": null
                    }
                }
            ]


### Getting Trip Proposals by IMR Planner  [POST]
@testable

Selection criteria for trip proposals is specified in the request body as described in the sample request with the following attributes:

attribute | json data type | comments
--- | --- | ---
origin | Object | start point specified by a geo location (optionally can also include starttime). (addresses can be converted into geo locations by means of "GET /Resources/GeoLocations")
destination | Object | end point specified by a geo location (optional can also include endtime). Note if time in the origin is specified, time in the destination is discarded! If no time is specified current time is taken.
viapoints | Array of Objects | list of geolocations the route should pass
costfunctions | Array of Objects | list of cost factors, (such as Distance, Duration, Price, Emission), each with a percentual weight. Sample custfunction: {"costType":"Duration","percentage":"100"}
ownVehicles | Array of Objects | list of own vehicles which should be included into trip proposal calculation. Sample object value {"trafficType":"Car", "useParking":true,"useParkAndRide":false, "location":{"longitude":13.064472900000055,"latitude":52.3905689,"system":"WGS84"}}
userId | String | traveller id that requests a trip. Note: currently not used by IMP and can be any string
trafficTypes | Array | list of traffic types wich should be included into trip proposal calculation. Currently possible: Bike, Bus, Car, CityTrain, Ferry, Metro, Other, RegioTrain, Unknown, Train, Tram, Walk, UBahn. trafficType Other is used in the segments for car rental/parking
routingConstraints | Array of Objects | list of constraints to be taken into account for various traffic types, specified by min/max values. E.q. maximal distance in meters the traveller agrees to walk: {"routingConstraintType": "Distance", "trafficType": "Walk", "min": { "value": 0,"unit": "Meter" }, "max":{"value":600, "unit":"Meter"}}
useBikeSharing | Boolean | use bike sharing services for routing [default: false]
useCarSharing | Boolean | use car sharing services for routing [default: false]

Notes:
- IMR also provides routes in the past, but not for public transport
- route calculation the IMR takes into account information about current traffic situation (traffic jams/road works/...)
- Traveling time costs for proposed journeys include the following extra time: 2 minutes set-up time and 1 minute return time for free-floating car sharing and bike sharing; 2 minutes set-up time and 0 minutes return time for station-based car and bike sharing, 5 minutes parking time for free-floating car sharing and own car




+ Request

    + Headers
    
            Content-Type: application/json
            Accept: application/json

    + Body
        
            {
              "origin": {
                "location": {
                  "system": "WGS84",
                  "longitude": 13.074760101735592,
                  "latitude": 52.3933000574258
                },
                "time": "2014-08-27T14:53:06+05:30"
              },
              "destination": {
                "location": {
                  "system": "WGS84",
                  "longitude": 13.369544930756092,
                  "latitude": 52.52559208824942
                },
                "time": null
              },
              "viaPoints": [],
              "costFunctions": [
                {
                  "percentage": 100,
                  "costType": "Duration"
                }
              ],
              "userId": "4711/10",
              "trafficTypes": [
                "Walk",
                "Bike",
                "Car",
                "Metro",
                "CityTrain",
                "Bus"
              ],
              "routingConstraints": [
                {
                  "routingConstraintType": "Distance",
                  "trafficType": "Walk",
                  "max": {
                    "value": "1000",
                    "unit": "Meter"
                  }
                },
                {
                  "routingConstraintType": "Distance",
                  "trafficType": "Car",
                  "max": {
                    "value": "20000",
                    "unit": "Meter"
                  }
                }
             ],
             "useBikeSharing": "true",
             "useCarSharing": "true", 
             "ownVehicles":[
                            {  "trafficType":"Car",
                                "useParking":"true",
                                "useParkAndRide":"true"
                            }
                        ]
            }

+ Response 200

    [List of Trip Proposals with Basic Info. Intermodal Router][]


## Trip Proposal with Detailed Info [/imp-endpoint/api/V1/TripProposals/IMR/{proposalId}]

A single trip proposal object with Detailed Information. 
Each trip proposal consists of several segments, one segment for one transportation modality such as bike, car, train, etc. 
There is also a separate segment if the traveler shall use different lines of the same transport modality, 
for instance, first U5 from A to B and then U4 from B to C. Each segement has an origin and a destination with corresponding timestamps when to arrive and depart.
A segment consists of a sequence of wayPoints and guidingPoints.
A wayPoint describes an intermediate geo location useful for displaying the trip proposal in a map.
A guidingPoint gives a traveler hints how to travel, e.g., whenever to change the road at a crossing. GuidingPoints are a subset of wayPoints

The data structure of the trip proposal with detailed info contains the basic information attributes (*[POST /imp-endpoint/api/V1/TripProposals/IMR]*) and additionally the following attributes:

attribute | json data type | comments
--- | --- | ---
segmentId | URI | URI to request more details
origin | Object | start point of the proposed trip. For car sharing segment we have "operatorId" and "unitId" and for CityTrain/RegioTrain segment we have "platform", "stationId" and "direction"
destination | Object | endpoint of the proposed trip


Notes:
- The trip proposals as returned by *[GET /imp-endpoint/api/V1/TripProposals/IMR]* are internally stored only for a certain time; afterward they expire and details are no longer available. The current expiration time is 10 minutes.

### Getting a specific Trip Proposal [GET] 
@nottestable

+ Parameters
    + proposalId (string, `21844`) ... String `proposalId` as retrieved through *[GET /imp-endpoint/api/V1/TripProposals/IMR]*

        
+ Response 200 (application/json)

    + Body
        
            {
                "url": "TripProposals/21844/",
                "segments": [
                    {
                        "segmentId": "1",
                        "description": "@52.52164199999999,13.411007000000039:@52.57783508300779,13.3144836425781",
                        "origin": {
                            "location": {
                                "latitude": 52.52180099487305,
                                "longitude": 13.411330223083496,
                                "system": "WGS_84"
                            },
                            "address": null,
                            "time": "2014-06-28T14:04:02+02:00"
                        },
                        "destination": {
                            "location": {
                                "latitude": 52.57788848876953,
                                "longitude": 13.314399719238281,
                                "system": "WGS_84"
                            },
                            "address": null,
                            "time": "2014-06-28T14:28:02+02:00"
                        },
                        "trafficType": "Car",
                        "cost": {
                            "distance": {
                                "unit": "Meter",
                                "value": 10905
                            },
                            "duration": {
                                "unit": "Minute",
                                "value": 24.533333333333335
                            },
                            "price": {
                                "unit": "Euro",
                                "value": 4.9072499999999994
                            },
                            "emission": {
                                "unit": "Gram",
                                "value": 1635.75
                            },
                            "ticketPrice": null
                        },
                        "wayPoints": [
                            {
                                "latitude": 52.52180099487305,
                                "longitude": 13.411330223083496,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.52207946777344,
                                "longitude": 13.410940170288086,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.52252960205078,
                                "longitude": 13.410249710083008,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.57793045043945,
                                "longitude": 13.314519882202148,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.57788848876953,
                                "longitude": 13.314399719238281,
                                "system": "WGS_84"
                            }
                        ],
                        "guidingPoints": [
                            {
                                "description": "Leave from  Alexanderplatz, Berlin",
                                "location": {
                                    "location": {
                                        "latitude": 52.52180099487305,
                                        "longitude": 13.411330223083496,
                                        "system": "WGS_84"
                                    },
                                    "address": null,
                                    "time": null
                                },
                                "cost": {
                                    "distance": {
                                        "unit": "Meter",
                                        "value": 0
                                    },
                                    "duration": {
                                        "unit": "Second",
                                        "value": 0
                                    },
                                    "price": null,
                                    "emission": null,
                                    "ticketPrice": null
                                },
                                "operator": null,
                                "pointId": null,
                                "comment": [
                                    {
                                        "text": "Unknown Road",
                                        "type": "WARNING"
                                    }
                                ]
                            },
                            {
                                "description": "Turn right onto  Karl-Liebknecht-Straße",
                                "location": {
                                    "location": {
                                        "latitude": 52.52259826660156,
                                        "longitude": 13.410090446472168,
                                        "system": "WGS_84"
                                    },
                                    "address": null,
                                    "time": null
                                },
                                "cost": {
                                    "distance": {
                                        "unit": "Meter",
                                        "value": 121
                                    },
                                    "duration": {
                                        "unit": "Second",
                                        "value": 44
                                    },
                                    "price": null,
                                    "emission": null,
                                    "ticketPrice": null
                                },
                                "operator": null,
                                "pointId": null,
                                "comment": []
                            },
                            {
                                "description": "Turn left onto  Torstraße",
                                "location": {
                                    "location": {
                                        "latitude": 52.52676010131836,
                                        "longitude": 13.415670394897461,
                                        "system": "WGS_84"
                                    },
                                    "address": null,
                                    "time": null
                                },
                                "cost": {
                                    "distance": {
                                        "unit": "Meter",
                                        "value": 713
                                    },
                                    "duration": {
                                        "unit": "Second",
                                        "value": 142
                                    },
                                    "price": null,
                                    "emission": null,
                                    "ticketPrice": null
                                },
                                "operator": null,
                                "pointId": null,
                                "comment": []
                            },
                            {
                                "description": "Turn right onto  Brunnenstraße",
                                "location": {
                                    "location": {
                                        "latitude": 52.52975845336914,
                                        "longitude": 13.401300430297852,
                                        "system": "WGS_84"
                                    },
                                    "address": null,
                                    "time": null
                                },
                                "cost": {
                                    "distance": {
                                        "unit": "Meter",
                                        "value": 1805
                                    },
                                    "duration": {
                                        "unit": "Second",
                                        "value": 302
                                    },
                                    "price": null,
                                    "emission": null,
                                    "ticketPrice": null
                                },
                                "operator": null,
                                "pointId": null,
                                "comment": []
                            },
                            {
                                "description": "Turn right onto B96 Markstraße",
                                "location": {
                                    "location": {
                                        "latitude": 52.56296157836914,
                                        "longitude": 13.365429878234863,
                                        "system": "WGS_84"
                                    },
                                    "address": null,
                                    "time": null
                                },
                                "cost": {
                                    "distance": {
                                        "unit": "Meter",
                                        "value": 6349
                                    },
                                    "duration": {
                                        "unit": "Second",
                                        "value": 888
                                    },
                                    "price": null,
                                    "emission": null,
                                    "ticketPrice": null
                                },
                                "operator": null,
                                "pointId": null,
                                "comment": []
                            },
                            {
                                "description": "Turn right onto  Eichborndamm",
                                "location": {
                                    "location": {
                                        "latitude": 52.576568603515625,
                                        "longitude": 13.315110206604004,
                                        "system": "WGS_84"
                                    },
                                    "address": null,
                                    "time": null
                                },
                                "cost": {
                                    "distance": {
                                        "unit": "Meter",
                                        "value": 10665
                                    },
                                    "duration": {
                                        "unit": "Second",
                                        "value": 1400
                                    },
                                    "price": null,
                                    "emission": null,
                                    "ticketPrice": null
                                },
                                "operator": null,
                                "pointId": null,
                                "comment": []
                            },
                            {
                                "description": "Turn left onto  Miraustraße",
                                "location": {
                                    "location": {
                                        "latitude": 52.57780075073242,
                                        "longitude": 13.315600395202637,
                                        "system": "WGS_84"
                                    },
                                    "address": null,
                                    "time": null
                                },
                                "cost": {
                                    "distance": {
                                        "unit": "Meter",
                                        "value": 10801
                                    },
                                    "duration": {
                                        "unit": "Second",
                                        "value": 1426
                                    },
                                    "price": null,
                                    "emission": null,
                                    "ticketPrice": null
                                },
                                "operator": null,
                                "pointId": null,
                                "comment": []
                            },
                            {
                                "description": "Turn left onto  Breitenbachstraße",
                                "location": {
                                    "location": {
                                        "latitude": 52.57817077636719,
                                        "longitude": 13.314820289611816,
                                        "system": "WGS_84"
                                    },
                                    "address": null,
                                    "time": null
                                },
                                "cost": {
                                    "distance": {
                                        "unit": "Meter",
                                        "value": 10865
                                    },
                                    "duration": {
                                        "unit": "Second",
                                        "value": 1454
                                    },
                                    "price": null,
                                    "emission": null,
                                    "ticketPrice": null
                                },
                                "operator": null,
                                "pointId": null,
                                "comment": []
                            },
                            {
                                "description": "Arrive at  Breitenbachstraße, Borsigwalde",
                                "location": {
                                    "location": {
                                        "latitude": 52.57788848876953,
                                        "longitude": 13.314399719238281,
                                        "system": "WGS_84"
                                    },
                                    "address": null,
                                    "time": null
                                },
                                "cost": {
                                    "distance": {
                                        "unit": "Meter",
                                        "value": 10905
                                    },
                                    "duration": {
                                        "unit": "Second",
                                        "value": 1472
                                    },
                                    "price": null,
                                    "emission": null,
                                    "ticketPrice": null
                                },
                                "operator": null,
                                "pointId": null,
                                "comment": []
                            }
                        ]
                    },
                    {
                        "segmentId": "2",
                        "description": "parking part",
                        "origin": {
                            "location": {
                                "latitude": 52.57788848876953,
                                "longitude": 13.314399719238281,
                                "system": "WGS_84"
                            },
                            "address": "P+R Eichborndamm (S)",
                            "time": "2014-06-28T14:28:02+02:00",
                            "operatorId": "PR",
                            "unitId": "21846"
                        },
                        "destination": {
                            "location": {
                                "latitude": 52.57788848876953,
                                "longitude": 13.314399719238281,
                                "system": "WGS_84"
                            },
                            "address": null,
                            "time": "2014-06-28T14:28:02+02:00"
                        },
                        "trafficType": "Other",
                        "cost": {
                            "distance": {
                                "unit": "Meter",
                                "value": 0
                            },
                            "duration": {
                                "unit": "Minute",
                                "value": 0
                            },
                            "price": {
                                "unit": "Euro",
                                "value": 0
                            },
                            "emission": {
                                "unit": "Gram",
                                "value": 0
                            },
                            "ticketPrice": null
                        },
                        "wayPoints": [],
                        "guidingPoints": [
                            {
                                "description": "P+R Eichborndamm (S)",
                                "location": {
                                    "location": {
                                        "latitude": 52.57788848876953,
                                        "longitude": 13.314399719238281,
                                        "system": "WGS_84"
                                    },
                                    "address": null,
                                    "time": "2014-06-28T14:28:02+02:00"
                                },
                                "cost": {
                                    "distance": {
                                        "unit": "Meter",
                                        "value": 0
                                    },
                                    "duration": {
                                        "unit": "Minute",
                                        "value": 0
                                    },
                                    "price": {
                                        "unit": "Euro",
                                        "value": 0
                                    },
                                    "emission": {
                                        "unit": "Gram",
                                        "value": 0
                                    },
                                    "ticketPrice": null
                                },
                                "operator": null,
                                "pointId": null,
                                "comment": []
                            }
                        ]
                    },
                    {
                        "segmentId": "3",
                        "description": null,
                        "origin": {
                            "location": {
                                "latitude": 52.5778392,
                                "longitude": 13.3144837,
                                "system": "WGS_84"
                            },
                            "address": "Breitenbachstraße 13, 13509 Berlin, Germany",
                            "time": "2014-06-28T14:28:02+02:00",
                            "platform": null,
                            "stationId": null,
                            "direction": null
                        },
                        "destination": {
                            "location": {
                                "latitude": 52.5635387,
                                "longitude": 13.3194514,
                                "system": "WGS_84"
                            },
                            "address": "Meteorstraße 40a, 13405 Berlin, Germany",
                            "time": "2014-06-28T14:54:51+02:00",
                            "platform": null,
                            "stationId": null,
                            "direction": null
                        },
                        "trafficType": "Walk",
                        "cost": {
                            "distance": {
                                "unit": "Meter",
                                "value": 2169
                            },
                            "duration": {
                                "unit": "Minute",
                                "value": 26.816666666666666
                            },
                            "price": {
                                "unit": "Euro",
                                "value": 0
                            },
                            "emission": {
                                "unit": "Gram",
                                "value": 0
                            },
                            "ticketPrice": null
                        },
                        "wayPoints": [
                            {
                                "latitude": 52.57784,
                                "longitude": 13.31448,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.57783,
                                "longitude": 13.31523,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.57788,
                                "longitude": 13.3153,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.56422,
                                "longitude": 13.31559,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.56419,
                                "longitude": 13.3157,
                                "system": "WGS_84"
                            },
                            {
                                "latitude": 52.56354,
                                "longitude": 13.31945,
                                "system": "WGS_84"
                            }
                        ],
                        "guidingPoints": [
                            {
                                "description": "Head <b>east</b> toward <b>Antonienstraße</b>",
                                "location": {
                                    "location": {
                                        "latitude": 52.5778392,
                                        "longitude": 13.3144837,
                                        "system": "WGS_84"
                                    },
                                    "address": null,
                                    "time": null
                                },
                                "cost": {
                                    "distance": {
                                        "unit": "Meter",
                                        "value": 0
                                    },
                                    "duration": {
                                        "unit": "Second",
                                        "value": 0
                                    },
                                    "price": null,
                                    "emission": null,
                                    "ticketPrice": null
                                },
                                "operator": null,
                                "pointId": null,
                                "comment": []
                            },
                            {
                                "description": "Turn <b>left</b> onto <b>Antonienstraße</b>",
                                "location": {
                                    "location": {
                                        "latitude": 52.5778331,
                                        "longitude": 13.3152393,
                                        "system": "WGS_84"
                                    },
                                    "address": null,
                                    "time": null
                                },
                                "cost": {
                                    "distance": {
                                        "unit": "Meter",
                                        "value": 51
                                    },
                                    "duration": {
                                        "unit": "Second",
                                        "value": 34
                                    },
                                    "price": null,
                                    "emission": null,
                                    "ticketPrice": null
                                },
                                "operator": null,
                                "pointId": null,
                                "comment": []
                            },
                            {
                                "description": "Turn <b>right</b> onto <b>Miraustraße</b>",
                                "location": {
                                    "location": {
                                        "latitude": 52.5778815,
                                        "longitude": 13.3152959,
                                        "system": "WGS_84"
                                    },
                                    "address": null,
                                    "time": null
                                },
                                "cost": {
                                    "distance": {
                                        "unit": "Meter",
                                        "value": 58
                                    },
                                    "duration": {
                                        "unit": "Second",
                                        "value": 39
                                    },
                                    "price": null,
                                    "emission": null,
                                    "ticketPrice": null
                                },
                                "operator": null,
                                "pointId": null,
                                "comment": []
                            },
                            {
                                "description": "Turn <b>right</b> onto <b>Eichborndamm</b>",
                                "location": {
                                    "location": {
                                        "latitude": 52.5777704,
                                        "longitude": 13.3155112,
                                        "system": "WGS_84"
                                    },
                                    "address": null,
                                    "time": null
                                },
                                "cost": {
                                    "distance": {
                                        "unit": "Meter",
                                        "value": 77
                                    },
                                    "duration": {
                                        "unit": "Second",
                                        "value": 58
                                    },
                                    "price": null,
                                    "emission": null,
                                    "ticketPrice": null
                                },
                                "operator": null,
                                "pointId": null,
                                "comment": []
                            },
                            {
                                "description": "Turn <b>left</b> onto <b>Scharnweberstraße</b>",
                                "location": {
                                    "location": {
                                        "latitude": 52.5678802,
                                        "longitude": 13.3119237,
                                        "system": "WGS_84"
                                    },
                                    "address": null,
                                    "time": null
                                },
                                "cost": {
                                    "distance": {
                                        "unit": "Meter",
                                        "value": 1203
                                    },
                                    "duration": {
                                        "unit": "Second",
                                        "value": 892
                                    },
                                    "price": null,
                                    "emission": null,
                                    "ticketPrice": null
                                },
                                "operator": null,
                                "pointId": null,
                                "comment": []
                            },
                            {
                                "description": "Turn <b>right</b> onto <b>Uranusweg</b>",
                                "location": {
                                    "location": {
                                        "latitude": 52.5666126,
                                        "longitude": 13.3174002,
                                        "system": "WGS_84"
                                    },
                                    "address": null,
                                    "time": null
                                },
                                "cost": {
                                    "distance": {
                                        "unit": "Meter",
                                        "value": 1599
                                    },
                                    "duration": {
                                        "unit": "Second",
                                        "value": 1185
                                    },
                                    "price": null,
                                    "emission": null,
                                    "ticketPrice": null
                                },
                                "operator": null,
                                "pointId": null,
                                "comment": []
                            },
                            {
                                "description": "<b>Uranusweg</b> turns <b>left</b> and becomes <b>Meteorstraße</b><div style=\"font-size:0.9em\">Destination will be on the right</div>",
                                "location": {
                                    "location": {
                                        "latitude": 52.5642758,
                                        "longitude": 13.3155262,
                                        "system": "WGS_84"
                                    },
                                    "address": null,
                                    "time": null
                                },
                                "cost": {
                                    "distance": {
                                        "unit": "Meter",
                                        "value": 1889
                                    },
                                    "duration": {
                                        "unit": "Second",
                                        "value": 1406
                                    },
                                    "price": null,
                                    "emission": null,
                                    "ticketPrice": null
                                },
                                "operator": null,
                                "pointId": null,
                                "comment": []
                            },
                            {
                                "description": "Meteorstraße 40a, 13405 Berlin, Germany",
                                "location": {
                                    "location": {
                                        "latitude": 52.5635387,
                                        "longitude": 13.3194514,
                                        "system": "WGS_84"
                                    },
                                    "address": "Meteorstraße 40a, 13405 Berlin, Germany",
                                    "time": "2014-06-28T14:54:51+02:00"
                                },
                                "cost": {
                                    "distance": {
                                        "unit": "Meter",
                                        "value": 2169
                                    },
                                    "duration": {
                                        "unit": "Second",
                                        "value": 1609
                                    },
                                    "price": null,
                                    "emission": null,
                                    "ticketPrice": null
                                },
                                "operator": null,
                                "pointId": null,
                                "comment": []
                            }
                        ]
                    }
                ]
            }

# Group Journey Planner. Car Router
This is a group of all journey planner Car Router related rest resources.
            
## List of Trip Proposals with Basic Info. Car Journey Planner [/imp-endpoint/api/V1/TripProposals/CarRouter] 

This collection contains trip proposals with basic information for specified trip criteria.
The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
url | URI | URI to request more details
origin | Object | start point of the proposed trip
destination | Object | endpoint of the proposed trip
trafficTypes | Array | list of traffic types used in the proposed trip. Currently: Bike, Bus, Car, CityTrain, Ferry, Metro, Other, RegioTrain, Unknown, Train, Tram, Walk, UBahn. trafficType Other is used in the segments for car rental/parking  
description | String | 
costs | Array | list of costs for the proposed trip
useBikeSharing | Boolean | use bike sharing services for routing [default: false]
useCarSharing | Boolean | use car sharing services for routing [default: false]
--- | --- | ---
ownVehicles | Object | 
--- | --- | ---
trafficType | Enum | Own vehicle type - Car / Bike
useParking | Boolean | Use parking for own vehicle 
useParkAndRide | Boolean | Use parking and ride for own vehicle 

    
+ Model (application/json)

    + Body
    
            [
                {
                    "url": "TripProposals/CarRouter/80844",
                    "origin": {
                        "location": {
                            "latitude": 52.39419937133789,
                            "longitude": 13.07367992401123,
                            "system": "WGS_84"
                        },
                        "address": null,
                        "time": "2014-03-27T13:04:40+01:00"
                    },
                    "destination": {
                        "location": {
                            "latitude": 52.563589,
                            "longitude": 13.319065,
                            "system": "WGS_84"
                        },
                        "address": null,
                        "time": "2014-03-27T14:48:09+01:00"
                    },
                    "trafficTypes": [
                        "Car"
                    ],
                    "description": null,
                    "costs": {
                        "distance": null,
                        "duration": {
                            "unit": "Second",
                            "value": 5947.563361271776
                        },
                        "price": null,
                        "emission": null,
                        "ticketPrice": null
                    }
                }
            ]


### Getting Trip Proposals by Car Journey Planner [POST]
@testable

Selection criteria is specified in the request body as described in the sample request:
origin: start point specified by a geo location (addresses can be converted into geo locations by means of "GET /Resources/GeoLocations")
destination: start point specified by a geo location
either orgin or destination might specify a time
viaPoints: list of geo locations that the route should use
costFunction: list of cost factors (such as Distance, Duration, Price, Emission), each with a percentual weight 
routingConstraints: list of constraints to be taken into account for various traffic types, specified by min/max values
userId: user that requests a trip

+ Request

    + Headers
    
            Content-Type: application/json
            Accept: application/json

    + Body
        
            {
                  "origin": {
                    "location": {
                      "longitude": 13.072690999999963,
                      "latitude": 52.3941887,
                      "system": "WGS84"
                    },
                    "time": "2014-03-27T12:04:02UTC+05:30"
                  },
                  "destination": {
                    "location": {
                      "longitude": 13.319420000000036,
                      "latitude": 52.56347100000001,
                      "system": "WGS84"
                    },
                    "time": null
                  },
                  "viaPoints": [],
                  "costFunctions": [],
                  "userId": "4711/10",
                  "routingConstraints": []
            }

+ Response 200 

    [List of Trip Proposals with Basic Info. Car Journey Planner][]          


# Group Incidents / Traffic Info
This is a group of all incidents related rest resources.

## List of Incidents [/imp-endpoint/api/V1/Info/Incidents?lat={lat}&lng={lng}&radius={radius}] 

This collection contains list of recent general incidents (incidents that affect public AND individual transport) in a specific area of interest with an URI to get more details.
Note: The area of interest can be defined as:

* a bounding circle (lat={lat}&lng={lng}&radius={radius})
* a bounding box (left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng})

The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
category | Enum | {"Roadworks", "Blockade", "Indefinition"} are the categories for the incidents with type "IncidentIndividualTransport", {"ConstructionProject", "Imbalance", "Diversion", "RailReplacement", "ShuttleService"} are the categories for incidents with type "IncidentPublicTransport"
message | String | 
timePeriod | Object | time period of the incident
coordinates | Object | coordinates of the incident
reason | String | reason description
reasonShort | String | reason description
consequence | String | consequense description
consequenceShort | String | consequense description
location | String | location as String
source | String | {= "PT", "INKO", etc.}
affectedTrips | Array | list of affected trips
net | NetType  | 
description | String | description of an incident information
type | String | There are 2 types of incidents: Incidents with the type "IncidentIndividualTransport" affect individual transport (car, bycicle), incidents with the type "IncidentPublicTransport" affect public transport (bus, tram, etc.)
uri | URI | URI
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider | Enum | {"News", etc.}


+ Parameters
    + lat (number, `52.52`) ... latitude value. Has example value.
    + lng (number, `13.39`) ... longitude value. Has example value.
    + radius (number, `2000`) ... radius value. Has example value.
    
+ Model (application/json)

    + Body
    
            [
                {
                    "category": "Blockade",
                    "message": "Closed Road",
                    "timePeriod": {
                        "from": "2012-11-09T12:00:00+01:00",
                        "to": "2014-08-31T17:00:59+02:00"
                    },
                    "reason": null,
                    "reasonShort": null,
                    "consequence": null,
                    "consequenceShort": null,
                    "location": {
                        "latitude": 52.51774,
                        "longitude": 13.38868,
                        "system": "WGS_84"
                    },
                    "source": "INKO",
                    "affectedTrips": null,
                    "net": [],
                    "description": "Roadworks carriageway reduced from 2 to 1 lane traffic, congestion has to be expected road closed direction closed",
                    "type": "IndividualTransport",
                    "uri": null,
                    "provider": "vmz_trafficinfo",
                    "operator": "News",
                    "externalResourceId": "INKO_113388"
                },
                {
                    "category": "Roadworks",
                    "message": "Road Work",
                    "timePeriod": {
                        "from": "2012-04-11T09:00:00+02:00",
                        "to": "2016-05-15T17:00:59+02:00"
                    },
                    "reason": null,
                    "reasonShort": null,
                    "consequence": null,
                    "consequenceShort": null,
                    "location": {
                        "latitude": 52.51753,
                        "longitude": 13.39682,
                        "system": "WGS_84"
                    },
                    "source": "INKO",
                    "affectedTrips": null,
                    "net": [],
                    "description": "Roadworks, new road layout, carriageway reduced to one lane",
                    "type": "IndividualTransport",
                    "uri": null,
                    "provider": "vmz_trafficinfo",
                    "operator": "News",
                    "externalResourceId": "INKO_113041"
                }
            ]


### Getting all incidents [GET]
@testable

+ Response 200

    [List of Incidents][]
    
## List of All Incidents [/imp-endpoint/api/V1/Info/Incidents/All] 

This collection contains list of recent general incidents (incidents that affect public AND individual transport). 
The data structure of the response contains the following attributes:

attribute | json data type | comments
--- | --- | ---
category | Enum | {"Roadworks", "Blockade", "Indefinition", "Congestion"} are the categories for the incidents with type "IncidentIndividualTransport", {"Construction", "Imbalance", "Diversion", "RailReplacement"} are the categories for incidents with type "IncidentPublicTransport"
message | String | 
timePeriod | Object | time period of the incident
coordinates | Object | coordinates of the incident
reason | String | reason description
reasonShort | String | reason description
consequence | String | consequense description
consequenceShort | String | consequense description
location | String | location as String
source | String | {= "PT", "INKO", etc.}
affectedTrips | Array | list of affected trips
net | NetType  | 
description | String | description of an incident information
type | String | There are 2 types of incidents: Incidents with the type "IncidentIndividualTransport" affect individual transport (car, bycicle), incidents with the type "IncidentPublicTransport" affect public transport (bus, tram, etc.)
uri | URI | URI
location | Object | Standard WGS 84 for polar coordinates { "latitude":Number, "longitude":Number, "system": ENUM{"WGS_84","GK4","ETRS89",...}  }
provider | Enum | {"News", etc.}


### Getting all incidents [GET]
@testable

+ Response 200

    [List of Incidents][]
    
    
    
## List of individual transport Incidents [/imp-endpoint/api/V1/Info/Incidents/IndividualTransport?lat={lat}&lng={lng}&radius={radius}] 

This collection contains list of recent incidents that affect individual transport only in a specific area of interest.
Note: The area of interest can be defined as:

* a bounding circle (lat={lat}&lng={lng}&radius={radius})
* a bounding box (left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng})

The data structure contains the attributes as in *[/imp-endpoint/api/V1/Info/Incidents?lat={lat}&lng={lng}&radius={radius]* and additionally roadName attribute

+ Parameters
    + lat (number, `52.52`) ... latitude value. Has example value.
    + lng (number, `13.39`) ... longitude value. Has example value.
    + radius (number, `2000`) ... radius value. Has example value.
    
+ Model

        [
            {
                "category": "Blockade",
                "message": "Closed Road",
                "timePeriod": {
                    "from": "2014-01-06T11:03:00+01:00",
                    "to": "2014-12-31T23:59:00+01:00"
                },
                "reason": null,
                "reasonShort": null,
                "consequence": null,
                "consequenceShort": null,
                "location": {
                    "latitude": 52.51680860970485,
                    "longitude": 13.385821218640254,
                    "system": "WGS_84"
                },
                "source": "Concert",
                "affectedTrips": null,
                "net": [],
                "description": "Roadworks, direction closed",
                "type": "IndividualTransport",
                "uri": null,
                "provider": "vmz_trafficinfo",
                "operator": "News",
                "externalResourceId": "2147338066",
                "roadName": "Unter den Linden (Mitte)"
            },
            {
                "category": "Roadworks",
                "message": "Road Work",
                "timePeriod": {
                    "from": "2012-04-11T09:00:00+02:00",
                    "to": "2016-05-15T17:00:59+02:00"
                },
                "reason": null,
                "reasonShort": null,
                "consequence": null,
                "consequenceShort": null,
                "location": {
                    "latitude": 52.51753,
                    "longitude": 13.39682,
                    "system": "WGS_84"
                },
                "source": "INKO",
                "affectedTrips": null,
                "net": [],
                "description": "Roadworks, new road layout, carriageway reduced to one lane",
                "type": "IndividualTransport",
                "uri": null,
                "provider": "vmz_trafficinfo",
                "operator": "News",
                "externalResourceId": "INKO_113041",
                "roadName": "Unter den Linden (Mitte)"
            }
        ]

### Getting recent general incidents that affect individual transport only in a specific area. [GET]
@testable

+ Response 200

    [List of individual transport Incidents][]


## List of public transport Incidents [/imp-endpoint/api/V1/Info/Incidents/PublicTransport?lat={lat}&lng={lng}&radius={radius}] 

This collection contains list of recent incidents that affect public transport only in a specific area.
Note: The area of interest can be defined as:

* a bounding circle (lat={lat}&lng={lng}&radius={radius})
* a bounding box (left_lower_lat={min_lat}&left_lower_lng={min_lng}&right_upper_lat={max_lat}&right_upper_lng={max_lng})

The data structure contains the attributes as in *[/imp-endpoint/api/V1/Info/Incidents?lat={lat}&lng={lng}&radius={radius]* and additionally information about line name, first and last stops and line direction

+ Parameters
    + lat (number, `52.52`) ... latitude value. Has example value.
    + lng (number, `13.39`) ... longitude value. Has example value.
    + radius (number, `2000`) ... longitude value. Has example value.

+ Model (application/json)

    + Body
    
            [
                {
                    "category": "ConstructionProject",
                    "message": "Disruption",
                    "timePeriod": {
                        "from": "2013-08-26T01:00:00+02:00",
                        "to": null
                    },
                    "reason": "Sperrung wegen Bauarbeiten der BVG",
                    "reasonShort": "Sperrung wegen Bauarbeiten der BVG",
                    "consequence": "Die Linie verkehrt nur zwischen Riesaer Str. und S Hackescher Markt. Die Haltestellen zwischen S Hackescher Markt und U Schwartzkopffstr. werden nicht bedient. Ein Ersatzverkehr mit Bussen ist nicht eingerichtet. Fahrempfehlung: Fahrgäste in Richtung U Schwartzkopffstr. nutzen zur Weiterfahrt bitte die Linien M1 bzw. 12 von der Haltestelle S Hackescher Markt in der Rosenthaler Str. bis U Oranienburger Tor bzw. die S-Bahn bis S+U Friedrichstr. und von dort die U6 in Richtung Alt-Tegel.",
                    "consequenceShort": "Bauarbeiten, Sperrung Streckenabschnitt lnvalidenstr./Chausseestr. &lt;&gt; U Schwartzkopffstr.",
                    "location": {
                        "latitude": 52.52165861111111,
                        "longitude": 13.40267888888889,
                        "system": "WGS_84"
                    },
                    "source": "PT",
                    "affectedTrips": null,
                    "net": [],
                    "description": "Baumaßnahme",
                    "type": "PublicTransport",
                    "uri": null,
                    "provider": "vmz_trafficinfo",
                    "operator": "News",
                    "externalResourceId": "BVG50554",
                    "direction": "Beide",
                    "firstStop": "S Hackescher Markt",
                    "lastStop": "S Hackescher Markt",
                    "lineName": {
                        "name": "M6",
                        "trafficType": "Tram"
                    }
                },
                {
                    "category": "Diversion",
                    "message": "Disruption",
                    "timePeriod": {
                        "from": "2014-07-02T04:00:00+02:00",
                        "to": null
                    },
                    "reason": "Sperrung wegen Bauarbeiten",
                    "reasonShort": "Sperrung wegen Bauarbeiten",
                    "consequence": "Die Linie muss in Fahrtrichtung S+U Zoologischer Garten über Caroline-Michaelis-Str., Julie-Wolfthorn-Str., Zinnowitzer Str., Chausseestr., Habersaathstr. und Schwarzer Weg umgeleitet werden.",
                    "consequenceShort": "Bauarbeiten, Umleitung",
                    "location": {
                        "latitude": 52.53041916666667,
                        "longitude": 13.382412777777777,
                        "system": "WGS_84"
                    },
                    "source": "PT",
                    "affectedTrips": null,
                    "net": [],
                    "description": "Umleitung / geänderte Haltestellenbedienung",
                    "type": "PublicTransport",
                    "uri": null,
                    "provider": "vmz_trafficinfo",
                    "operator": "News",
                    "externalResourceId": "BVG54186",
                    "direction": "Beide",
                    "firstStop": "S Nordbahnhof/Gartenstr.",
                    "lastStop": "Invalidenpark",
                    "lineName": {
                        "name": "245",
                        "trafficType": "Bus"
                    }
                }
            ]


### Getting recent general incidents that affect public transport only in a specific area. [GET]
@testable

+ Response 200

    [List of public transport Incidents][]



# Group WMS
This is a group of all rest resources delivered as WMS

## WMS PNG file for Points of Interest [/imp-endpoint/api/V1/Resources?left_lower_lat={lllat}&left_lower_lng={lllng}&right_upper_lng={rulng}&right_upper_lat={rulat}&width={w}&heigth={h}&serviceNames={categories}]
Get WMS PNG file for points of interests specified by (several) service categories (e.g. PublicTransport, Parking, etc.)

### Getting a WMS PNG file [GET] 
@nottestable
Please note: The accept-header of this request must be set to "image/png"

+ Parameters
    + lllat (number, `52.482780222078205`) ... 
    + lllng (number, `13.3154296875`) ...     
    + rulng (number, `13.359375`) ... 
    + rulat (number, `52.50953477032729`) ... 
    + categories (string, `Parking,PublicTransport`) ... service names, comma-separated list of service categories (currently offered as WMS layers by VMZ), e.g. PublicTransport, Parking
    + h (optional, number, `250`) ... height of map output in pixels (semantics according to WMS GetMap request). the default value is height=250
    + w (optional, number, `250`) ... width of map output in pixels (semantics according to WMS GetMap request). the default value is width=250

+ Request

    + Headers
        
            accept: image/png 

+ Response 200 (image/png)

    + Body
    
            �PNG


## WMS PNG file for Public Transport Stations [/imp-endpoint/api/V1/Resources/PublicTransport?left_lower_lat={lllat}&left_lower_lng={lllng}&right_upper_lng={rulng}&right_upper_lat={rulat}&width={w}&heigth={h}]
Get WMS PNG file for public transport stations

### Getting a public transport stations WMS PNG file [GET] 
@nottestable
Please note: The accept-header of this request must be set to "image/png"

+ Parameters
    + lllat (number, `52.482780222078205`) ... 
    + lllng (number, `13.3154296875`) ...     
    + rulng (number, `13.359375`) ... 
    + rulat (number, `52.50953477032729`) ... 
    + h (optional, number, `250`) ... height of map output in pixels (semantics according to WMS GetMap request). the default value is height=250
    + w (optional, number, `250`) ... width of map output in pixels (semantics according to WMS GetMap request). the default value is width=250

+ Request

    + Headers
        
            accept: image/png 

+ Response 200 (image/png)
         
    + Body
    
            �PNG


## WMS PNG file for Current Traffic [/imp-endpoint/api/V1/Info/TrafficInfo?left_lower_lat={lllat}&left_lower_lng={lllng}&right_upper_lng={rulng}&right_upper_lat={rulat}&width={w}&heigth={h}]
Get WMS PNG file for current traffic

### Getting a current traffic WMS PNG file [GET] 
@nottestable
Please note: The accept-header of this request must be set to "image/png"

+ Parameters
    + lllat (number, `52.482780222078205`) ... 
    + lllng (number, `13.3154296875`) ...     
    + rulng (number, `13.359375`) ... 
    + rulat (number, `52.50953477032729`) ... 
    + h (optional, number, `250`) ... height of map output in pixels (semantics according to WMS GetMap request). the default value is height=250
    + w (optional, number, `250`) ... width of map output in pixels (semantics according to WMS GetMap request). the default value is width=250

+ Request

    + Headers
        
            accept: image/png 

+ Response 200 (image/png)
         
    + Body
    
            �PNG
            

# Group Partners
This is a group of all IMP partner related rest resources.

 
## Partner [/imp-endpoint/api/V1/Partners/{PartnerId}]

The Partner resource has the following attributes: 

- status
- url
- companyName
- roles

+ Parameters
    + PartnerId (string) ... ID of the partner.

+ Model (application/haljson)

        {
            "status": "requested",
            "url": "/Partners/1",
            "companyName":"Partner 1",
            "roles": [ "ServiceProvider" ]
        }

### Show details of specified Partner [GET]
@nottestable

+ Response 200
    
    [Partner][]
            
### Request update of Partner details [PUT]
@nottestable
Starts "Update Partner" Process (UC PM-1)

+ Request

    + Headers
        
            Content-Type: application/json
            Accept: application/json
        
    + Body
        
            { "companyName":"Partner 1 new" }
        
+ Response 200

    [Partner][]

### Request deletion of specified Partner [DELETE]
@nottestable
Starts "Delete Partner" Process (UC PM-1)
        
+ Response 204



## Partners Collection [/imp-endpoint/api/V1/Partners]
Collection of all Partners

+ Model

        { "items":
            [
            { "status": "registered", "url": "/Partners/1", "companyName":"Partner 1", "roles": [ "ServiceProvider" ] },
            { "status": "registered", "url": "/Partners/2", "companyName":"Partner 2", "roles": [ "ServiceProvider" ] },
            { "status": "registered", "url": "/Partners/3", "companyName":"Partner 3", "roles": [ "MobilityProvider" ] }
            ]
        }

### List all registered Partners [GET]
@nottestable
Only for admins

+ Response 200

    [Partners Collection][]

### Request a creation of a new Partner [POST]
@nottestable
Starts "New Partner" Process

+ Request

    + Headers
        
            Content-Type: application/json
            Accept: application/json
            
    + Body
    
            { "companyName":"ContiPark", roles": [ "ServiceProvider" ]}

+ Response 201

    [Partner][]

## User Token [/imp-endpoint/api/V1/Partners/User/Process?action={action}]

The User Token resource has the following attributes: 

- id
- partnerId
- token

+ Parameters
    + action (string, `register`) ... String `action` must have value "register" to start token generation
    
+ Model

        {
            "id": 137533,
            "partnerId": 96,
            "token": "c04c5446-d11d-4162-a3a5-135fbf557f25"
        }
    

### Generate User Token [POST]
@nottestable
Starts "User Token Generation" Process

+ Request

    + Headers
        
            Content-Type: application/json
            Accept: application/json

+ Response 201 (application/json)

    [User Token][]


## User Transactions Collection [/imp-endpoint/api/V1/Partners/User/Transactions?startDate={startDate}&endDate={endDate}]

The User Transactions Collection resource has the following attributes: 

- serviceCategory
- serviceType
- serviceDescription
- unit
- value
- startTime
- endTime

+ Parameters

    + startDate (string, `2013-12-18`, optional) ... If date range not provided then results are fetched for last one month
    + endDate (string, `2013-12-30`, optional) ... If date range not provided then results are fetched for last one month
    
+ Model

        [
            {
                "serviceCategory": "Parking",
                "serviceType": "consumption",
                "serviceDescription": "vmzParking : consumption",
                "unit": "EUR",
                "value": 0,
                "startTime": "2014-01-07T12:38:39+05:30",
                "endTime": "2014-01-07T12:38:39+05:30"
            }
        ]
    

### Request user transactions [GET]
@nottestable

+ Request

    + Headers
        
            Content-Type: application/json
            Accept: application/json
            userToken: "someUserToken"
            

+ Response 200 (application/json)

    [User Transactions Collection][]
            
            
# Group Business Area Info

## Business Area Info [/imp-endpoint/api/V1/Info/ServiceOffering/{id}/BusinessArea]    
Business area of a (free-floating) service (cars, bikes) specified by service offering id.

The data structure contains the following attributes:

Attribute | JSON Data Type | Comments
--- | --- | ---
operator | String |  operator id. Example values: Car2Go_Berlin, DriveNow, NextBike, CallABike etc
description | String |  ...
serviceCategory |ENUM | IMP service categories "CarSharing", "BikeSharing", etc
businessBoundary | Object | business area specified as MultyPolygon conform to the following GeoJSON Format Specification: http://geojson.org/geojson-spec.html

### Getting Business Area [GET]
@nottestable


+ Response 200 (application/json)

    + Body
            
            {
              "operator": "Car2Go_Berlin",
              "description": "Wagen zum Gehen ",
              "serviceCategory": "CarSharing",
              "businessBoundary": {
                "disjunctedBoundary": {
                  "type": "MultiPolygon",
                  "coordinates": [
                  [[[52.53996,12.977235],[52.540586,12.977782],[52.541037,12.977782],[52.541905,12.977793],[52.541924,12.978501],[52.541885,12.978995]],
                      [[52.550631,13.29696],[52.550729,13.297985],[52.55021,13.298113],[52.550135,13.297314],[52.550178,13.297051],[52.550631,13.29696]]]
                      ],
                  "crs": {
                    "type": "name",
                    "properties": {
                      "name": "WGS84"
                    }
                  }
                },
                "negatedBoundary": {
                  "type": "MultiPolygon",
                  "coordinates": [
                  [[[52.476409,13.366665],[52.476377,13.366386],[52.475619,13.366161],[52.475256,13.366123],[52.475158,13.366236],[52.475164,13.366413],[52.475275,13.366488],[52.476409,13.366665]],
                      [[52.530452,13.314314],[52.530347,13.313885],[52.535359,13.312082],[52.537317,13.326759],[52.536821,13.327746]]]
                      ],
                  "crs": {
                    "type": "name",
                    "properties": {
                      "name": "WGS84"
                    }
                  }
                }
              }
            }
            
# Group Heatmap
This is a group of all rest resources related to heatmap as PNG file. Heat map is a graphical representation of data where the individual values are represented as colors.
Currently it is used to represent two service categories: CarSharing and BikeSharing services

## CarSharing Heatmap [/imp-endpoint/api/V1/Info/Heatmap/CarSharing?date={x}&left_lower_lat={lllat}&left_lower_lng={lllng}&right_upper_lng={rulng}&right_upper_lat={rulat}&width={wdval}&height={htval}]    
Get WMS PNG file for carSharing for a specific date (in the history, current date or in the future) and for a specific bounding box (place).
If the date is in the history, the returned image with green dots represents historycal data of carsharing availability, if the date is in the future, the returned image with blue dots represent prediction of carsharing availability.

### Getting heatmap as PNG image [GET]
@nottestable

+ Parameters
    + date (required, number, `1404892800000`) ... a date in the history for historical data / in the future for predictions. Has example value.
    + lllat (required, number, `52.482780222078205`) ... 
    + lllng (required, number, `13.3154296875`) ...     
    + rulng (required, number, `13.359375`) ... 
    + rulat (required, number, `52.50953477032729`) ... 
    + wdval (required, number, `480`) ... 
    + htval (required, number, `800`) ... 
    
+ Request

    + Headers
        
            accept: image/png 

+ Response 200 (image/png)

    + Body
    
            �PNG

## BikeSharing Heatmap [/imp-endpoint/api/V1/Info/Heatmap/BikeSharing?date={x}&left_lower_lat={lllat}&left_lower_lng={lllng}&right_upper_lng={rulng}&right_upper_lat={rulat}&width={wdval}&height={htval}]    
Get WMS PNG file for bikesharing for a specific date and for a specific bounding box (place).

### Getting heatmap as PNG image [GET]
@nottestable

+ Parameters
    + date (required, number, `1404892800000`) ... a date in the history (later also in the future) Has example value.
    + lllat (required, number, `52.482780222078205`) ... 
    + lllng (required, number, `13.3154296875`) ...     
    + rulng (required, number, `13.359375`) ... 
    + rulat (required, number, `52.50953477032729`) ... 
    + wdval (required, number, `255`) ... 
    + htval (required, number, `255`) ... 

+ Request

    + Headers
        
            accept: image/png 

+ Response 200 (image/png)

    + Body
    
            �PNG


# Group ServiceOfferings

## ServiceOfferings [/imp-endpoint/api/V1/ServiceOfferings] 

RESPONSE:
This collection contains a list service offerings :

attribute | json data type | comments
--- | --- | ---
x | Number | xx
x | String | xx 

+ Model (application/json)
    
        [
            {
                "id": 137,
                "name": "Aggregated Static Parking POIs",
                "url": "http://vmz.de/Parking",
                "category": {
                    "id": 28,
                    "name": "Parking"
                },
                "ownerName": null,
                "contact": null,
                "shortDescription": null,
                "geographicalInformation": null,
                "validFrom": 1404138735000,
                "validTo": 1409867999000,
                "noticePeriod": "10",
                "version": 1,
                "serviceSubscriptionProcessName": "subscribeWithAutomaticAcceptance",
                "serviceUsageProcessName": "vmzParkingGarage",
                "features": [
                    {
                        "id": 138,
                        "type": "RELEASE",
                        "interfaceType": null,
                        "priceModelType": null,
                        "url": null,
                        "documentation": null
                    },
                    {
                        "id": 139,
                        "type": "LIST",
                        "interfaceType": null,
                        "priceModelType": null,
                        "url": null,
                        "documentation": null
                    },
                    {
                        "id": 140,
                        "type": "CONSUME",
                        "interfaceType": null,
                        "priceModelType": null,
                        "url": null,
                        "documentation": null
                    },
                    {
                        "id": 141,
                        "type": "DETAIL",
                        "interfaceType": null,
                        "priceModelType": null,
                        "url": null,
                        "documentation": null
                    }
                ],
                "serviceAlias": "vmzParking",
                "serviceProviderName": "VMZ Berlin",
                "serviceProviderStatus": "ACTIVE",
                "serviceCosts": [],
                "offeringStatus": "INACTIVE"
            },
            {
                "id": 154,
                "name": "Traffic Incidents",
                "url": "http://vmz.de/Traffic",
                "category": {
                    "id": 30,
                    "name": "TrafficInfo"
                },
                "ownerName": null,
                "contact": null,
                "shortDescription": null,
                "geographicalInformation": null,
                "validFrom": null,
                "validTo": null,
                "noticePeriod": "",
                "version": 1,
                "serviceSubscriptionProcessName": "subscribeWithAutomaticAcceptance",
                "serviceUsageProcessName": null,
                "features": [
                    {
                        "id": 155,
                        "type": "LIST",
                        "interfaceType": null,
                        "priceModelType": null,
                        "url": null,
                        "documentation": null
                    },
                    {
                        "id": 156,
                        "type": "DETAIL",
                        "interfaceType": null,
                        "priceModelType": null,
                        "url": null,
                        "documentation": null
                    },
                    {
                        "id": 157,
                        "type": "WMS",
                        "interfaceType": null,
                        "priceModelType": null,
                        "url": null,
                        "documentation": null
                    }
                ],
                "serviceAlias": "vmz_trafficinfo",
                "serviceProviderName": "VMZ Berlin",
                "serviceProviderStatus": "ACTIVE",
                "serviceCosts": [],
                "offeringStatus": "ACCEPTED"
            },
            {
                "id": 158,
                "name": "Traffic Level-of-Service",
                "url": "http://vmz.de/WMS",
                "category": {
                    "id": 35,
                    "name": "WMS"
                },
                "ownerName": null,
                "contact": null,
                "shortDescription": null,
                "geographicalInformation": null,
                "validFrom": null,
                "validTo": null,
                "noticePeriod": "",
                "version": 1,
                "serviceSubscriptionProcessName": "subscribeWithAutomaticAcceptance",
                "serviceUsageProcessName": null,
                "features": [
                    {
                        "id": 159,
                        "type": "WMS",
                        "interfaceType": null,
                        "priceModelType": null,
                        "url": null,
                        "documentation": null
                    }
                ],
                "serviceAlias": "vmz",
                "serviceProviderName": "VMZ Berlin",
                "serviceProviderStatus": "ACTIVE",
                "serviceCosts": [],
                "offeringStatus": "ACCEPTED"
            },
            {
                "id": 160,
                "name": "Geo Coding",
                "url": "http://vmz.de/GeoCoding",
                "category": {
                    "id": 38,
                    "name": "GeoCoding"
                },
                "ownerName": null,
                "contact": null,
                "shortDescription": null,
                "geographicalInformation": null,
                "validFrom": null,
                "validTo": null,
                "noticePeriod": "",
                "version": 1,
                "serviceSubscriptionProcessName": "subscribeWithAutomaticAcceptance",
                "serviceUsageProcessName": null,
                "features": [
                    {
                        "id": 161,
                        "type": "LIST",
                        "interfaceType": null,
                        "priceModelType": null,
                        "url": null,
                        "documentation": null
                    }
                ],
                "serviceAlias": "vmzGeoCoding",
                "serviceProviderName": "VMZ Berlin",
                "serviceProviderStatus": "ACTIVE",
                "serviceCosts": [],
                "offeringStatus": "ACCEPTED"
            },
            {
                "id": 162,
                "name": "IMR Routing",
                "url": "http://vmz.de/IMRRouter",
                "category": {
                    "id": 36,
                    "name": "JourneyPlanner"
                },
                "ownerName": null,
                "contact": null,
                "shortDescription": null,
                "geographicalInformation": null,
                "validFrom": null,
                "validTo": null,
                "noticePeriod": "",
                "version": 1,
                "serviceSubscriptionProcessName": "subscribeWithAutomaticAcceptance",
                "serviceUsageProcessName": null,
                "features": [
                    {
                        "id": 163,
                        "type": "LIST",
                        "interfaceType": null,
                        "priceModelType": null,
                        "url": null,
                        "documentation": null
                    },
                    {
                        "id": 164,
                        "type": "DETAIL",
                        "interfaceType": null,
                        "priceModelType": null,
                        "url": null,
                        "documentation": null
                    }
                ],
                "serviceAlias": "vmzImrRouting",
                "serviceProviderName": "VMZ Berlin",
                "serviceProviderStatus": "ACTIVE",
                "serviceCosts": [],
                "offeringStatus": "ACCEPTED"
            },
            {
                "id": 126352,
                "name": "Car Routing",
                "url": "http://vmz.de/CarRouter",
                "category": {
                    "id": 126351,
                    "name": "CarJourneyPlanner"
                },
                "ownerName": null,
                "contact": null,
                "shortDescription": null,
                "geographicalInformation": null,
                "validFrom": null,
                "validTo": null,
                "noticePeriod": "",
                "version": 1,
                "serviceSubscriptionProcessName": "subscribeWithAutomaticAcceptance",
                "serviceUsageProcessName": null,
                "features": [
                    {
                        "id": 126353,
                        "type": "LIST",
                        "interfaceType": null,
                        "priceModelType": null,
                        "url": null,
                        "documentation": null
                    },
                    {
                        "id": 126354,
                        "type": "DETAIL",
                        "interfaceType": null,
                        "priceModelType": null,
                        "url": null,
                        "documentation": null
                    }
                ],
                "serviceAlias": "vmzCarRouting",
                "serviceProviderName": "VMZ Berlin",
                "serviceProviderStatus": "ACTIVE",
                "serviceCosts": [],
                "offeringStatus": "ACCEPTED"
            }
        ]


### getting all service offerings [GET]
@nottestable

+ Response 200
    
    [ServiceOfferings][]

## Service Offerings per Partner [/imp-endpoint/api/V1/Partners/{partnerId}/ServiceOfferings]

### getting service offerings per partner [GET]
@nottestable

+ Parameters
    + partnerId (number, `42`) ... partner id.

+ Response 200
    
    [ServiceOfferings][]



# Group Service Subscriptions
TODO

# Group Service Categories

This is a group of all rest resources related to service categories available. Services offered by service provider have to be classified with one of these service categories.

## Service Categories [/imp-endpoint/api/V1/ServiceCategories] 

RESPONSE:
This collection contains a list of all currently available service categories in IMP. Each service category has the following attributes:

attribute | json data type | comments
--- | --- | ---
id | Number | internal id
name | String | Service Category name

+ Model (application/json)
    
        [
            {
                "id": 33,
                "name": "BikeSharing"
            },
            {
                "id": 126351,
                "name": "CarJourneyPlanner"
            },
            {
                "id": 32,
                "name": "CarSharing"
            },
            {
                "id": 34,
                "name": "EVCharging"
            },
            {
                "id": 38,
                "name": "GeoCoding"
            },
            {
                "id": 36,
                "name": "JourneyPlanner"
            },
            {
                "id": 28,
                "name": "Parking"
            },
            {
                "id": 29,
                "name": "PublicTransport"
            },
            {
                "id": 37,
                "name": "TaxiService"
            },
            {
                "id": 31,
                "name": "Ticketing"
            },
            {
                "id": 30,
                "name": "TrafficInfo"
            },
            {
                "id": 35,
                "name": "WMS"
            }
        ]


### Show service categories [GET]
@testable

+ Response 200
    
    [Service Categories][]
    
            

# Group Process Definitions

Some of IMP resources are linked to BPMN processes. These resources contain action in the URL, similar to "Resources/Parking/Garages/270113/Process?action=consume"
This group describes rest resources which can be used to list possible BPMN process definitions.

## All Process Definitions [/imp-endpoint/api/V1/ProcessDefinitions] 

RESPONSE:
This collection contains a list of all Processes. Each service usage has the following attributes:

attribute | json data type | comments
--- | --- | ---
id | String | process id
name | String | process name
description | String | 
processCategory | String | category of the process (ServiceUsage, ...)
requiredFeatures | Array | list of features (BOOKING, CANCELATION, etc.)

+ Model (application/json)
    
        [
            {
                "id": "bookingWithCancelation",
                "name": "Booking / Cancelation",
                "description": null,
                "processCategory": "ServiceUsage",
                "requiredFeatures": [
                    "BOOKING",
                    "CANCELATION"
                ]
            },
            {
                "id": "bookingWithoutCancelation",
                "name": "Booking",
                "description": null,
                "processCategory": "ServiceUsage",
                "requiredFeatures": [
                    "BOOKING"
                ]
            },
            {
                "id": "handyticketBookingProcess",
                "name": "HandyTicket Booking",
                "description": null,
                "processCategory": "ServiceUsage",
                "requiredFeatures": [
                    "BUY",
                    "CONFIRM"
                ]
            },
            {
                "id": "vmzParkingGarage",
                "name": "Parking Garage",
                "description": null,
                "processCategory": "ServiceUsage",
                "requiredFeatures": [
                    "CONSUME",
                    "RELEASE"
                ]
            }
        ]


### getting all BPMN process definitions [GET]
@nottestable

+ Response 200
    
    [All Process Definitions][]


## Process Definitions for Service Usage [/imp-endpoint/api/V1/ProcessDefinitions/ServiceUsage] 

RESPONSE:
This collection contains a list of process definitions of the type service usage. Each process has the following attributes:

attribute | json data type | comments
--- | --- | ---
id | String | process id
name | String | process name
description | String | 
processCategory | String | category of the process (ServiceUsage, ...)
requiredFeatures | Array | list of features (BOOKING, CANCELATION, etc.)

+ Model (application/json)
    
        [
            {
                "id": "bookingWithCancelation",
                "name": "Booking / Cancelation",
                "description": null,
                "processCategory": "ServiceUsage",
                "requiredFeatures": [
                    "BOOKING",
                    "CANCELATION"
                ]
            },
            {
                "id": "bookingWithoutCancelation",
                "name": "Booking",
                "description": null,
                "processCategory": "ServiceUsage",
                "requiredFeatures": [
                    "BOOKING"
                ]
            },
            {
                "id": "handyticketBookingProcess",
                "name": "HandyTicket Booking",
                "description": null,
                "processCategory": "ServiceUsage",
                "requiredFeatures": [
                    "BUY",
                    "CONFIRM"
                ]
            },
            {
                "id": "vmzParkingGarage",
                "name": "Parking Garage",
                "description": null,
                "processCategory": "ServiceUsage",
                "requiredFeatures": [
                    "CONSUME",
                    "RELEASE"
                ]
            }
        ]


### getting service usage BPMN process definitions [GET]
@testable

+ Response 200
    
    [Process Definitions for Service Usage][]

## Process Definitions for Service Subscription [/imp-endpoint/api/V1/ProcessDefinitions/ServiceSubscription] 

RESPONSE:
This collection contains a list of process definitions of the type service subscription. Each process has the following attributes:

attribute | json data type | comments
--- | --- | ---
id | String | process id
name | String | process name
description | String | 
processCategory | String | category of the process (ServiceUsage, ...)
requiredFeatures | Array | list of features (BOOKING, CANCELATION, etc.)

+ Model (application/json)
    
        [
            {
                "id": "subscribePublicFree",
                "name": "Public & free",
                "description": null,
                "processCategory": "ServiceSubscription",
                "requiredFeatures": []
            },
            {
                "id": "subscribeWithAcceptance",
                "name": "Acceptance process",
                "description": null,
                "processCategory": "ServiceSubscription",
                "requiredFeatures": []
            },
            {
                "id": "subscribeWithAutomaticAcceptance",
                "name": "Automatic acceptance",
                "description": null,
                "processCategory": "ServiceSubscription",
                "requiredFeatures": []
            }
        ]

### getting service subscription BPMN process definitions [GET]
@testable

+ Response 200
    
    [Process Definitions for Service Subscription][]


# Group Reporting

This is a group of all rest resources related to reporting

## Report [/imp-endpoint/api/V1/Reporting/CustomReport?reportName={reportName}] 

RESPONSE:
The response contains an image representing the report.

+ Model (text/plain)
    
        iVBORw0KGgoAAAANSUhEUgAAAfoAAAEjCAIAAABVRlT5AABHkkl


### getting a specific report [GET]
@nottestable

REQUEST

+ Request

    + Headers
        
            accept: text/plain
            
+ Parameters

    + reportName (string, `sp_revenue`) ... Reportname. Has example value. (possible report types: mp_revenue, info_request, book_request, total_revenue, availability)

+ Response 200 

    [Report][]


# Group Dummy. Please do not delete.
